
RTCClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095b0  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08009668  08009668  0000a668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a3c  08009a3c  0000b06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009a3c  08009a3c  0000b06c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009a3c  08009a3c  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a3c  08009a3c  0000aa3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a40  08009a40  0000aa40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009a44  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c8  2000006c  08009ab0  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20000534  08009ab0  0000b534  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000188af  00000000  00000000  0000b094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003976  00000000  00000000  00023943  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  000272c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a1  00000000  00000000  00028820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000063a6  00000000  00000000  000298c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b388  00000000  00000000  0002fc67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a312  00000000  00000000  0004afef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5301  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005810  00000000  00000000  000e5344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000eab54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000006c 	.word	0x2000006c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08009650 	.word	0x08009650

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000070 	.word	0x20000070
 80000fc:	08009650 	.word	0x08009650

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f8f0 	bl	800040c <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__divsi3>:
 8000238:	4603      	mov	r3, r0
 800023a:	430b      	orrs	r3, r1
 800023c:	d47f      	bmi.n	800033e <__divsi3+0x106>
 800023e:	2200      	movs	r2, #0
 8000240:	0843      	lsrs	r3, r0, #1
 8000242:	428b      	cmp	r3, r1
 8000244:	d374      	bcc.n	8000330 <__divsi3+0xf8>
 8000246:	0903      	lsrs	r3, r0, #4
 8000248:	428b      	cmp	r3, r1
 800024a:	d35f      	bcc.n	800030c <__divsi3+0xd4>
 800024c:	0a03      	lsrs	r3, r0, #8
 800024e:	428b      	cmp	r3, r1
 8000250:	d344      	bcc.n	80002dc <__divsi3+0xa4>
 8000252:	0b03      	lsrs	r3, r0, #12
 8000254:	428b      	cmp	r3, r1
 8000256:	d328      	bcc.n	80002aa <__divsi3+0x72>
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d30d      	bcc.n	800027a <__divsi3+0x42>
 800025e:	22ff      	movs	r2, #255	@ 0xff
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	ba12      	rev	r2, r2
 8000264:	0c03      	lsrs	r3, r0, #16
 8000266:	428b      	cmp	r3, r1
 8000268:	d302      	bcc.n	8000270 <__divsi3+0x38>
 800026a:	1212      	asrs	r2, r2, #8
 800026c:	0209      	lsls	r1, r1, #8
 800026e:	d065      	beq.n	800033c <__divsi3+0x104>
 8000270:	0b03      	lsrs	r3, r0, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d319      	bcc.n	80002aa <__divsi3+0x72>
 8000276:	e000      	b.n	800027a <__divsi3+0x42>
 8000278:	0a09      	lsrs	r1, r1, #8
 800027a:	0bc3      	lsrs	r3, r0, #15
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x4c>
 8000280:	03cb      	lsls	r3, r1, #15
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b83      	lsrs	r3, r0, #14
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x58>
 800028c:	038b      	lsls	r3, r1, #14
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b43      	lsrs	r3, r0, #13
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x64>
 8000298:	034b      	lsls	r3, r1, #13
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b03      	lsrs	r3, r0, #12
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x70>
 80002a4:	030b      	lsls	r3, r1, #12
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0ac3      	lsrs	r3, r0, #11
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x7c>
 80002b0:	02cb      	lsls	r3, r1, #11
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a83      	lsrs	r3, r0, #10
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x88>
 80002bc:	028b      	lsls	r3, r1, #10
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a43      	lsrs	r3, r0, #9
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x94>
 80002c8:	024b      	lsls	r3, r1, #9
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a03      	lsrs	r3, r0, #8
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0xa0>
 80002d4:	020b      	lsls	r3, r1, #8
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	d2cd      	bcs.n	8000278 <__divsi3+0x40>
 80002dc:	09c3      	lsrs	r3, r0, #7
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xae>
 80002e2:	01cb      	lsls	r3, r1, #7
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0983      	lsrs	r3, r0, #6
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xba>
 80002ee:	018b      	lsls	r3, r1, #6
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0943      	lsrs	r3, r0, #5
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xc6>
 80002fa:	014b      	lsls	r3, r1, #5
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0903      	lsrs	r3, r0, #4
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xd2>
 8000306:	010b      	lsls	r3, r1, #4
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	08c3      	lsrs	r3, r0, #3
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xde>
 8000312:	00cb      	lsls	r3, r1, #3
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0883      	lsrs	r3, r0, #2
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xea>
 800031e:	008b      	lsls	r3, r1, #2
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0843      	lsrs	r3, r0, #1
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xf6>
 800032a:	004b      	lsls	r3, r1, #1
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	1a41      	subs	r1, r0, r1
 8000332:	d200      	bcs.n	8000336 <__divsi3+0xfe>
 8000334:	4601      	mov	r1, r0
 8000336:	4152      	adcs	r2, r2
 8000338:	4610      	mov	r0, r2
 800033a:	4770      	bx	lr
 800033c:	e05d      	b.n	80003fa <__divsi3+0x1c2>
 800033e:	0fca      	lsrs	r2, r1, #31
 8000340:	d000      	beq.n	8000344 <__divsi3+0x10c>
 8000342:	4249      	negs	r1, r1
 8000344:	1003      	asrs	r3, r0, #32
 8000346:	d300      	bcc.n	800034a <__divsi3+0x112>
 8000348:	4240      	negs	r0, r0
 800034a:	4053      	eors	r3, r2
 800034c:	2200      	movs	r2, #0
 800034e:	469c      	mov	ip, r3
 8000350:	0903      	lsrs	r3, r0, #4
 8000352:	428b      	cmp	r3, r1
 8000354:	d32d      	bcc.n	80003b2 <__divsi3+0x17a>
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d312      	bcc.n	8000382 <__divsi3+0x14a>
 800035c:	22fc      	movs	r2, #252	@ 0xfc
 800035e:	0189      	lsls	r1, r1, #6
 8000360:	ba12      	rev	r2, r2
 8000362:	0a03      	lsrs	r3, r0, #8
 8000364:	428b      	cmp	r3, r1
 8000366:	d30c      	bcc.n	8000382 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d308      	bcc.n	8000382 <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d304      	bcc.n	8000382 <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	d03a      	beq.n	80003f2 <__divsi3+0x1ba>
 800037c:	1192      	asrs	r2, r2, #6
 800037e:	e000      	b.n	8000382 <__divsi3+0x14a>
 8000380:	0989      	lsrs	r1, r1, #6
 8000382:	09c3      	lsrs	r3, r0, #7
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x154>
 8000388:	01cb      	lsls	r3, r1, #7
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0983      	lsrs	r3, r0, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x160>
 8000394:	018b      	lsls	r3, r1, #6
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0943      	lsrs	r3, r0, #5
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x16c>
 80003a0:	014b      	lsls	r3, r1, #5
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0903      	lsrs	r3, r0, #4
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x178>
 80003ac:	010b      	lsls	r3, r1, #4
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	08c3      	lsrs	r3, r0, #3
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x184>
 80003b8:	00cb      	lsls	r3, r1, #3
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0883      	lsrs	r3, r0, #2
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x190>
 80003c4:	008b      	lsls	r3, r1, #2
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	d2d9      	bcs.n	8000380 <__divsi3+0x148>
 80003cc:	0843      	lsrs	r3, r0, #1
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d301      	bcc.n	80003d6 <__divsi3+0x19e>
 80003d2:	004b      	lsls	r3, r1, #1
 80003d4:	1ac0      	subs	r0, r0, r3
 80003d6:	4152      	adcs	r2, r2
 80003d8:	1a41      	subs	r1, r0, r1
 80003da:	d200      	bcs.n	80003de <__divsi3+0x1a6>
 80003dc:	4601      	mov	r1, r0
 80003de:	4663      	mov	r3, ip
 80003e0:	4152      	adcs	r2, r2
 80003e2:	105b      	asrs	r3, r3, #1
 80003e4:	4610      	mov	r0, r2
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x1b4>
 80003e8:	4240      	negs	r0, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d500      	bpl.n	80003f0 <__divsi3+0x1b8>
 80003ee:	4249      	negs	r1, r1
 80003f0:	4770      	bx	lr
 80003f2:	4663      	mov	r3, ip
 80003f4:	105b      	asrs	r3, r3, #1
 80003f6:	d300      	bcc.n	80003fa <__divsi3+0x1c2>
 80003f8:	4240      	negs	r0, r0
 80003fa:	b501      	push	{r0, lr}
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f805 	bl	800040c <__aeabi_idiv0>
 8000402:	bd02      	pop	{r1, pc}

08000404 <__aeabi_idivmod>:
 8000404:	2900      	cmp	r1, #0
 8000406:	d0f8      	beq.n	80003fa <__divsi3+0x1c2>
 8000408:	e716      	b.n	8000238 <__divsi3>
 800040a:	4770      	bx	lr

0800040c <__aeabi_idiv0>:
 800040c:	4770      	bx	lr
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__aeabi_cdrcmple>:
 8000410:	4684      	mov	ip, r0
 8000412:	0010      	movs	r0, r2
 8000414:	4662      	mov	r2, ip
 8000416:	468c      	mov	ip, r1
 8000418:	0019      	movs	r1, r3
 800041a:	4663      	mov	r3, ip
 800041c:	e000      	b.n	8000420 <__aeabi_cdcmpeq>
 800041e:	46c0      	nop			@ (mov r8, r8)

08000420 <__aeabi_cdcmpeq>:
 8000420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000422:	f000 f905 	bl	8000630 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	d401      	bmi.n	800042e <__aeabi_cdcmpeq+0xe>
 800042a:	2100      	movs	r1, #0
 800042c:	42c8      	cmn	r0, r1
 800042e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000430 <__aeabi_dcmpeq>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f000 f849 	bl	80004c8 <__eqdf2>
 8000436:	4240      	negs	r0, r0
 8000438:	3001      	adds	r0, #1
 800043a:	bd10      	pop	{r4, pc}

0800043c <__aeabi_dcmplt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 f8f7 	bl	8000630 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	db01      	blt.n	800044a <__aeabi_dcmplt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_dcmple>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 f8ed 	bl	8000630 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	dd01      	ble.n	800045e <__aeabi_dcmple+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)

08000464 <__aeabi_dcmpgt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f000 f873 	bl	8000550 <__gedf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dc01      	bgt.n	8000472 <__aeabi_dcmpgt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			@ (mov r8, r8)

08000478 <__aeabi_dcmpge>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f000 f869 	bl	8000550 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	da01      	bge.n	8000486 <__aeabi_dcmpge+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_d2uiz>:
 800048c:	b570      	push	{r4, r5, r6, lr}
 800048e:	2200      	movs	r2, #0
 8000490:	4b0c      	ldr	r3, [pc, #48]	@ (80004c4 <__aeabi_d2uiz+0x38>)
 8000492:	0004      	movs	r4, r0
 8000494:	000d      	movs	r5, r1
 8000496:	f7ff ffef 	bl	8000478 <__aeabi_dcmpge>
 800049a:	2800      	cmp	r0, #0
 800049c:	d104      	bne.n	80004a8 <__aeabi_d2uiz+0x1c>
 800049e:	0020      	movs	r0, r4
 80004a0:	0029      	movs	r1, r5
 80004a2:	f001 f823 	bl	80014ec <__aeabi_d2iz>
 80004a6:	bd70      	pop	{r4, r5, r6, pc}
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <__aeabi_d2uiz+0x38>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	0020      	movs	r0, r4
 80004ae:	0029      	movs	r1, r5
 80004b0:	f000 fc12 	bl	8000cd8 <__aeabi_dsub>
 80004b4:	f001 f81a 	bl	80014ec <__aeabi_d2iz>
 80004b8:	2380      	movs	r3, #128	@ 0x80
 80004ba:	061b      	lsls	r3, r3, #24
 80004bc:	469c      	mov	ip, r3
 80004be:	4460      	add	r0, ip
 80004c0:	e7f1      	b.n	80004a6 <__aeabi_d2uiz+0x1a>
 80004c2:	46c0      	nop			@ (mov r8, r8)
 80004c4:	41e00000 	.word	0x41e00000

080004c8 <__eqdf2>:
 80004c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ca:	4657      	mov	r7, sl
 80004cc:	46de      	mov	lr, fp
 80004ce:	464e      	mov	r6, r9
 80004d0:	4645      	mov	r5, r8
 80004d2:	b5e0      	push	{r5, r6, r7, lr}
 80004d4:	000d      	movs	r5, r1
 80004d6:	0004      	movs	r4, r0
 80004d8:	0fe8      	lsrs	r0, r5, #31
 80004da:	4683      	mov	fp, r0
 80004dc:	0309      	lsls	r1, r1, #12
 80004de:	0fd8      	lsrs	r0, r3, #31
 80004e0:	0b09      	lsrs	r1, r1, #12
 80004e2:	4682      	mov	sl, r0
 80004e4:	4819      	ldr	r0, [pc, #100]	@ (800054c <__eqdf2+0x84>)
 80004e6:	468c      	mov	ip, r1
 80004e8:	031f      	lsls	r7, r3, #12
 80004ea:	0069      	lsls	r1, r5, #1
 80004ec:	005e      	lsls	r6, r3, #1
 80004ee:	0d49      	lsrs	r1, r1, #21
 80004f0:	0b3f      	lsrs	r7, r7, #12
 80004f2:	0d76      	lsrs	r6, r6, #21
 80004f4:	4281      	cmp	r1, r0
 80004f6:	d018      	beq.n	800052a <__eqdf2+0x62>
 80004f8:	4286      	cmp	r6, r0
 80004fa:	d00f      	beq.n	800051c <__eqdf2+0x54>
 80004fc:	2001      	movs	r0, #1
 80004fe:	42b1      	cmp	r1, r6
 8000500:	d10d      	bne.n	800051e <__eqdf2+0x56>
 8000502:	45bc      	cmp	ip, r7
 8000504:	d10b      	bne.n	800051e <__eqdf2+0x56>
 8000506:	4294      	cmp	r4, r2
 8000508:	d109      	bne.n	800051e <__eqdf2+0x56>
 800050a:	45d3      	cmp	fp, sl
 800050c:	d01c      	beq.n	8000548 <__eqdf2+0x80>
 800050e:	2900      	cmp	r1, #0
 8000510:	d105      	bne.n	800051e <__eqdf2+0x56>
 8000512:	4660      	mov	r0, ip
 8000514:	4320      	orrs	r0, r4
 8000516:	1e43      	subs	r3, r0, #1
 8000518:	4198      	sbcs	r0, r3
 800051a:	e000      	b.n	800051e <__eqdf2+0x56>
 800051c:	2001      	movs	r0, #1
 800051e:	bcf0      	pop	{r4, r5, r6, r7}
 8000520:	46bb      	mov	fp, r7
 8000522:	46b2      	mov	sl, r6
 8000524:	46a9      	mov	r9, r5
 8000526:	46a0      	mov	r8, r4
 8000528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	428e      	cmp	r6, r1
 800052e:	d1f6      	bne.n	800051e <__eqdf2+0x56>
 8000530:	4661      	mov	r1, ip
 8000532:	4339      	orrs	r1, r7
 8000534:	000f      	movs	r7, r1
 8000536:	4317      	orrs	r7, r2
 8000538:	4327      	orrs	r7, r4
 800053a:	d1f0      	bne.n	800051e <__eqdf2+0x56>
 800053c:	465b      	mov	r3, fp
 800053e:	4652      	mov	r2, sl
 8000540:	1a98      	subs	r0, r3, r2
 8000542:	1e43      	subs	r3, r0, #1
 8000544:	4198      	sbcs	r0, r3
 8000546:	e7ea      	b.n	800051e <__eqdf2+0x56>
 8000548:	2000      	movs	r0, #0
 800054a:	e7e8      	b.n	800051e <__eqdf2+0x56>
 800054c:	000007ff 	.word	0x000007ff

08000550 <__gedf2>:
 8000550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000552:	4657      	mov	r7, sl
 8000554:	464e      	mov	r6, r9
 8000556:	4645      	mov	r5, r8
 8000558:	46de      	mov	lr, fp
 800055a:	b5e0      	push	{r5, r6, r7, lr}
 800055c:	000d      	movs	r5, r1
 800055e:	030e      	lsls	r6, r1, #12
 8000560:	0049      	lsls	r1, r1, #1
 8000562:	0d49      	lsrs	r1, r1, #21
 8000564:	468a      	mov	sl, r1
 8000566:	0fdf      	lsrs	r7, r3, #31
 8000568:	0fe9      	lsrs	r1, r5, #31
 800056a:	46bc      	mov	ip, r7
 800056c:	b083      	sub	sp, #12
 800056e:	4f2f      	ldr	r7, [pc, #188]	@ (800062c <__gedf2+0xdc>)
 8000570:	0004      	movs	r4, r0
 8000572:	4680      	mov	r8, r0
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	0058      	lsls	r0, r3, #1
 8000578:	0319      	lsls	r1, r3, #12
 800057a:	4691      	mov	r9, r2
 800057c:	0b36      	lsrs	r6, r6, #12
 800057e:	0b09      	lsrs	r1, r1, #12
 8000580:	0d40      	lsrs	r0, r0, #21
 8000582:	45ba      	cmp	sl, r7
 8000584:	d01d      	beq.n	80005c2 <__gedf2+0x72>
 8000586:	42b8      	cmp	r0, r7
 8000588:	d00d      	beq.n	80005a6 <__gedf2+0x56>
 800058a:	4657      	mov	r7, sl
 800058c:	2f00      	cmp	r7, #0
 800058e:	d12a      	bne.n	80005e6 <__gedf2+0x96>
 8000590:	4334      	orrs	r4, r6
 8000592:	2800      	cmp	r0, #0
 8000594:	d124      	bne.n	80005e0 <__gedf2+0x90>
 8000596:	430a      	orrs	r2, r1
 8000598:	d036      	beq.n	8000608 <__gedf2+0xb8>
 800059a:	2c00      	cmp	r4, #0
 800059c:	d141      	bne.n	8000622 <__gedf2+0xd2>
 800059e:	4663      	mov	r3, ip
 80005a0:	0058      	lsls	r0, r3, #1
 80005a2:	3801      	subs	r0, #1
 80005a4:	e015      	b.n	80005d2 <__gedf2+0x82>
 80005a6:	4311      	orrs	r1, r2
 80005a8:	d138      	bne.n	800061c <__gedf2+0xcc>
 80005aa:	4653      	mov	r3, sl
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d101      	bne.n	80005b4 <__gedf2+0x64>
 80005b0:	4326      	orrs	r6, r4
 80005b2:	d0f4      	beq.n	800059e <__gedf2+0x4e>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	4563      	cmp	r3, ip
 80005b8:	d107      	bne.n	80005ca <__gedf2+0x7a>
 80005ba:	9b01      	ldr	r3, [sp, #4]
 80005bc:	0058      	lsls	r0, r3, #1
 80005be:	3801      	subs	r0, #1
 80005c0:	e007      	b.n	80005d2 <__gedf2+0x82>
 80005c2:	4326      	orrs	r6, r4
 80005c4:	d12a      	bne.n	800061c <__gedf2+0xcc>
 80005c6:	4550      	cmp	r0, sl
 80005c8:	d021      	beq.n	800060e <__gedf2+0xbe>
 80005ca:	2001      	movs	r0, #1
 80005cc:	9b01      	ldr	r3, [sp, #4]
 80005ce:	425f      	negs	r7, r3
 80005d0:	4338      	orrs	r0, r7
 80005d2:	b003      	add	sp, #12
 80005d4:	bcf0      	pop	{r4, r5, r6, r7}
 80005d6:	46bb      	mov	fp, r7
 80005d8:	46b2      	mov	sl, r6
 80005da:	46a9      	mov	r9, r5
 80005dc:	46a0      	mov	r8, r4
 80005de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e0:	2c00      	cmp	r4, #0
 80005e2:	d0dc      	beq.n	800059e <__gedf2+0x4e>
 80005e4:	e7e6      	b.n	80005b4 <__gedf2+0x64>
 80005e6:	2800      	cmp	r0, #0
 80005e8:	d0ef      	beq.n	80005ca <__gedf2+0x7a>
 80005ea:	9b01      	ldr	r3, [sp, #4]
 80005ec:	4563      	cmp	r3, ip
 80005ee:	d1ec      	bne.n	80005ca <__gedf2+0x7a>
 80005f0:	4582      	cmp	sl, r0
 80005f2:	dcea      	bgt.n	80005ca <__gedf2+0x7a>
 80005f4:	dbe1      	blt.n	80005ba <__gedf2+0x6a>
 80005f6:	428e      	cmp	r6, r1
 80005f8:	d8e7      	bhi.n	80005ca <__gedf2+0x7a>
 80005fa:	d1de      	bne.n	80005ba <__gedf2+0x6a>
 80005fc:	45c8      	cmp	r8, r9
 80005fe:	d8e4      	bhi.n	80005ca <__gedf2+0x7a>
 8000600:	2000      	movs	r0, #0
 8000602:	45c8      	cmp	r8, r9
 8000604:	d2e5      	bcs.n	80005d2 <__gedf2+0x82>
 8000606:	e7d8      	b.n	80005ba <__gedf2+0x6a>
 8000608:	2c00      	cmp	r4, #0
 800060a:	d0e2      	beq.n	80005d2 <__gedf2+0x82>
 800060c:	e7dd      	b.n	80005ca <__gedf2+0x7a>
 800060e:	4311      	orrs	r1, r2
 8000610:	d104      	bne.n	800061c <__gedf2+0xcc>
 8000612:	9b01      	ldr	r3, [sp, #4]
 8000614:	4563      	cmp	r3, ip
 8000616:	d1d8      	bne.n	80005ca <__gedf2+0x7a>
 8000618:	2000      	movs	r0, #0
 800061a:	e7da      	b.n	80005d2 <__gedf2+0x82>
 800061c:	2002      	movs	r0, #2
 800061e:	4240      	negs	r0, r0
 8000620:	e7d7      	b.n	80005d2 <__gedf2+0x82>
 8000622:	9b01      	ldr	r3, [sp, #4]
 8000624:	4563      	cmp	r3, ip
 8000626:	d0e6      	beq.n	80005f6 <__gedf2+0xa6>
 8000628:	e7cf      	b.n	80005ca <__gedf2+0x7a>
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	000007ff 	.word	0x000007ff

08000630 <__ledf2>:
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000632:	4657      	mov	r7, sl
 8000634:	464e      	mov	r6, r9
 8000636:	4645      	mov	r5, r8
 8000638:	46de      	mov	lr, fp
 800063a:	b5e0      	push	{r5, r6, r7, lr}
 800063c:	000d      	movs	r5, r1
 800063e:	030e      	lsls	r6, r1, #12
 8000640:	0049      	lsls	r1, r1, #1
 8000642:	0d49      	lsrs	r1, r1, #21
 8000644:	468a      	mov	sl, r1
 8000646:	0fdf      	lsrs	r7, r3, #31
 8000648:	0fe9      	lsrs	r1, r5, #31
 800064a:	46bc      	mov	ip, r7
 800064c:	b083      	sub	sp, #12
 800064e:	4f2e      	ldr	r7, [pc, #184]	@ (8000708 <__ledf2+0xd8>)
 8000650:	0004      	movs	r4, r0
 8000652:	4680      	mov	r8, r0
 8000654:	9101      	str	r1, [sp, #4]
 8000656:	0058      	lsls	r0, r3, #1
 8000658:	0319      	lsls	r1, r3, #12
 800065a:	4691      	mov	r9, r2
 800065c:	0b36      	lsrs	r6, r6, #12
 800065e:	0b09      	lsrs	r1, r1, #12
 8000660:	0d40      	lsrs	r0, r0, #21
 8000662:	45ba      	cmp	sl, r7
 8000664:	d01e      	beq.n	80006a4 <__ledf2+0x74>
 8000666:	42b8      	cmp	r0, r7
 8000668:	d00d      	beq.n	8000686 <__ledf2+0x56>
 800066a:	4657      	mov	r7, sl
 800066c:	2f00      	cmp	r7, #0
 800066e:	d127      	bne.n	80006c0 <__ledf2+0x90>
 8000670:	4334      	orrs	r4, r6
 8000672:	2800      	cmp	r0, #0
 8000674:	d133      	bne.n	80006de <__ledf2+0xae>
 8000676:	430a      	orrs	r2, r1
 8000678:	d034      	beq.n	80006e4 <__ledf2+0xb4>
 800067a:	2c00      	cmp	r4, #0
 800067c:	d140      	bne.n	8000700 <__ledf2+0xd0>
 800067e:	4663      	mov	r3, ip
 8000680:	0058      	lsls	r0, r3, #1
 8000682:	3801      	subs	r0, #1
 8000684:	e015      	b.n	80006b2 <__ledf2+0x82>
 8000686:	4311      	orrs	r1, r2
 8000688:	d112      	bne.n	80006b0 <__ledf2+0x80>
 800068a:	4653      	mov	r3, sl
 800068c:	2b00      	cmp	r3, #0
 800068e:	d101      	bne.n	8000694 <__ledf2+0x64>
 8000690:	4326      	orrs	r6, r4
 8000692:	d0f4      	beq.n	800067e <__ledf2+0x4e>
 8000694:	9b01      	ldr	r3, [sp, #4]
 8000696:	4563      	cmp	r3, ip
 8000698:	d01d      	beq.n	80006d6 <__ledf2+0xa6>
 800069a:	2001      	movs	r0, #1
 800069c:	9b01      	ldr	r3, [sp, #4]
 800069e:	425f      	negs	r7, r3
 80006a0:	4338      	orrs	r0, r7
 80006a2:	e006      	b.n	80006b2 <__ledf2+0x82>
 80006a4:	4326      	orrs	r6, r4
 80006a6:	d103      	bne.n	80006b0 <__ledf2+0x80>
 80006a8:	4550      	cmp	r0, sl
 80006aa:	d1f6      	bne.n	800069a <__ledf2+0x6a>
 80006ac:	4311      	orrs	r1, r2
 80006ae:	d01c      	beq.n	80006ea <__ledf2+0xba>
 80006b0:	2002      	movs	r0, #2
 80006b2:	b003      	add	sp, #12
 80006b4:	bcf0      	pop	{r4, r5, r6, r7}
 80006b6:	46bb      	mov	fp, r7
 80006b8:	46b2      	mov	sl, r6
 80006ba:	46a9      	mov	r9, r5
 80006bc:	46a0      	mov	r8, r4
 80006be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c0:	2800      	cmp	r0, #0
 80006c2:	d0ea      	beq.n	800069a <__ledf2+0x6a>
 80006c4:	9b01      	ldr	r3, [sp, #4]
 80006c6:	4563      	cmp	r3, ip
 80006c8:	d1e7      	bne.n	800069a <__ledf2+0x6a>
 80006ca:	4582      	cmp	sl, r0
 80006cc:	dce5      	bgt.n	800069a <__ledf2+0x6a>
 80006ce:	db02      	blt.n	80006d6 <__ledf2+0xa6>
 80006d0:	428e      	cmp	r6, r1
 80006d2:	d8e2      	bhi.n	800069a <__ledf2+0x6a>
 80006d4:	d00e      	beq.n	80006f4 <__ledf2+0xc4>
 80006d6:	9b01      	ldr	r3, [sp, #4]
 80006d8:	0058      	lsls	r0, r3, #1
 80006da:	3801      	subs	r0, #1
 80006dc:	e7e9      	b.n	80006b2 <__ledf2+0x82>
 80006de:	2c00      	cmp	r4, #0
 80006e0:	d0cd      	beq.n	800067e <__ledf2+0x4e>
 80006e2:	e7d7      	b.n	8000694 <__ledf2+0x64>
 80006e4:	2c00      	cmp	r4, #0
 80006e6:	d0e4      	beq.n	80006b2 <__ledf2+0x82>
 80006e8:	e7d7      	b.n	800069a <__ledf2+0x6a>
 80006ea:	9b01      	ldr	r3, [sp, #4]
 80006ec:	2000      	movs	r0, #0
 80006ee:	4563      	cmp	r3, ip
 80006f0:	d0df      	beq.n	80006b2 <__ledf2+0x82>
 80006f2:	e7d2      	b.n	800069a <__ledf2+0x6a>
 80006f4:	45c8      	cmp	r8, r9
 80006f6:	d8d0      	bhi.n	800069a <__ledf2+0x6a>
 80006f8:	2000      	movs	r0, #0
 80006fa:	45c8      	cmp	r8, r9
 80006fc:	d2d9      	bcs.n	80006b2 <__ledf2+0x82>
 80006fe:	e7ea      	b.n	80006d6 <__ledf2+0xa6>
 8000700:	9b01      	ldr	r3, [sp, #4]
 8000702:	4563      	cmp	r3, ip
 8000704:	d0e4      	beq.n	80006d0 <__ledf2+0xa0>
 8000706:	e7c8      	b.n	800069a <__ledf2+0x6a>
 8000708:	000007ff 	.word	0x000007ff

0800070c <__aeabi_dmul>:
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070e:	4657      	mov	r7, sl
 8000710:	464e      	mov	r6, r9
 8000712:	46de      	mov	lr, fp
 8000714:	4645      	mov	r5, r8
 8000716:	b5e0      	push	{r5, r6, r7, lr}
 8000718:	001f      	movs	r7, r3
 800071a:	030b      	lsls	r3, r1, #12
 800071c:	0b1b      	lsrs	r3, r3, #12
 800071e:	0016      	movs	r6, r2
 8000720:	469a      	mov	sl, r3
 8000722:	0fca      	lsrs	r2, r1, #31
 8000724:	004b      	lsls	r3, r1, #1
 8000726:	0004      	movs	r4, r0
 8000728:	4691      	mov	r9, r2
 800072a:	b085      	sub	sp, #20
 800072c:	0d5b      	lsrs	r3, r3, #21
 800072e:	d100      	bne.n	8000732 <__aeabi_dmul+0x26>
 8000730:	e1cf      	b.n	8000ad2 <__aeabi_dmul+0x3c6>
 8000732:	4acd      	ldr	r2, [pc, #820]	@ (8000a68 <__aeabi_dmul+0x35c>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d055      	beq.n	80007e4 <__aeabi_dmul+0xd8>
 8000738:	4651      	mov	r1, sl
 800073a:	0f42      	lsrs	r2, r0, #29
 800073c:	00c9      	lsls	r1, r1, #3
 800073e:	430a      	orrs	r2, r1
 8000740:	2180      	movs	r1, #128	@ 0x80
 8000742:	0409      	lsls	r1, r1, #16
 8000744:	4311      	orrs	r1, r2
 8000746:	00c2      	lsls	r2, r0, #3
 8000748:	4690      	mov	r8, r2
 800074a:	4ac8      	ldr	r2, [pc, #800]	@ (8000a6c <__aeabi_dmul+0x360>)
 800074c:	468a      	mov	sl, r1
 800074e:	4693      	mov	fp, r2
 8000750:	449b      	add	fp, r3
 8000752:	2300      	movs	r3, #0
 8000754:	2500      	movs	r5, #0
 8000756:	9302      	str	r3, [sp, #8]
 8000758:	033c      	lsls	r4, r7, #12
 800075a:	007b      	lsls	r3, r7, #1
 800075c:	0ffa      	lsrs	r2, r7, #31
 800075e:	9601      	str	r6, [sp, #4]
 8000760:	0b24      	lsrs	r4, r4, #12
 8000762:	0d5b      	lsrs	r3, r3, #21
 8000764:	9200      	str	r2, [sp, #0]
 8000766:	d100      	bne.n	800076a <__aeabi_dmul+0x5e>
 8000768:	e188      	b.n	8000a7c <__aeabi_dmul+0x370>
 800076a:	4abf      	ldr	r2, [pc, #764]	@ (8000a68 <__aeabi_dmul+0x35c>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d100      	bne.n	8000772 <__aeabi_dmul+0x66>
 8000770:	e092      	b.n	8000898 <__aeabi_dmul+0x18c>
 8000772:	4abe      	ldr	r2, [pc, #760]	@ (8000a6c <__aeabi_dmul+0x360>)
 8000774:	4694      	mov	ip, r2
 8000776:	4463      	add	r3, ip
 8000778:	449b      	add	fp, r3
 800077a:	2d0a      	cmp	r5, #10
 800077c:	dc42      	bgt.n	8000804 <__aeabi_dmul+0xf8>
 800077e:	00e4      	lsls	r4, r4, #3
 8000780:	0f73      	lsrs	r3, r6, #29
 8000782:	4323      	orrs	r3, r4
 8000784:	2480      	movs	r4, #128	@ 0x80
 8000786:	4649      	mov	r1, r9
 8000788:	0424      	lsls	r4, r4, #16
 800078a:	431c      	orrs	r4, r3
 800078c:	00f3      	lsls	r3, r6, #3
 800078e:	9301      	str	r3, [sp, #4]
 8000790:	9b00      	ldr	r3, [sp, #0]
 8000792:	2000      	movs	r0, #0
 8000794:	4059      	eors	r1, r3
 8000796:	b2cb      	uxtb	r3, r1
 8000798:	9303      	str	r3, [sp, #12]
 800079a:	2d02      	cmp	r5, #2
 800079c:	dc00      	bgt.n	80007a0 <__aeabi_dmul+0x94>
 800079e:	e094      	b.n	80008ca <__aeabi_dmul+0x1be>
 80007a0:	2301      	movs	r3, #1
 80007a2:	40ab      	lsls	r3, r5
 80007a4:	001d      	movs	r5, r3
 80007a6:	23a6      	movs	r3, #166	@ 0xa6
 80007a8:	002a      	movs	r2, r5
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	401a      	ands	r2, r3
 80007ae:	421d      	tst	r5, r3
 80007b0:	d000      	beq.n	80007b4 <__aeabi_dmul+0xa8>
 80007b2:	e229      	b.n	8000c08 <__aeabi_dmul+0x4fc>
 80007b4:	2390      	movs	r3, #144	@ 0x90
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	421d      	tst	r5, r3
 80007ba:	d100      	bne.n	80007be <__aeabi_dmul+0xb2>
 80007bc:	e24d      	b.n	8000c5a <__aeabi_dmul+0x54e>
 80007be:	2300      	movs	r3, #0
 80007c0:	2480      	movs	r4, #128	@ 0x80
 80007c2:	4699      	mov	r9, r3
 80007c4:	0324      	lsls	r4, r4, #12
 80007c6:	4ba8      	ldr	r3, [pc, #672]	@ (8000a68 <__aeabi_dmul+0x35c>)
 80007c8:	0010      	movs	r0, r2
 80007ca:	464a      	mov	r2, r9
 80007cc:	051b      	lsls	r3, r3, #20
 80007ce:	4323      	orrs	r3, r4
 80007d0:	07d2      	lsls	r2, r2, #31
 80007d2:	4313      	orrs	r3, r2
 80007d4:	0019      	movs	r1, r3
 80007d6:	b005      	add	sp, #20
 80007d8:	bcf0      	pop	{r4, r5, r6, r7}
 80007da:	46bb      	mov	fp, r7
 80007dc:	46b2      	mov	sl, r6
 80007de:	46a9      	mov	r9, r5
 80007e0:	46a0      	mov	r8, r4
 80007e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007e4:	4652      	mov	r2, sl
 80007e6:	4302      	orrs	r2, r0
 80007e8:	4690      	mov	r8, r2
 80007ea:	d000      	beq.n	80007ee <__aeabi_dmul+0xe2>
 80007ec:	e1ac      	b.n	8000b48 <__aeabi_dmul+0x43c>
 80007ee:	469b      	mov	fp, r3
 80007f0:	2302      	movs	r3, #2
 80007f2:	4692      	mov	sl, r2
 80007f4:	2508      	movs	r5, #8
 80007f6:	9302      	str	r3, [sp, #8]
 80007f8:	e7ae      	b.n	8000758 <__aeabi_dmul+0x4c>
 80007fa:	9b00      	ldr	r3, [sp, #0]
 80007fc:	46a2      	mov	sl, r4
 80007fe:	4699      	mov	r9, r3
 8000800:	9b01      	ldr	r3, [sp, #4]
 8000802:	4698      	mov	r8, r3
 8000804:	9b02      	ldr	r3, [sp, #8]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d100      	bne.n	800080c <__aeabi_dmul+0x100>
 800080a:	e1ca      	b.n	8000ba2 <__aeabi_dmul+0x496>
 800080c:	2b03      	cmp	r3, #3
 800080e:	d100      	bne.n	8000812 <__aeabi_dmul+0x106>
 8000810:	e192      	b.n	8000b38 <__aeabi_dmul+0x42c>
 8000812:	2b01      	cmp	r3, #1
 8000814:	d110      	bne.n	8000838 <__aeabi_dmul+0x12c>
 8000816:	2300      	movs	r3, #0
 8000818:	2400      	movs	r4, #0
 800081a:	2200      	movs	r2, #0
 800081c:	e7d4      	b.n	80007c8 <__aeabi_dmul+0xbc>
 800081e:	2201      	movs	r2, #1
 8000820:	087b      	lsrs	r3, r7, #1
 8000822:	403a      	ands	r2, r7
 8000824:	4313      	orrs	r3, r2
 8000826:	4652      	mov	r2, sl
 8000828:	07d2      	lsls	r2, r2, #31
 800082a:	4313      	orrs	r3, r2
 800082c:	4698      	mov	r8, r3
 800082e:	4653      	mov	r3, sl
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	469a      	mov	sl, r3
 8000834:	9b03      	ldr	r3, [sp, #12]
 8000836:	4699      	mov	r9, r3
 8000838:	465b      	mov	r3, fp
 800083a:	1c58      	adds	r0, r3, #1
 800083c:	2380      	movs	r3, #128	@ 0x80
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	445b      	add	r3, fp
 8000842:	2b00      	cmp	r3, #0
 8000844:	dc00      	bgt.n	8000848 <__aeabi_dmul+0x13c>
 8000846:	e1b1      	b.n	8000bac <__aeabi_dmul+0x4a0>
 8000848:	4642      	mov	r2, r8
 800084a:	0752      	lsls	r2, r2, #29
 800084c:	d00b      	beq.n	8000866 <__aeabi_dmul+0x15a>
 800084e:	220f      	movs	r2, #15
 8000850:	4641      	mov	r1, r8
 8000852:	400a      	ands	r2, r1
 8000854:	2a04      	cmp	r2, #4
 8000856:	d006      	beq.n	8000866 <__aeabi_dmul+0x15a>
 8000858:	4642      	mov	r2, r8
 800085a:	1d11      	adds	r1, r2, #4
 800085c:	4541      	cmp	r1, r8
 800085e:	4192      	sbcs	r2, r2
 8000860:	4688      	mov	r8, r1
 8000862:	4252      	negs	r2, r2
 8000864:	4492      	add	sl, r2
 8000866:	4652      	mov	r2, sl
 8000868:	01d2      	lsls	r2, r2, #7
 800086a:	d506      	bpl.n	800087a <__aeabi_dmul+0x16e>
 800086c:	4652      	mov	r2, sl
 800086e:	4b80      	ldr	r3, [pc, #512]	@ (8000a70 <__aeabi_dmul+0x364>)
 8000870:	401a      	ands	r2, r3
 8000872:	2380      	movs	r3, #128	@ 0x80
 8000874:	4692      	mov	sl, r2
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	18c3      	adds	r3, r0, r3
 800087a:	4a7e      	ldr	r2, [pc, #504]	@ (8000a74 <__aeabi_dmul+0x368>)
 800087c:	4293      	cmp	r3, r2
 800087e:	dd00      	ble.n	8000882 <__aeabi_dmul+0x176>
 8000880:	e18f      	b.n	8000ba2 <__aeabi_dmul+0x496>
 8000882:	4642      	mov	r2, r8
 8000884:	08d1      	lsrs	r1, r2, #3
 8000886:	4652      	mov	r2, sl
 8000888:	0752      	lsls	r2, r2, #29
 800088a:	430a      	orrs	r2, r1
 800088c:	4651      	mov	r1, sl
 800088e:	055b      	lsls	r3, r3, #21
 8000890:	024c      	lsls	r4, r1, #9
 8000892:	0b24      	lsrs	r4, r4, #12
 8000894:	0d5b      	lsrs	r3, r3, #21
 8000896:	e797      	b.n	80007c8 <__aeabi_dmul+0xbc>
 8000898:	4b73      	ldr	r3, [pc, #460]	@ (8000a68 <__aeabi_dmul+0x35c>)
 800089a:	4326      	orrs	r6, r4
 800089c:	469c      	mov	ip, r3
 800089e:	44e3      	add	fp, ip
 80008a0:	2e00      	cmp	r6, #0
 80008a2:	d100      	bne.n	80008a6 <__aeabi_dmul+0x19a>
 80008a4:	e16f      	b.n	8000b86 <__aeabi_dmul+0x47a>
 80008a6:	2303      	movs	r3, #3
 80008a8:	4649      	mov	r1, r9
 80008aa:	431d      	orrs	r5, r3
 80008ac:	9b00      	ldr	r3, [sp, #0]
 80008ae:	4059      	eors	r1, r3
 80008b0:	b2cb      	uxtb	r3, r1
 80008b2:	9303      	str	r3, [sp, #12]
 80008b4:	2d0a      	cmp	r5, #10
 80008b6:	dd00      	ble.n	80008ba <__aeabi_dmul+0x1ae>
 80008b8:	e133      	b.n	8000b22 <__aeabi_dmul+0x416>
 80008ba:	2301      	movs	r3, #1
 80008bc:	40ab      	lsls	r3, r5
 80008be:	001d      	movs	r5, r3
 80008c0:	2303      	movs	r3, #3
 80008c2:	9302      	str	r3, [sp, #8]
 80008c4:	2288      	movs	r2, #136	@ 0x88
 80008c6:	422a      	tst	r2, r5
 80008c8:	d197      	bne.n	80007fa <__aeabi_dmul+0xee>
 80008ca:	4642      	mov	r2, r8
 80008cc:	4643      	mov	r3, r8
 80008ce:	0412      	lsls	r2, r2, #16
 80008d0:	0c12      	lsrs	r2, r2, #16
 80008d2:	0016      	movs	r6, r2
 80008d4:	9801      	ldr	r0, [sp, #4]
 80008d6:	0c1d      	lsrs	r5, r3, #16
 80008d8:	0c03      	lsrs	r3, r0, #16
 80008da:	0400      	lsls	r0, r0, #16
 80008dc:	0c00      	lsrs	r0, r0, #16
 80008de:	4346      	muls	r6, r0
 80008e0:	46b4      	mov	ip, r6
 80008e2:	001e      	movs	r6, r3
 80008e4:	436e      	muls	r6, r5
 80008e6:	9600      	str	r6, [sp, #0]
 80008e8:	0016      	movs	r6, r2
 80008ea:	0007      	movs	r7, r0
 80008ec:	435e      	muls	r6, r3
 80008ee:	4661      	mov	r1, ip
 80008f0:	46b0      	mov	r8, r6
 80008f2:	436f      	muls	r7, r5
 80008f4:	0c0e      	lsrs	r6, r1, #16
 80008f6:	44b8      	add	r8, r7
 80008f8:	4446      	add	r6, r8
 80008fa:	42b7      	cmp	r7, r6
 80008fc:	d905      	bls.n	800090a <__aeabi_dmul+0x1fe>
 80008fe:	2180      	movs	r1, #128	@ 0x80
 8000900:	0249      	lsls	r1, r1, #9
 8000902:	4688      	mov	r8, r1
 8000904:	9f00      	ldr	r7, [sp, #0]
 8000906:	4447      	add	r7, r8
 8000908:	9700      	str	r7, [sp, #0]
 800090a:	4661      	mov	r1, ip
 800090c:	0409      	lsls	r1, r1, #16
 800090e:	0c09      	lsrs	r1, r1, #16
 8000910:	0c37      	lsrs	r7, r6, #16
 8000912:	0436      	lsls	r6, r6, #16
 8000914:	468c      	mov	ip, r1
 8000916:	0031      	movs	r1, r6
 8000918:	4461      	add	r1, ip
 800091a:	9101      	str	r1, [sp, #4]
 800091c:	0011      	movs	r1, r2
 800091e:	0c26      	lsrs	r6, r4, #16
 8000920:	0424      	lsls	r4, r4, #16
 8000922:	0c24      	lsrs	r4, r4, #16
 8000924:	4361      	muls	r1, r4
 8000926:	468c      	mov	ip, r1
 8000928:	0021      	movs	r1, r4
 800092a:	4369      	muls	r1, r5
 800092c:	4689      	mov	r9, r1
 800092e:	4661      	mov	r1, ip
 8000930:	0c09      	lsrs	r1, r1, #16
 8000932:	4688      	mov	r8, r1
 8000934:	4372      	muls	r2, r6
 8000936:	444a      	add	r2, r9
 8000938:	4442      	add	r2, r8
 800093a:	4375      	muls	r5, r6
 800093c:	4591      	cmp	r9, r2
 800093e:	d903      	bls.n	8000948 <__aeabi_dmul+0x23c>
 8000940:	2180      	movs	r1, #128	@ 0x80
 8000942:	0249      	lsls	r1, r1, #9
 8000944:	4688      	mov	r8, r1
 8000946:	4445      	add	r5, r8
 8000948:	0c11      	lsrs	r1, r2, #16
 800094a:	4688      	mov	r8, r1
 800094c:	4661      	mov	r1, ip
 800094e:	0409      	lsls	r1, r1, #16
 8000950:	0c09      	lsrs	r1, r1, #16
 8000952:	468c      	mov	ip, r1
 8000954:	0412      	lsls	r2, r2, #16
 8000956:	4462      	add	r2, ip
 8000958:	18b9      	adds	r1, r7, r2
 800095a:	9102      	str	r1, [sp, #8]
 800095c:	4651      	mov	r1, sl
 800095e:	0c09      	lsrs	r1, r1, #16
 8000960:	468c      	mov	ip, r1
 8000962:	4651      	mov	r1, sl
 8000964:	040f      	lsls	r7, r1, #16
 8000966:	0c3f      	lsrs	r7, r7, #16
 8000968:	0039      	movs	r1, r7
 800096a:	4341      	muls	r1, r0
 800096c:	4445      	add	r5, r8
 800096e:	4688      	mov	r8, r1
 8000970:	4661      	mov	r1, ip
 8000972:	4341      	muls	r1, r0
 8000974:	468a      	mov	sl, r1
 8000976:	4641      	mov	r1, r8
 8000978:	4660      	mov	r0, ip
 800097a:	0c09      	lsrs	r1, r1, #16
 800097c:	4689      	mov	r9, r1
 800097e:	4358      	muls	r0, r3
 8000980:	437b      	muls	r3, r7
 8000982:	4453      	add	r3, sl
 8000984:	444b      	add	r3, r9
 8000986:	459a      	cmp	sl, r3
 8000988:	d903      	bls.n	8000992 <__aeabi_dmul+0x286>
 800098a:	2180      	movs	r1, #128	@ 0x80
 800098c:	0249      	lsls	r1, r1, #9
 800098e:	4689      	mov	r9, r1
 8000990:	4448      	add	r0, r9
 8000992:	0c19      	lsrs	r1, r3, #16
 8000994:	4689      	mov	r9, r1
 8000996:	4641      	mov	r1, r8
 8000998:	0409      	lsls	r1, r1, #16
 800099a:	0c09      	lsrs	r1, r1, #16
 800099c:	4688      	mov	r8, r1
 800099e:	0039      	movs	r1, r7
 80009a0:	4361      	muls	r1, r4
 80009a2:	041b      	lsls	r3, r3, #16
 80009a4:	4443      	add	r3, r8
 80009a6:	4688      	mov	r8, r1
 80009a8:	4661      	mov	r1, ip
 80009aa:	434c      	muls	r4, r1
 80009ac:	4371      	muls	r1, r6
 80009ae:	468c      	mov	ip, r1
 80009b0:	4641      	mov	r1, r8
 80009b2:	4377      	muls	r7, r6
 80009b4:	0c0e      	lsrs	r6, r1, #16
 80009b6:	193f      	adds	r7, r7, r4
 80009b8:	19f6      	adds	r6, r6, r7
 80009ba:	4448      	add	r0, r9
 80009bc:	42b4      	cmp	r4, r6
 80009be:	d903      	bls.n	80009c8 <__aeabi_dmul+0x2bc>
 80009c0:	2180      	movs	r1, #128	@ 0x80
 80009c2:	0249      	lsls	r1, r1, #9
 80009c4:	4689      	mov	r9, r1
 80009c6:	44cc      	add	ip, r9
 80009c8:	9902      	ldr	r1, [sp, #8]
 80009ca:	9f00      	ldr	r7, [sp, #0]
 80009cc:	4689      	mov	r9, r1
 80009ce:	0431      	lsls	r1, r6, #16
 80009d0:	444f      	add	r7, r9
 80009d2:	4689      	mov	r9, r1
 80009d4:	4641      	mov	r1, r8
 80009d6:	4297      	cmp	r7, r2
 80009d8:	4192      	sbcs	r2, r2
 80009da:	040c      	lsls	r4, r1, #16
 80009dc:	0c24      	lsrs	r4, r4, #16
 80009de:	444c      	add	r4, r9
 80009e0:	18ff      	adds	r7, r7, r3
 80009e2:	4252      	negs	r2, r2
 80009e4:	1964      	adds	r4, r4, r5
 80009e6:	18a1      	adds	r1, r4, r2
 80009e8:	429f      	cmp	r7, r3
 80009ea:	419b      	sbcs	r3, r3
 80009ec:	4688      	mov	r8, r1
 80009ee:	4682      	mov	sl, r0
 80009f0:	425b      	negs	r3, r3
 80009f2:	4699      	mov	r9, r3
 80009f4:	4590      	cmp	r8, r2
 80009f6:	4192      	sbcs	r2, r2
 80009f8:	42ac      	cmp	r4, r5
 80009fa:	41a4      	sbcs	r4, r4
 80009fc:	44c2      	add	sl, r8
 80009fe:	44d1      	add	r9, sl
 8000a00:	4252      	negs	r2, r2
 8000a02:	4264      	negs	r4, r4
 8000a04:	4314      	orrs	r4, r2
 8000a06:	4599      	cmp	r9, r3
 8000a08:	419b      	sbcs	r3, r3
 8000a0a:	4582      	cmp	sl, r0
 8000a0c:	4192      	sbcs	r2, r2
 8000a0e:	425b      	negs	r3, r3
 8000a10:	4252      	negs	r2, r2
 8000a12:	4313      	orrs	r3, r2
 8000a14:	464a      	mov	r2, r9
 8000a16:	0c36      	lsrs	r6, r6, #16
 8000a18:	19a4      	adds	r4, r4, r6
 8000a1a:	18e3      	adds	r3, r4, r3
 8000a1c:	4463      	add	r3, ip
 8000a1e:	025b      	lsls	r3, r3, #9
 8000a20:	0dd2      	lsrs	r2, r2, #23
 8000a22:	431a      	orrs	r2, r3
 8000a24:	9901      	ldr	r1, [sp, #4]
 8000a26:	4692      	mov	sl, r2
 8000a28:	027a      	lsls	r2, r7, #9
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	1e50      	subs	r0, r2, #1
 8000a2e:	4182      	sbcs	r2, r0
 8000a30:	0dff      	lsrs	r7, r7, #23
 8000a32:	4317      	orrs	r7, r2
 8000a34:	464a      	mov	r2, r9
 8000a36:	0252      	lsls	r2, r2, #9
 8000a38:	4317      	orrs	r7, r2
 8000a3a:	46b8      	mov	r8, r7
 8000a3c:	01db      	lsls	r3, r3, #7
 8000a3e:	d500      	bpl.n	8000a42 <__aeabi_dmul+0x336>
 8000a40:	e6ed      	b.n	800081e <__aeabi_dmul+0x112>
 8000a42:	4b0d      	ldr	r3, [pc, #52]	@ (8000a78 <__aeabi_dmul+0x36c>)
 8000a44:	9a03      	ldr	r2, [sp, #12]
 8000a46:	445b      	add	r3, fp
 8000a48:	4691      	mov	r9, r2
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	dc00      	bgt.n	8000a50 <__aeabi_dmul+0x344>
 8000a4e:	e0ac      	b.n	8000baa <__aeabi_dmul+0x49e>
 8000a50:	003a      	movs	r2, r7
 8000a52:	0752      	lsls	r2, r2, #29
 8000a54:	d100      	bne.n	8000a58 <__aeabi_dmul+0x34c>
 8000a56:	e710      	b.n	800087a <__aeabi_dmul+0x16e>
 8000a58:	220f      	movs	r2, #15
 8000a5a:	4658      	mov	r0, fp
 8000a5c:	403a      	ands	r2, r7
 8000a5e:	2a04      	cmp	r2, #4
 8000a60:	d000      	beq.n	8000a64 <__aeabi_dmul+0x358>
 8000a62:	e6f9      	b.n	8000858 <__aeabi_dmul+0x14c>
 8000a64:	e709      	b.n	800087a <__aeabi_dmul+0x16e>
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	000007ff 	.word	0x000007ff
 8000a6c:	fffffc01 	.word	0xfffffc01
 8000a70:	feffffff 	.word	0xfeffffff
 8000a74:	000007fe 	.word	0x000007fe
 8000a78:	000003ff 	.word	0x000003ff
 8000a7c:	0022      	movs	r2, r4
 8000a7e:	4332      	orrs	r2, r6
 8000a80:	d06f      	beq.n	8000b62 <__aeabi_dmul+0x456>
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dmul+0x37c>
 8000a86:	e0c2      	b.n	8000c0e <__aeabi_dmul+0x502>
 8000a88:	0020      	movs	r0, r4
 8000a8a:	f000 fdbd 	bl	8001608 <__clzsi2>
 8000a8e:	0002      	movs	r2, r0
 8000a90:	0003      	movs	r3, r0
 8000a92:	3a0b      	subs	r2, #11
 8000a94:	201d      	movs	r0, #29
 8000a96:	1a82      	subs	r2, r0, r2
 8000a98:	0030      	movs	r0, r6
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	40d0      	lsrs	r0, r2
 8000a9e:	3908      	subs	r1, #8
 8000aa0:	408c      	lsls	r4, r1
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	4322      	orrs	r2, r4
 8000aa6:	0034      	movs	r4, r6
 8000aa8:	408c      	lsls	r4, r1
 8000aaa:	4659      	mov	r1, fp
 8000aac:	1acb      	subs	r3, r1, r3
 8000aae:	4986      	ldr	r1, [pc, #536]	@ (8000cc8 <__aeabi_dmul+0x5bc>)
 8000ab0:	468b      	mov	fp, r1
 8000ab2:	449b      	add	fp, r3
 8000ab4:	2d0a      	cmp	r5, #10
 8000ab6:	dd00      	ble.n	8000aba <__aeabi_dmul+0x3ae>
 8000ab8:	e6a4      	b.n	8000804 <__aeabi_dmul+0xf8>
 8000aba:	4649      	mov	r1, r9
 8000abc:	9b00      	ldr	r3, [sp, #0]
 8000abe:	9401      	str	r4, [sp, #4]
 8000ac0:	4059      	eors	r1, r3
 8000ac2:	b2cb      	uxtb	r3, r1
 8000ac4:	0014      	movs	r4, r2
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	9303      	str	r3, [sp, #12]
 8000aca:	2d02      	cmp	r5, #2
 8000acc:	dd00      	ble.n	8000ad0 <__aeabi_dmul+0x3c4>
 8000ace:	e667      	b.n	80007a0 <__aeabi_dmul+0x94>
 8000ad0:	e6fb      	b.n	80008ca <__aeabi_dmul+0x1be>
 8000ad2:	4653      	mov	r3, sl
 8000ad4:	4303      	orrs	r3, r0
 8000ad6:	4698      	mov	r8, r3
 8000ad8:	d03c      	beq.n	8000b54 <__aeabi_dmul+0x448>
 8000ada:	4653      	mov	r3, sl
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d100      	bne.n	8000ae2 <__aeabi_dmul+0x3d6>
 8000ae0:	e0a3      	b.n	8000c2a <__aeabi_dmul+0x51e>
 8000ae2:	4650      	mov	r0, sl
 8000ae4:	f000 fd90 	bl	8001608 <__clzsi2>
 8000ae8:	230b      	movs	r3, #11
 8000aea:	425b      	negs	r3, r3
 8000aec:	469c      	mov	ip, r3
 8000aee:	0002      	movs	r2, r0
 8000af0:	4484      	add	ip, r0
 8000af2:	0011      	movs	r1, r2
 8000af4:	4650      	mov	r0, sl
 8000af6:	3908      	subs	r1, #8
 8000af8:	4088      	lsls	r0, r1
 8000afa:	231d      	movs	r3, #29
 8000afc:	4680      	mov	r8, r0
 8000afe:	4660      	mov	r0, ip
 8000b00:	1a1b      	subs	r3, r3, r0
 8000b02:	0020      	movs	r0, r4
 8000b04:	40d8      	lsrs	r0, r3
 8000b06:	0003      	movs	r3, r0
 8000b08:	4640      	mov	r0, r8
 8000b0a:	4303      	orrs	r3, r0
 8000b0c:	469a      	mov	sl, r3
 8000b0e:	0023      	movs	r3, r4
 8000b10:	408b      	lsls	r3, r1
 8000b12:	4698      	mov	r8, r3
 8000b14:	4b6c      	ldr	r3, [pc, #432]	@ (8000cc8 <__aeabi_dmul+0x5bc>)
 8000b16:	2500      	movs	r5, #0
 8000b18:	1a9b      	subs	r3, r3, r2
 8000b1a:	469b      	mov	fp, r3
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9302      	str	r3, [sp, #8]
 8000b20:	e61a      	b.n	8000758 <__aeabi_dmul+0x4c>
 8000b22:	2d0f      	cmp	r5, #15
 8000b24:	d000      	beq.n	8000b28 <__aeabi_dmul+0x41c>
 8000b26:	e0c9      	b.n	8000cbc <__aeabi_dmul+0x5b0>
 8000b28:	2380      	movs	r3, #128	@ 0x80
 8000b2a:	4652      	mov	r2, sl
 8000b2c:	031b      	lsls	r3, r3, #12
 8000b2e:	421a      	tst	r2, r3
 8000b30:	d002      	beq.n	8000b38 <__aeabi_dmul+0x42c>
 8000b32:	421c      	tst	r4, r3
 8000b34:	d100      	bne.n	8000b38 <__aeabi_dmul+0x42c>
 8000b36:	e092      	b.n	8000c5e <__aeabi_dmul+0x552>
 8000b38:	2480      	movs	r4, #128	@ 0x80
 8000b3a:	4653      	mov	r3, sl
 8000b3c:	0324      	lsls	r4, r4, #12
 8000b3e:	431c      	orrs	r4, r3
 8000b40:	0324      	lsls	r4, r4, #12
 8000b42:	4642      	mov	r2, r8
 8000b44:	0b24      	lsrs	r4, r4, #12
 8000b46:	e63e      	b.n	80007c6 <__aeabi_dmul+0xba>
 8000b48:	469b      	mov	fp, r3
 8000b4a:	2303      	movs	r3, #3
 8000b4c:	4680      	mov	r8, r0
 8000b4e:	250c      	movs	r5, #12
 8000b50:	9302      	str	r3, [sp, #8]
 8000b52:	e601      	b.n	8000758 <__aeabi_dmul+0x4c>
 8000b54:	2300      	movs	r3, #0
 8000b56:	469a      	mov	sl, r3
 8000b58:	469b      	mov	fp, r3
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	2504      	movs	r5, #4
 8000b5e:	9302      	str	r3, [sp, #8]
 8000b60:	e5fa      	b.n	8000758 <__aeabi_dmul+0x4c>
 8000b62:	2101      	movs	r1, #1
 8000b64:	430d      	orrs	r5, r1
 8000b66:	2d0a      	cmp	r5, #10
 8000b68:	dd00      	ble.n	8000b6c <__aeabi_dmul+0x460>
 8000b6a:	e64b      	b.n	8000804 <__aeabi_dmul+0xf8>
 8000b6c:	4649      	mov	r1, r9
 8000b6e:	9800      	ldr	r0, [sp, #0]
 8000b70:	4041      	eors	r1, r0
 8000b72:	b2c9      	uxtb	r1, r1
 8000b74:	9103      	str	r1, [sp, #12]
 8000b76:	2d02      	cmp	r5, #2
 8000b78:	dc00      	bgt.n	8000b7c <__aeabi_dmul+0x470>
 8000b7a:	e096      	b.n	8000caa <__aeabi_dmul+0x59e>
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	2400      	movs	r4, #0
 8000b80:	2001      	movs	r0, #1
 8000b82:	9301      	str	r3, [sp, #4]
 8000b84:	e60c      	b.n	80007a0 <__aeabi_dmul+0x94>
 8000b86:	4649      	mov	r1, r9
 8000b88:	2302      	movs	r3, #2
 8000b8a:	9a00      	ldr	r2, [sp, #0]
 8000b8c:	432b      	orrs	r3, r5
 8000b8e:	4051      	eors	r1, r2
 8000b90:	b2ca      	uxtb	r2, r1
 8000b92:	9203      	str	r2, [sp, #12]
 8000b94:	2b0a      	cmp	r3, #10
 8000b96:	dd00      	ble.n	8000b9a <__aeabi_dmul+0x48e>
 8000b98:	e634      	b.n	8000804 <__aeabi_dmul+0xf8>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d157      	bne.n	8000c4e <__aeabi_dmul+0x542>
 8000b9e:	9b03      	ldr	r3, [sp, #12]
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	2400      	movs	r4, #0
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	4b49      	ldr	r3, [pc, #292]	@ (8000ccc <__aeabi_dmul+0x5c0>)
 8000ba8:	e60e      	b.n	80007c8 <__aeabi_dmul+0xbc>
 8000baa:	4658      	mov	r0, fp
 8000bac:	2101      	movs	r1, #1
 8000bae:	1ac9      	subs	r1, r1, r3
 8000bb0:	2938      	cmp	r1, #56	@ 0x38
 8000bb2:	dd00      	ble.n	8000bb6 <__aeabi_dmul+0x4aa>
 8000bb4:	e62f      	b.n	8000816 <__aeabi_dmul+0x10a>
 8000bb6:	291f      	cmp	r1, #31
 8000bb8:	dd56      	ble.n	8000c68 <__aeabi_dmul+0x55c>
 8000bba:	221f      	movs	r2, #31
 8000bbc:	4654      	mov	r4, sl
 8000bbe:	4252      	negs	r2, r2
 8000bc0:	1ad3      	subs	r3, r2, r3
 8000bc2:	40dc      	lsrs	r4, r3
 8000bc4:	2920      	cmp	r1, #32
 8000bc6:	d007      	beq.n	8000bd8 <__aeabi_dmul+0x4cc>
 8000bc8:	4b41      	ldr	r3, [pc, #260]	@ (8000cd0 <__aeabi_dmul+0x5c4>)
 8000bca:	4642      	mov	r2, r8
 8000bcc:	469c      	mov	ip, r3
 8000bce:	4653      	mov	r3, sl
 8000bd0:	4460      	add	r0, ip
 8000bd2:	4083      	lsls	r3, r0
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	4690      	mov	r8, r2
 8000bd8:	4642      	mov	r2, r8
 8000bda:	2107      	movs	r1, #7
 8000bdc:	1e53      	subs	r3, r2, #1
 8000bde:	419a      	sbcs	r2, r3
 8000be0:	000b      	movs	r3, r1
 8000be2:	4322      	orrs	r2, r4
 8000be4:	4013      	ands	r3, r2
 8000be6:	2400      	movs	r4, #0
 8000be8:	4211      	tst	r1, r2
 8000bea:	d009      	beq.n	8000c00 <__aeabi_dmul+0x4f4>
 8000bec:	230f      	movs	r3, #15
 8000bee:	4013      	ands	r3, r2
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	d05d      	beq.n	8000cb0 <__aeabi_dmul+0x5a4>
 8000bf4:	1d11      	adds	r1, r2, #4
 8000bf6:	4291      	cmp	r1, r2
 8000bf8:	419b      	sbcs	r3, r3
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	425b      	negs	r3, r3
 8000bfe:	075b      	lsls	r3, r3, #29
 8000c00:	08d2      	lsrs	r2, r2, #3
 8000c02:	431a      	orrs	r2, r3
 8000c04:	2300      	movs	r3, #0
 8000c06:	e5df      	b.n	80007c8 <__aeabi_dmul+0xbc>
 8000c08:	9b03      	ldr	r3, [sp, #12]
 8000c0a:	4699      	mov	r9, r3
 8000c0c:	e5fa      	b.n	8000804 <__aeabi_dmul+0xf8>
 8000c0e:	9801      	ldr	r0, [sp, #4]
 8000c10:	f000 fcfa 	bl	8001608 <__clzsi2>
 8000c14:	0002      	movs	r2, r0
 8000c16:	0003      	movs	r3, r0
 8000c18:	3215      	adds	r2, #21
 8000c1a:	3320      	adds	r3, #32
 8000c1c:	2a1c      	cmp	r2, #28
 8000c1e:	dc00      	bgt.n	8000c22 <__aeabi_dmul+0x516>
 8000c20:	e738      	b.n	8000a94 <__aeabi_dmul+0x388>
 8000c22:	9a01      	ldr	r2, [sp, #4]
 8000c24:	3808      	subs	r0, #8
 8000c26:	4082      	lsls	r2, r0
 8000c28:	e73f      	b.n	8000aaa <__aeabi_dmul+0x39e>
 8000c2a:	f000 fced 	bl	8001608 <__clzsi2>
 8000c2e:	2315      	movs	r3, #21
 8000c30:	469c      	mov	ip, r3
 8000c32:	4484      	add	ip, r0
 8000c34:	0002      	movs	r2, r0
 8000c36:	4663      	mov	r3, ip
 8000c38:	3220      	adds	r2, #32
 8000c3a:	2b1c      	cmp	r3, #28
 8000c3c:	dc00      	bgt.n	8000c40 <__aeabi_dmul+0x534>
 8000c3e:	e758      	b.n	8000af2 <__aeabi_dmul+0x3e6>
 8000c40:	2300      	movs	r3, #0
 8000c42:	4698      	mov	r8, r3
 8000c44:	0023      	movs	r3, r4
 8000c46:	3808      	subs	r0, #8
 8000c48:	4083      	lsls	r3, r0
 8000c4a:	469a      	mov	sl, r3
 8000c4c:	e762      	b.n	8000b14 <__aeabi_dmul+0x408>
 8000c4e:	001d      	movs	r5, r3
 8000c50:	2300      	movs	r3, #0
 8000c52:	2400      	movs	r4, #0
 8000c54:	2002      	movs	r0, #2
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	e5a2      	b.n	80007a0 <__aeabi_dmul+0x94>
 8000c5a:	9002      	str	r0, [sp, #8]
 8000c5c:	e632      	b.n	80008c4 <__aeabi_dmul+0x1b8>
 8000c5e:	431c      	orrs	r4, r3
 8000c60:	9b00      	ldr	r3, [sp, #0]
 8000c62:	9a01      	ldr	r2, [sp, #4]
 8000c64:	4699      	mov	r9, r3
 8000c66:	e5ae      	b.n	80007c6 <__aeabi_dmul+0xba>
 8000c68:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <__aeabi_dmul+0x5c8>)
 8000c6a:	4652      	mov	r2, sl
 8000c6c:	18c3      	adds	r3, r0, r3
 8000c6e:	4640      	mov	r0, r8
 8000c70:	409a      	lsls	r2, r3
 8000c72:	40c8      	lsrs	r0, r1
 8000c74:	4302      	orrs	r2, r0
 8000c76:	4640      	mov	r0, r8
 8000c78:	4098      	lsls	r0, r3
 8000c7a:	0003      	movs	r3, r0
 8000c7c:	1e58      	subs	r0, r3, #1
 8000c7e:	4183      	sbcs	r3, r0
 8000c80:	4654      	mov	r4, sl
 8000c82:	431a      	orrs	r2, r3
 8000c84:	40cc      	lsrs	r4, r1
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d009      	beq.n	8000c9e <__aeabi_dmul+0x592>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d005      	beq.n	8000c9e <__aeabi_dmul+0x592>
 8000c92:	1d13      	adds	r3, r2, #4
 8000c94:	4293      	cmp	r3, r2
 8000c96:	4192      	sbcs	r2, r2
 8000c98:	4252      	negs	r2, r2
 8000c9a:	18a4      	adds	r4, r4, r2
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	0223      	lsls	r3, r4, #8
 8000ca0:	d508      	bpl.n	8000cb4 <__aeabi_dmul+0x5a8>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	2400      	movs	r4, #0
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	e58e      	b.n	80007c8 <__aeabi_dmul+0xbc>
 8000caa:	4689      	mov	r9, r1
 8000cac:	2400      	movs	r4, #0
 8000cae:	e58b      	b.n	80007c8 <__aeabi_dmul+0xbc>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e7a5      	b.n	8000c00 <__aeabi_dmul+0x4f4>
 8000cb4:	0763      	lsls	r3, r4, #29
 8000cb6:	0264      	lsls	r4, r4, #9
 8000cb8:	0b24      	lsrs	r4, r4, #12
 8000cba:	e7a1      	b.n	8000c00 <__aeabi_dmul+0x4f4>
 8000cbc:	9b00      	ldr	r3, [sp, #0]
 8000cbe:	46a2      	mov	sl, r4
 8000cc0:	4699      	mov	r9, r3
 8000cc2:	9b01      	ldr	r3, [sp, #4]
 8000cc4:	4698      	mov	r8, r3
 8000cc6:	e737      	b.n	8000b38 <__aeabi_dmul+0x42c>
 8000cc8:	fffffc0d 	.word	0xfffffc0d
 8000ccc:	000007ff 	.word	0x000007ff
 8000cd0:	0000043e 	.word	0x0000043e
 8000cd4:	0000041e 	.word	0x0000041e

08000cd8 <__aeabi_dsub>:
 8000cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cda:	4657      	mov	r7, sl
 8000cdc:	464e      	mov	r6, r9
 8000cde:	4645      	mov	r5, r8
 8000ce0:	46de      	mov	lr, fp
 8000ce2:	b5e0      	push	{r5, r6, r7, lr}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	9000      	str	r0, [sp, #0]
 8000ce8:	9101      	str	r1, [sp, #4]
 8000cea:	030c      	lsls	r4, r1, #12
 8000cec:	004d      	lsls	r5, r1, #1
 8000cee:	0fce      	lsrs	r6, r1, #31
 8000cf0:	0a61      	lsrs	r1, r4, #9
 8000cf2:	9c00      	ldr	r4, [sp, #0]
 8000cf4:	005f      	lsls	r7, r3, #1
 8000cf6:	0f64      	lsrs	r4, r4, #29
 8000cf8:	430c      	orrs	r4, r1
 8000cfa:	9900      	ldr	r1, [sp, #0]
 8000cfc:	9200      	str	r2, [sp, #0]
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	00c8      	lsls	r0, r1, #3
 8000d02:	0319      	lsls	r1, r3, #12
 8000d04:	0d7b      	lsrs	r3, r7, #21
 8000d06:	4699      	mov	r9, r3
 8000d08:	9b01      	ldr	r3, [sp, #4]
 8000d0a:	4fcc      	ldr	r7, [pc, #816]	@ (800103c <__aeabi_dsub+0x364>)
 8000d0c:	0fdb      	lsrs	r3, r3, #31
 8000d0e:	469c      	mov	ip, r3
 8000d10:	0a4b      	lsrs	r3, r1, #9
 8000d12:	9900      	ldr	r1, [sp, #0]
 8000d14:	4680      	mov	r8, r0
 8000d16:	0f49      	lsrs	r1, r1, #29
 8000d18:	4319      	orrs	r1, r3
 8000d1a:	9b00      	ldr	r3, [sp, #0]
 8000d1c:	468b      	mov	fp, r1
 8000d1e:	00da      	lsls	r2, r3, #3
 8000d20:	4692      	mov	sl, r2
 8000d22:	0d6d      	lsrs	r5, r5, #21
 8000d24:	45b9      	cmp	r9, r7
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dsub+0x52>
 8000d28:	e0bf      	b.n	8000eaa <__aeabi_dsub+0x1d2>
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	4661      	mov	r1, ip
 8000d2e:	4059      	eors	r1, r3
 8000d30:	464b      	mov	r3, r9
 8000d32:	468c      	mov	ip, r1
 8000d34:	1aeb      	subs	r3, r5, r3
 8000d36:	428e      	cmp	r6, r1
 8000d38:	d075      	beq.n	8000e26 <__aeabi_dsub+0x14e>
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	dc00      	bgt.n	8000d40 <__aeabi_dsub+0x68>
 8000d3e:	e2a3      	b.n	8001288 <__aeabi_dsub+0x5b0>
 8000d40:	4649      	mov	r1, r9
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d100      	bne.n	8000d48 <__aeabi_dsub+0x70>
 8000d46:	e0ce      	b.n	8000ee6 <__aeabi_dsub+0x20e>
 8000d48:	42bd      	cmp	r5, r7
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_dsub+0x76>
 8000d4c:	e200      	b.n	8001150 <__aeabi_dsub+0x478>
 8000d4e:	2701      	movs	r7, #1
 8000d50:	2b38      	cmp	r3, #56	@ 0x38
 8000d52:	dc19      	bgt.n	8000d88 <__aeabi_dsub+0xb0>
 8000d54:	2780      	movs	r7, #128	@ 0x80
 8000d56:	4659      	mov	r1, fp
 8000d58:	043f      	lsls	r7, r7, #16
 8000d5a:	4339      	orrs	r1, r7
 8000d5c:	468b      	mov	fp, r1
 8000d5e:	2b1f      	cmp	r3, #31
 8000d60:	dd00      	ble.n	8000d64 <__aeabi_dsub+0x8c>
 8000d62:	e1fa      	b.n	800115a <__aeabi_dsub+0x482>
 8000d64:	2720      	movs	r7, #32
 8000d66:	1af9      	subs	r1, r7, r3
 8000d68:	468c      	mov	ip, r1
 8000d6a:	4659      	mov	r1, fp
 8000d6c:	4667      	mov	r7, ip
 8000d6e:	40b9      	lsls	r1, r7
 8000d70:	000f      	movs	r7, r1
 8000d72:	0011      	movs	r1, r2
 8000d74:	40d9      	lsrs	r1, r3
 8000d76:	430f      	orrs	r7, r1
 8000d78:	4661      	mov	r1, ip
 8000d7a:	408a      	lsls	r2, r1
 8000d7c:	1e51      	subs	r1, r2, #1
 8000d7e:	418a      	sbcs	r2, r1
 8000d80:	4659      	mov	r1, fp
 8000d82:	40d9      	lsrs	r1, r3
 8000d84:	4317      	orrs	r7, r2
 8000d86:	1a64      	subs	r4, r4, r1
 8000d88:	1bc7      	subs	r7, r0, r7
 8000d8a:	42b8      	cmp	r0, r7
 8000d8c:	4180      	sbcs	r0, r0
 8000d8e:	4240      	negs	r0, r0
 8000d90:	1a24      	subs	r4, r4, r0
 8000d92:	0223      	lsls	r3, r4, #8
 8000d94:	d400      	bmi.n	8000d98 <__aeabi_dsub+0xc0>
 8000d96:	e140      	b.n	800101a <__aeabi_dsub+0x342>
 8000d98:	0264      	lsls	r4, r4, #9
 8000d9a:	0a64      	lsrs	r4, r4, #9
 8000d9c:	2c00      	cmp	r4, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_dsub+0xca>
 8000da0:	e154      	b.n	800104c <__aeabi_dsub+0x374>
 8000da2:	0020      	movs	r0, r4
 8000da4:	f000 fc30 	bl	8001608 <__clzsi2>
 8000da8:	0003      	movs	r3, r0
 8000daa:	3b08      	subs	r3, #8
 8000dac:	2120      	movs	r1, #32
 8000dae:	0038      	movs	r0, r7
 8000db0:	1aca      	subs	r2, r1, r3
 8000db2:	40d0      	lsrs	r0, r2
 8000db4:	409c      	lsls	r4, r3
 8000db6:	0002      	movs	r2, r0
 8000db8:	409f      	lsls	r7, r3
 8000dba:	4322      	orrs	r2, r4
 8000dbc:	429d      	cmp	r5, r3
 8000dbe:	dd00      	ble.n	8000dc2 <__aeabi_dsub+0xea>
 8000dc0:	e1a6      	b.n	8001110 <__aeabi_dsub+0x438>
 8000dc2:	1b58      	subs	r0, r3, r5
 8000dc4:	3001      	adds	r0, #1
 8000dc6:	1a09      	subs	r1, r1, r0
 8000dc8:	003c      	movs	r4, r7
 8000dca:	408f      	lsls	r7, r1
 8000dcc:	40c4      	lsrs	r4, r0
 8000dce:	1e7b      	subs	r3, r7, #1
 8000dd0:	419f      	sbcs	r7, r3
 8000dd2:	0013      	movs	r3, r2
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	4327      	orrs	r7, r4
 8000dd8:	431f      	orrs	r7, r3
 8000dda:	40c2      	lsrs	r2, r0
 8000ddc:	003b      	movs	r3, r7
 8000dde:	0014      	movs	r4, r2
 8000de0:	2500      	movs	r5, #0
 8000de2:	4313      	orrs	r3, r2
 8000de4:	d100      	bne.n	8000de8 <__aeabi_dsub+0x110>
 8000de6:	e1f7      	b.n	80011d8 <__aeabi_dsub+0x500>
 8000de8:	077b      	lsls	r3, r7, #29
 8000dea:	d100      	bne.n	8000dee <__aeabi_dsub+0x116>
 8000dec:	e377      	b.n	80014de <__aeabi_dsub+0x806>
 8000dee:	230f      	movs	r3, #15
 8000df0:	0038      	movs	r0, r7
 8000df2:	403b      	ands	r3, r7
 8000df4:	2b04      	cmp	r3, #4
 8000df6:	d004      	beq.n	8000e02 <__aeabi_dsub+0x12a>
 8000df8:	1d38      	adds	r0, r7, #4
 8000dfa:	42b8      	cmp	r0, r7
 8000dfc:	41bf      	sbcs	r7, r7
 8000dfe:	427f      	negs	r7, r7
 8000e00:	19e4      	adds	r4, r4, r7
 8000e02:	0223      	lsls	r3, r4, #8
 8000e04:	d400      	bmi.n	8000e08 <__aeabi_dsub+0x130>
 8000e06:	e368      	b.n	80014da <__aeabi_dsub+0x802>
 8000e08:	4b8c      	ldr	r3, [pc, #560]	@ (800103c <__aeabi_dsub+0x364>)
 8000e0a:	3501      	adds	r5, #1
 8000e0c:	429d      	cmp	r5, r3
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_dsub+0x13a>
 8000e10:	e0f4      	b.n	8000ffc <__aeabi_dsub+0x324>
 8000e12:	4b8b      	ldr	r3, [pc, #556]	@ (8001040 <__aeabi_dsub+0x368>)
 8000e14:	056d      	lsls	r5, r5, #21
 8000e16:	401c      	ands	r4, r3
 8000e18:	0d6d      	lsrs	r5, r5, #21
 8000e1a:	0767      	lsls	r7, r4, #29
 8000e1c:	08c0      	lsrs	r0, r0, #3
 8000e1e:	0264      	lsls	r4, r4, #9
 8000e20:	4307      	orrs	r7, r0
 8000e22:	0b24      	lsrs	r4, r4, #12
 8000e24:	e0ec      	b.n	8001000 <__aeabi_dsub+0x328>
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	dc00      	bgt.n	8000e2c <__aeabi_dsub+0x154>
 8000e2a:	e329      	b.n	8001480 <__aeabi_dsub+0x7a8>
 8000e2c:	4649      	mov	r1, r9
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d000      	beq.n	8000e34 <__aeabi_dsub+0x15c>
 8000e32:	e0d6      	b.n	8000fe2 <__aeabi_dsub+0x30a>
 8000e34:	4659      	mov	r1, fp
 8000e36:	4311      	orrs	r1, r2
 8000e38:	d100      	bne.n	8000e3c <__aeabi_dsub+0x164>
 8000e3a:	e12e      	b.n	800109a <__aeabi_dsub+0x3c2>
 8000e3c:	1e59      	subs	r1, r3, #1
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dsub+0x16c>
 8000e42:	e1e6      	b.n	8001212 <__aeabi_dsub+0x53a>
 8000e44:	42bb      	cmp	r3, r7
 8000e46:	d100      	bne.n	8000e4a <__aeabi_dsub+0x172>
 8000e48:	e182      	b.n	8001150 <__aeabi_dsub+0x478>
 8000e4a:	2701      	movs	r7, #1
 8000e4c:	000b      	movs	r3, r1
 8000e4e:	2938      	cmp	r1, #56	@ 0x38
 8000e50:	dc14      	bgt.n	8000e7c <__aeabi_dsub+0x1a4>
 8000e52:	2b1f      	cmp	r3, #31
 8000e54:	dd00      	ble.n	8000e58 <__aeabi_dsub+0x180>
 8000e56:	e23c      	b.n	80012d2 <__aeabi_dsub+0x5fa>
 8000e58:	2720      	movs	r7, #32
 8000e5a:	1af9      	subs	r1, r7, r3
 8000e5c:	468c      	mov	ip, r1
 8000e5e:	4659      	mov	r1, fp
 8000e60:	4667      	mov	r7, ip
 8000e62:	40b9      	lsls	r1, r7
 8000e64:	000f      	movs	r7, r1
 8000e66:	0011      	movs	r1, r2
 8000e68:	40d9      	lsrs	r1, r3
 8000e6a:	430f      	orrs	r7, r1
 8000e6c:	4661      	mov	r1, ip
 8000e6e:	408a      	lsls	r2, r1
 8000e70:	1e51      	subs	r1, r2, #1
 8000e72:	418a      	sbcs	r2, r1
 8000e74:	4659      	mov	r1, fp
 8000e76:	40d9      	lsrs	r1, r3
 8000e78:	4317      	orrs	r7, r2
 8000e7a:	1864      	adds	r4, r4, r1
 8000e7c:	183f      	adds	r7, r7, r0
 8000e7e:	4287      	cmp	r7, r0
 8000e80:	4180      	sbcs	r0, r0
 8000e82:	4240      	negs	r0, r0
 8000e84:	1824      	adds	r4, r4, r0
 8000e86:	0223      	lsls	r3, r4, #8
 8000e88:	d400      	bmi.n	8000e8c <__aeabi_dsub+0x1b4>
 8000e8a:	e0c6      	b.n	800101a <__aeabi_dsub+0x342>
 8000e8c:	4b6b      	ldr	r3, [pc, #428]	@ (800103c <__aeabi_dsub+0x364>)
 8000e8e:	3501      	adds	r5, #1
 8000e90:	429d      	cmp	r5, r3
 8000e92:	d100      	bne.n	8000e96 <__aeabi_dsub+0x1be>
 8000e94:	e0b2      	b.n	8000ffc <__aeabi_dsub+0x324>
 8000e96:	2101      	movs	r1, #1
 8000e98:	4b69      	ldr	r3, [pc, #420]	@ (8001040 <__aeabi_dsub+0x368>)
 8000e9a:	087a      	lsrs	r2, r7, #1
 8000e9c:	401c      	ands	r4, r3
 8000e9e:	4039      	ands	r1, r7
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	07e7      	lsls	r7, r4, #31
 8000ea4:	4317      	orrs	r7, r2
 8000ea6:	0864      	lsrs	r4, r4, #1
 8000ea8:	e79e      	b.n	8000de8 <__aeabi_dsub+0x110>
 8000eaa:	4b66      	ldr	r3, [pc, #408]	@ (8001044 <__aeabi_dsub+0x36c>)
 8000eac:	4311      	orrs	r1, r2
 8000eae:	468a      	mov	sl, r1
 8000eb0:	18eb      	adds	r3, r5, r3
 8000eb2:	2900      	cmp	r1, #0
 8000eb4:	d028      	beq.n	8000f08 <__aeabi_dsub+0x230>
 8000eb6:	4566      	cmp	r6, ip
 8000eb8:	d02c      	beq.n	8000f14 <__aeabi_dsub+0x23c>
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d05b      	beq.n	8000f76 <__aeabi_dsub+0x29e>
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_dsub+0x1ec>
 8000ec2:	e12c      	b.n	800111e <__aeabi_dsub+0x446>
 8000ec4:	465b      	mov	r3, fp
 8000ec6:	4666      	mov	r6, ip
 8000ec8:	075f      	lsls	r7, r3, #29
 8000eca:	08d2      	lsrs	r2, r2, #3
 8000ecc:	4317      	orrs	r7, r2
 8000ece:	08dd      	lsrs	r5, r3, #3
 8000ed0:	003b      	movs	r3, r7
 8000ed2:	432b      	orrs	r3, r5
 8000ed4:	d100      	bne.n	8000ed8 <__aeabi_dsub+0x200>
 8000ed6:	e0e2      	b.n	800109e <__aeabi_dsub+0x3c6>
 8000ed8:	2480      	movs	r4, #128	@ 0x80
 8000eda:	0324      	lsls	r4, r4, #12
 8000edc:	432c      	orrs	r4, r5
 8000ede:	0324      	lsls	r4, r4, #12
 8000ee0:	4d56      	ldr	r5, [pc, #344]	@ (800103c <__aeabi_dsub+0x364>)
 8000ee2:	0b24      	lsrs	r4, r4, #12
 8000ee4:	e08c      	b.n	8001000 <__aeabi_dsub+0x328>
 8000ee6:	4659      	mov	r1, fp
 8000ee8:	4311      	orrs	r1, r2
 8000eea:	d100      	bne.n	8000eee <__aeabi_dsub+0x216>
 8000eec:	e0d5      	b.n	800109a <__aeabi_dsub+0x3c2>
 8000eee:	1e59      	subs	r1, r3, #1
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d100      	bne.n	8000ef6 <__aeabi_dsub+0x21e>
 8000ef4:	e1b9      	b.n	800126a <__aeabi_dsub+0x592>
 8000ef6:	42bb      	cmp	r3, r7
 8000ef8:	d100      	bne.n	8000efc <__aeabi_dsub+0x224>
 8000efa:	e1b1      	b.n	8001260 <__aeabi_dsub+0x588>
 8000efc:	2701      	movs	r7, #1
 8000efe:	000b      	movs	r3, r1
 8000f00:	2938      	cmp	r1, #56	@ 0x38
 8000f02:	dd00      	ble.n	8000f06 <__aeabi_dsub+0x22e>
 8000f04:	e740      	b.n	8000d88 <__aeabi_dsub+0xb0>
 8000f06:	e72a      	b.n	8000d5e <__aeabi_dsub+0x86>
 8000f08:	4661      	mov	r1, ip
 8000f0a:	2701      	movs	r7, #1
 8000f0c:	4079      	eors	r1, r7
 8000f0e:	468c      	mov	ip, r1
 8000f10:	4566      	cmp	r6, ip
 8000f12:	d1d2      	bne.n	8000eba <__aeabi_dsub+0x1e2>
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d100      	bne.n	8000f1a <__aeabi_dsub+0x242>
 8000f18:	e0c5      	b.n	80010a6 <__aeabi_dsub+0x3ce>
 8000f1a:	2d00      	cmp	r5, #0
 8000f1c:	d000      	beq.n	8000f20 <__aeabi_dsub+0x248>
 8000f1e:	e155      	b.n	80011cc <__aeabi_dsub+0x4f4>
 8000f20:	464b      	mov	r3, r9
 8000f22:	0025      	movs	r5, r4
 8000f24:	4305      	orrs	r5, r0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_dsub+0x252>
 8000f28:	e212      	b.n	8001350 <__aeabi_dsub+0x678>
 8000f2a:	1e59      	subs	r1, r3, #1
 8000f2c:	468c      	mov	ip, r1
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d100      	bne.n	8000f34 <__aeabi_dsub+0x25c>
 8000f32:	e249      	b.n	80013c8 <__aeabi_dsub+0x6f0>
 8000f34:	4d41      	ldr	r5, [pc, #260]	@ (800103c <__aeabi_dsub+0x364>)
 8000f36:	42ab      	cmp	r3, r5
 8000f38:	d100      	bne.n	8000f3c <__aeabi_dsub+0x264>
 8000f3a:	e28f      	b.n	800145c <__aeabi_dsub+0x784>
 8000f3c:	2701      	movs	r7, #1
 8000f3e:	2938      	cmp	r1, #56	@ 0x38
 8000f40:	dc11      	bgt.n	8000f66 <__aeabi_dsub+0x28e>
 8000f42:	4663      	mov	r3, ip
 8000f44:	2b1f      	cmp	r3, #31
 8000f46:	dd00      	ble.n	8000f4a <__aeabi_dsub+0x272>
 8000f48:	e25b      	b.n	8001402 <__aeabi_dsub+0x72a>
 8000f4a:	4661      	mov	r1, ip
 8000f4c:	2320      	movs	r3, #32
 8000f4e:	0027      	movs	r7, r4
 8000f50:	1a5b      	subs	r3, r3, r1
 8000f52:	0005      	movs	r5, r0
 8000f54:	4098      	lsls	r0, r3
 8000f56:	409f      	lsls	r7, r3
 8000f58:	40cd      	lsrs	r5, r1
 8000f5a:	1e43      	subs	r3, r0, #1
 8000f5c:	4198      	sbcs	r0, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	432f      	orrs	r7, r5
 8000f62:	4307      	orrs	r7, r0
 8000f64:	44a3      	add	fp, r4
 8000f66:	18bf      	adds	r7, r7, r2
 8000f68:	4297      	cmp	r7, r2
 8000f6a:	4192      	sbcs	r2, r2
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	445a      	add	r2, fp
 8000f70:	0014      	movs	r4, r2
 8000f72:	464d      	mov	r5, r9
 8000f74:	e787      	b.n	8000e86 <__aeabi_dsub+0x1ae>
 8000f76:	4f34      	ldr	r7, [pc, #208]	@ (8001048 <__aeabi_dsub+0x370>)
 8000f78:	1c6b      	adds	r3, r5, #1
 8000f7a:	423b      	tst	r3, r7
 8000f7c:	d000      	beq.n	8000f80 <__aeabi_dsub+0x2a8>
 8000f7e:	e0b6      	b.n	80010ee <__aeabi_dsub+0x416>
 8000f80:	4659      	mov	r1, fp
 8000f82:	0023      	movs	r3, r4
 8000f84:	4311      	orrs	r1, r2
 8000f86:	000f      	movs	r7, r1
 8000f88:	4303      	orrs	r3, r0
 8000f8a:	2d00      	cmp	r5, #0
 8000f8c:	d000      	beq.n	8000f90 <__aeabi_dsub+0x2b8>
 8000f8e:	e126      	b.n	80011de <__aeabi_dsub+0x506>
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dsub+0x2be>
 8000f94:	e1c0      	b.n	8001318 <__aeabi_dsub+0x640>
 8000f96:	2900      	cmp	r1, #0
 8000f98:	d100      	bne.n	8000f9c <__aeabi_dsub+0x2c4>
 8000f9a:	e0a1      	b.n	80010e0 <__aeabi_dsub+0x408>
 8000f9c:	1a83      	subs	r3, r0, r2
 8000f9e:	4698      	mov	r8, r3
 8000fa0:	465b      	mov	r3, fp
 8000fa2:	4540      	cmp	r0, r8
 8000fa4:	41ad      	sbcs	r5, r5
 8000fa6:	1ae3      	subs	r3, r4, r3
 8000fa8:	426d      	negs	r5, r5
 8000faa:	1b5b      	subs	r3, r3, r5
 8000fac:	2580      	movs	r5, #128	@ 0x80
 8000fae:	042d      	lsls	r5, r5, #16
 8000fb0:	422b      	tst	r3, r5
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_dsub+0x2de>
 8000fb4:	e14b      	b.n	800124e <__aeabi_dsub+0x576>
 8000fb6:	465b      	mov	r3, fp
 8000fb8:	1a10      	subs	r0, r2, r0
 8000fba:	4282      	cmp	r2, r0
 8000fbc:	4192      	sbcs	r2, r2
 8000fbe:	1b1c      	subs	r4, r3, r4
 8000fc0:	0007      	movs	r7, r0
 8000fc2:	2601      	movs	r6, #1
 8000fc4:	4663      	mov	r3, ip
 8000fc6:	4252      	negs	r2, r2
 8000fc8:	1aa4      	subs	r4, r4, r2
 8000fca:	4327      	orrs	r7, r4
 8000fcc:	401e      	ands	r6, r3
 8000fce:	2f00      	cmp	r7, #0
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_dsub+0x2fc>
 8000fd2:	e142      	b.n	800125a <__aeabi_dsub+0x582>
 8000fd4:	422c      	tst	r4, r5
 8000fd6:	d100      	bne.n	8000fda <__aeabi_dsub+0x302>
 8000fd8:	e26d      	b.n	80014b6 <__aeabi_dsub+0x7de>
 8000fda:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <__aeabi_dsub+0x368>)
 8000fdc:	2501      	movs	r5, #1
 8000fde:	401c      	ands	r4, r3
 8000fe0:	e71b      	b.n	8000e1a <__aeabi_dsub+0x142>
 8000fe2:	42bd      	cmp	r5, r7
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_dsub+0x310>
 8000fe6:	e13b      	b.n	8001260 <__aeabi_dsub+0x588>
 8000fe8:	2701      	movs	r7, #1
 8000fea:	2b38      	cmp	r3, #56	@ 0x38
 8000fec:	dd00      	ble.n	8000ff0 <__aeabi_dsub+0x318>
 8000fee:	e745      	b.n	8000e7c <__aeabi_dsub+0x1a4>
 8000ff0:	2780      	movs	r7, #128	@ 0x80
 8000ff2:	4659      	mov	r1, fp
 8000ff4:	043f      	lsls	r7, r7, #16
 8000ff6:	4339      	orrs	r1, r7
 8000ff8:	468b      	mov	fp, r1
 8000ffa:	e72a      	b.n	8000e52 <__aeabi_dsub+0x17a>
 8000ffc:	2400      	movs	r4, #0
 8000ffe:	2700      	movs	r7, #0
 8001000:	052d      	lsls	r5, r5, #20
 8001002:	4325      	orrs	r5, r4
 8001004:	07f6      	lsls	r6, r6, #31
 8001006:	4335      	orrs	r5, r6
 8001008:	0038      	movs	r0, r7
 800100a:	0029      	movs	r1, r5
 800100c:	b003      	add	sp, #12
 800100e:	bcf0      	pop	{r4, r5, r6, r7}
 8001010:	46bb      	mov	fp, r7
 8001012:	46b2      	mov	sl, r6
 8001014:	46a9      	mov	r9, r5
 8001016:	46a0      	mov	r8, r4
 8001018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800101a:	077b      	lsls	r3, r7, #29
 800101c:	d004      	beq.n	8001028 <__aeabi_dsub+0x350>
 800101e:	230f      	movs	r3, #15
 8001020:	403b      	ands	r3, r7
 8001022:	2b04      	cmp	r3, #4
 8001024:	d000      	beq.n	8001028 <__aeabi_dsub+0x350>
 8001026:	e6e7      	b.n	8000df8 <__aeabi_dsub+0x120>
 8001028:	002b      	movs	r3, r5
 800102a:	08f8      	lsrs	r0, r7, #3
 800102c:	4a03      	ldr	r2, [pc, #12]	@ (800103c <__aeabi_dsub+0x364>)
 800102e:	0767      	lsls	r7, r4, #29
 8001030:	4307      	orrs	r7, r0
 8001032:	08e5      	lsrs	r5, r4, #3
 8001034:	4293      	cmp	r3, r2
 8001036:	d100      	bne.n	800103a <__aeabi_dsub+0x362>
 8001038:	e74a      	b.n	8000ed0 <__aeabi_dsub+0x1f8>
 800103a:	e0a5      	b.n	8001188 <__aeabi_dsub+0x4b0>
 800103c:	000007ff 	.word	0x000007ff
 8001040:	ff7fffff 	.word	0xff7fffff
 8001044:	fffff801 	.word	0xfffff801
 8001048:	000007fe 	.word	0x000007fe
 800104c:	0038      	movs	r0, r7
 800104e:	f000 fadb 	bl	8001608 <__clzsi2>
 8001052:	0003      	movs	r3, r0
 8001054:	3318      	adds	r3, #24
 8001056:	2b1f      	cmp	r3, #31
 8001058:	dc00      	bgt.n	800105c <__aeabi_dsub+0x384>
 800105a:	e6a7      	b.n	8000dac <__aeabi_dsub+0xd4>
 800105c:	003a      	movs	r2, r7
 800105e:	3808      	subs	r0, #8
 8001060:	4082      	lsls	r2, r0
 8001062:	429d      	cmp	r5, r3
 8001064:	dd00      	ble.n	8001068 <__aeabi_dsub+0x390>
 8001066:	e08a      	b.n	800117e <__aeabi_dsub+0x4a6>
 8001068:	1b5b      	subs	r3, r3, r5
 800106a:	1c58      	adds	r0, r3, #1
 800106c:	281f      	cmp	r0, #31
 800106e:	dc00      	bgt.n	8001072 <__aeabi_dsub+0x39a>
 8001070:	e1d8      	b.n	8001424 <__aeabi_dsub+0x74c>
 8001072:	0017      	movs	r7, r2
 8001074:	3b1f      	subs	r3, #31
 8001076:	40df      	lsrs	r7, r3
 8001078:	2820      	cmp	r0, #32
 800107a:	d005      	beq.n	8001088 <__aeabi_dsub+0x3b0>
 800107c:	2340      	movs	r3, #64	@ 0x40
 800107e:	1a1b      	subs	r3, r3, r0
 8001080:	409a      	lsls	r2, r3
 8001082:	1e53      	subs	r3, r2, #1
 8001084:	419a      	sbcs	r2, r3
 8001086:	4317      	orrs	r7, r2
 8001088:	2500      	movs	r5, #0
 800108a:	2f00      	cmp	r7, #0
 800108c:	d100      	bne.n	8001090 <__aeabi_dsub+0x3b8>
 800108e:	e0e5      	b.n	800125c <__aeabi_dsub+0x584>
 8001090:	077b      	lsls	r3, r7, #29
 8001092:	d000      	beq.n	8001096 <__aeabi_dsub+0x3be>
 8001094:	e6ab      	b.n	8000dee <__aeabi_dsub+0x116>
 8001096:	002c      	movs	r4, r5
 8001098:	e7c6      	b.n	8001028 <__aeabi_dsub+0x350>
 800109a:	08c0      	lsrs	r0, r0, #3
 800109c:	e7c6      	b.n	800102c <__aeabi_dsub+0x354>
 800109e:	2700      	movs	r7, #0
 80010a0:	2400      	movs	r4, #0
 80010a2:	4dd1      	ldr	r5, [pc, #836]	@ (80013e8 <__aeabi_dsub+0x710>)
 80010a4:	e7ac      	b.n	8001000 <__aeabi_dsub+0x328>
 80010a6:	4fd1      	ldr	r7, [pc, #836]	@ (80013ec <__aeabi_dsub+0x714>)
 80010a8:	1c6b      	adds	r3, r5, #1
 80010aa:	423b      	tst	r3, r7
 80010ac:	d171      	bne.n	8001192 <__aeabi_dsub+0x4ba>
 80010ae:	0023      	movs	r3, r4
 80010b0:	4303      	orrs	r3, r0
 80010b2:	2d00      	cmp	r5, #0
 80010b4:	d000      	beq.n	80010b8 <__aeabi_dsub+0x3e0>
 80010b6:	e14e      	b.n	8001356 <__aeabi_dsub+0x67e>
 80010b8:	4657      	mov	r7, sl
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d100      	bne.n	80010c0 <__aeabi_dsub+0x3e8>
 80010be:	e1b5      	b.n	800142c <__aeabi_dsub+0x754>
 80010c0:	2f00      	cmp	r7, #0
 80010c2:	d00d      	beq.n	80010e0 <__aeabi_dsub+0x408>
 80010c4:	1883      	adds	r3, r0, r2
 80010c6:	4283      	cmp	r3, r0
 80010c8:	4180      	sbcs	r0, r0
 80010ca:	445c      	add	r4, fp
 80010cc:	4240      	negs	r0, r0
 80010ce:	1824      	adds	r4, r4, r0
 80010d0:	0222      	lsls	r2, r4, #8
 80010d2:	d500      	bpl.n	80010d6 <__aeabi_dsub+0x3fe>
 80010d4:	e1c8      	b.n	8001468 <__aeabi_dsub+0x790>
 80010d6:	001f      	movs	r7, r3
 80010d8:	4698      	mov	r8, r3
 80010da:	4327      	orrs	r7, r4
 80010dc:	d100      	bne.n	80010e0 <__aeabi_dsub+0x408>
 80010de:	e0bc      	b.n	800125a <__aeabi_dsub+0x582>
 80010e0:	4643      	mov	r3, r8
 80010e2:	0767      	lsls	r7, r4, #29
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	431f      	orrs	r7, r3
 80010e8:	08e5      	lsrs	r5, r4, #3
 80010ea:	2300      	movs	r3, #0
 80010ec:	e04c      	b.n	8001188 <__aeabi_dsub+0x4b0>
 80010ee:	1a83      	subs	r3, r0, r2
 80010f0:	4698      	mov	r8, r3
 80010f2:	465b      	mov	r3, fp
 80010f4:	4540      	cmp	r0, r8
 80010f6:	41bf      	sbcs	r7, r7
 80010f8:	1ae3      	subs	r3, r4, r3
 80010fa:	427f      	negs	r7, r7
 80010fc:	1bdb      	subs	r3, r3, r7
 80010fe:	021f      	lsls	r7, r3, #8
 8001100:	d47c      	bmi.n	80011fc <__aeabi_dsub+0x524>
 8001102:	4647      	mov	r7, r8
 8001104:	431f      	orrs	r7, r3
 8001106:	d100      	bne.n	800110a <__aeabi_dsub+0x432>
 8001108:	e0a6      	b.n	8001258 <__aeabi_dsub+0x580>
 800110a:	001c      	movs	r4, r3
 800110c:	4647      	mov	r7, r8
 800110e:	e645      	b.n	8000d9c <__aeabi_dsub+0xc4>
 8001110:	4cb7      	ldr	r4, [pc, #732]	@ (80013f0 <__aeabi_dsub+0x718>)
 8001112:	1aed      	subs	r5, r5, r3
 8001114:	4014      	ands	r4, r2
 8001116:	077b      	lsls	r3, r7, #29
 8001118:	d000      	beq.n	800111c <__aeabi_dsub+0x444>
 800111a:	e780      	b.n	800101e <__aeabi_dsub+0x346>
 800111c:	e784      	b.n	8001028 <__aeabi_dsub+0x350>
 800111e:	464b      	mov	r3, r9
 8001120:	0025      	movs	r5, r4
 8001122:	4305      	orrs	r5, r0
 8001124:	d066      	beq.n	80011f4 <__aeabi_dsub+0x51c>
 8001126:	1e5f      	subs	r7, r3, #1
 8001128:	2b01      	cmp	r3, #1
 800112a:	d100      	bne.n	800112e <__aeabi_dsub+0x456>
 800112c:	e0fc      	b.n	8001328 <__aeabi_dsub+0x650>
 800112e:	4dae      	ldr	r5, [pc, #696]	@ (80013e8 <__aeabi_dsub+0x710>)
 8001130:	42ab      	cmp	r3, r5
 8001132:	d100      	bne.n	8001136 <__aeabi_dsub+0x45e>
 8001134:	e15e      	b.n	80013f4 <__aeabi_dsub+0x71c>
 8001136:	4666      	mov	r6, ip
 8001138:	2f38      	cmp	r7, #56	@ 0x38
 800113a:	dc00      	bgt.n	800113e <__aeabi_dsub+0x466>
 800113c:	e0b4      	b.n	80012a8 <__aeabi_dsub+0x5d0>
 800113e:	2001      	movs	r0, #1
 8001140:	1a17      	subs	r7, r2, r0
 8001142:	42ba      	cmp	r2, r7
 8001144:	4192      	sbcs	r2, r2
 8001146:	465b      	mov	r3, fp
 8001148:	4252      	negs	r2, r2
 800114a:	464d      	mov	r5, r9
 800114c:	1a9c      	subs	r4, r3, r2
 800114e:	e620      	b.n	8000d92 <__aeabi_dsub+0xba>
 8001150:	0767      	lsls	r7, r4, #29
 8001152:	08c0      	lsrs	r0, r0, #3
 8001154:	4307      	orrs	r7, r0
 8001156:	08e5      	lsrs	r5, r4, #3
 8001158:	e6ba      	b.n	8000ed0 <__aeabi_dsub+0x1f8>
 800115a:	001f      	movs	r7, r3
 800115c:	4659      	mov	r1, fp
 800115e:	3f20      	subs	r7, #32
 8001160:	40f9      	lsrs	r1, r7
 8001162:	000f      	movs	r7, r1
 8001164:	2b20      	cmp	r3, #32
 8001166:	d005      	beq.n	8001174 <__aeabi_dsub+0x49c>
 8001168:	2140      	movs	r1, #64	@ 0x40
 800116a:	1acb      	subs	r3, r1, r3
 800116c:	4659      	mov	r1, fp
 800116e:	4099      	lsls	r1, r3
 8001170:	430a      	orrs	r2, r1
 8001172:	4692      	mov	sl, r2
 8001174:	4653      	mov	r3, sl
 8001176:	1e5a      	subs	r2, r3, #1
 8001178:	4193      	sbcs	r3, r2
 800117a:	431f      	orrs	r7, r3
 800117c:	e604      	b.n	8000d88 <__aeabi_dsub+0xb0>
 800117e:	1aeb      	subs	r3, r5, r3
 8001180:	4d9b      	ldr	r5, [pc, #620]	@ (80013f0 <__aeabi_dsub+0x718>)
 8001182:	4015      	ands	r5, r2
 8001184:	076f      	lsls	r7, r5, #29
 8001186:	08ed      	lsrs	r5, r5, #3
 8001188:	032c      	lsls	r4, r5, #12
 800118a:	055d      	lsls	r5, r3, #21
 800118c:	0b24      	lsrs	r4, r4, #12
 800118e:	0d6d      	lsrs	r5, r5, #21
 8001190:	e736      	b.n	8001000 <__aeabi_dsub+0x328>
 8001192:	4d95      	ldr	r5, [pc, #596]	@ (80013e8 <__aeabi_dsub+0x710>)
 8001194:	42ab      	cmp	r3, r5
 8001196:	d100      	bne.n	800119a <__aeabi_dsub+0x4c2>
 8001198:	e0d6      	b.n	8001348 <__aeabi_dsub+0x670>
 800119a:	1882      	adds	r2, r0, r2
 800119c:	0021      	movs	r1, r4
 800119e:	4282      	cmp	r2, r0
 80011a0:	4180      	sbcs	r0, r0
 80011a2:	4459      	add	r1, fp
 80011a4:	4240      	negs	r0, r0
 80011a6:	1808      	adds	r0, r1, r0
 80011a8:	07c7      	lsls	r7, r0, #31
 80011aa:	0852      	lsrs	r2, r2, #1
 80011ac:	4317      	orrs	r7, r2
 80011ae:	0844      	lsrs	r4, r0, #1
 80011b0:	0752      	lsls	r2, r2, #29
 80011b2:	d400      	bmi.n	80011b6 <__aeabi_dsub+0x4de>
 80011b4:	e185      	b.n	80014c2 <__aeabi_dsub+0x7ea>
 80011b6:	220f      	movs	r2, #15
 80011b8:	001d      	movs	r5, r3
 80011ba:	403a      	ands	r2, r7
 80011bc:	2a04      	cmp	r2, #4
 80011be:	d000      	beq.n	80011c2 <__aeabi_dsub+0x4ea>
 80011c0:	e61a      	b.n	8000df8 <__aeabi_dsub+0x120>
 80011c2:	08ff      	lsrs	r7, r7, #3
 80011c4:	0764      	lsls	r4, r4, #29
 80011c6:	4327      	orrs	r7, r4
 80011c8:	0905      	lsrs	r5, r0, #4
 80011ca:	e7dd      	b.n	8001188 <__aeabi_dsub+0x4b0>
 80011cc:	465b      	mov	r3, fp
 80011ce:	08d2      	lsrs	r2, r2, #3
 80011d0:	075f      	lsls	r7, r3, #29
 80011d2:	4317      	orrs	r7, r2
 80011d4:	08dd      	lsrs	r5, r3, #3
 80011d6:	e67b      	b.n	8000ed0 <__aeabi_dsub+0x1f8>
 80011d8:	2700      	movs	r7, #0
 80011da:	2400      	movs	r4, #0
 80011dc:	e710      	b.n	8001000 <__aeabi_dsub+0x328>
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d000      	beq.n	80011e4 <__aeabi_dsub+0x50c>
 80011e2:	e0d6      	b.n	8001392 <__aeabi_dsub+0x6ba>
 80011e4:	2900      	cmp	r1, #0
 80011e6:	d000      	beq.n	80011ea <__aeabi_dsub+0x512>
 80011e8:	e12f      	b.n	800144a <__aeabi_dsub+0x772>
 80011ea:	2480      	movs	r4, #128	@ 0x80
 80011ec:	2600      	movs	r6, #0
 80011ee:	4d7e      	ldr	r5, [pc, #504]	@ (80013e8 <__aeabi_dsub+0x710>)
 80011f0:	0324      	lsls	r4, r4, #12
 80011f2:	e705      	b.n	8001000 <__aeabi_dsub+0x328>
 80011f4:	4666      	mov	r6, ip
 80011f6:	465c      	mov	r4, fp
 80011f8:	08d0      	lsrs	r0, r2, #3
 80011fa:	e717      	b.n	800102c <__aeabi_dsub+0x354>
 80011fc:	465b      	mov	r3, fp
 80011fe:	1a17      	subs	r7, r2, r0
 8001200:	42ba      	cmp	r2, r7
 8001202:	4192      	sbcs	r2, r2
 8001204:	1b1c      	subs	r4, r3, r4
 8001206:	2601      	movs	r6, #1
 8001208:	4663      	mov	r3, ip
 800120a:	4252      	negs	r2, r2
 800120c:	1aa4      	subs	r4, r4, r2
 800120e:	401e      	ands	r6, r3
 8001210:	e5c4      	b.n	8000d9c <__aeabi_dsub+0xc4>
 8001212:	1883      	adds	r3, r0, r2
 8001214:	4283      	cmp	r3, r0
 8001216:	4180      	sbcs	r0, r0
 8001218:	445c      	add	r4, fp
 800121a:	4240      	negs	r0, r0
 800121c:	1825      	adds	r5, r4, r0
 800121e:	022a      	lsls	r2, r5, #8
 8001220:	d400      	bmi.n	8001224 <__aeabi_dsub+0x54c>
 8001222:	e0da      	b.n	80013da <__aeabi_dsub+0x702>
 8001224:	4a72      	ldr	r2, [pc, #456]	@ (80013f0 <__aeabi_dsub+0x718>)
 8001226:	085b      	lsrs	r3, r3, #1
 8001228:	4015      	ands	r5, r2
 800122a:	07ea      	lsls	r2, r5, #31
 800122c:	431a      	orrs	r2, r3
 800122e:	0869      	lsrs	r1, r5, #1
 8001230:	075b      	lsls	r3, r3, #29
 8001232:	d400      	bmi.n	8001236 <__aeabi_dsub+0x55e>
 8001234:	e14a      	b.n	80014cc <__aeabi_dsub+0x7f4>
 8001236:	230f      	movs	r3, #15
 8001238:	4013      	ands	r3, r2
 800123a:	2b04      	cmp	r3, #4
 800123c:	d100      	bne.n	8001240 <__aeabi_dsub+0x568>
 800123e:	e0fc      	b.n	800143a <__aeabi_dsub+0x762>
 8001240:	1d17      	adds	r7, r2, #4
 8001242:	4297      	cmp	r7, r2
 8001244:	41a4      	sbcs	r4, r4
 8001246:	4264      	negs	r4, r4
 8001248:	2502      	movs	r5, #2
 800124a:	1864      	adds	r4, r4, r1
 800124c:	e6ec      	b.n	8001028 <__aeabi_dsub+0x350>
 800124e:	4647      	mov	r7, r8
 8001250:	001c      	movs	r4, r3
 8001252:	431f      	orrs	r7, r3
 8001254:	d000      	beq.n	8001258 <__aeabi_dsub+0x580>
 8001256:	e743      	b.n	80010e0 <__aeabi_dsub+0x408>
 8001258:	2600      	movs	r6, #0
 800125a:	2500      	movs	r5, #0
 800125c:	2400      	movs	r4, #0
 800125e:	e6cf      	b.n	8001000 <__aeabi_dsub+0x328>
 8001260:	08c0      	lsrs	r0, r0, #3
 8001262:	0767      	lsls	r7, r4, #29
 8001264:	4307      	orrs	r7, r0
 8001266:	08e5      	lsrs	r5, r4, #3
 8001268:	e632      	b.n	8000ed0 <__aeabi_dsub+0x1f8>
 800126a:	1a87      	subs	r7, r0, r2
 800126c:	465b      	mov	r3, fp
 800126e:	42b8      	cmp	r0, r7
 8001270:	4180      	sbcs	r0, r0
 8001272:	1ae4      	subs	r4, r4, r3
 8001274:	4240      	negs	r0, r0
 8001276:	1a24      	subs	r4, r4, r0
 8001278:	0223      	lsls	r3, r4, #8
 800127a:	d428      	bmi.n	80012ce <__aeabi_dsub+0x5f6>
 800127c:	0763      	lsls	r3, r4, #29
 800127e:	08ff      	lsrs	r7, r7, #3
 8001280:	431f      	orrs	r7, r3
 8001282:	08e5      	lsrs	r5, r4, #3
 8001284:	2301      	movs	r3, #1
 8001286:	e77f      	b.n	8001188 <__aeabi_dsub+0x4b0>
 8001288:	2b00      	cmp	r3, #0
 800128a:	d100      	bne.n	800128e <__aeabi_dsub+0x5b6>
 800128c:	e673      	b.n	8000f76 <__aeabi_dsub+0x29e>
 800128e:	464b      	mov	r3, r9
 8001290:	1b5f      	subs	r7, r3, r5
 8001292:	003b      	movs	r3, r7
 8001294:	2d00      	cmp	r5, #0
 8001296:	d100      	bne.n	800129a <__aeabi_dsub+0x5c2>
 8001298:	e742      	b.n	8001120 <__aeabi_dsub+0x448>
 800129a:	2f38      	cmp	r7, #56	@ 0x38
 800129c:	dd00      	ble.n	80012a0 <__aeabi_dsub+0x5c8>
 800129e:	e0ec      	b.n	800147a <__aeabi_dsub+0x7a2>
 80012a0:	2380      	movs	r3, #128	@ 0x80
 80012a2:	000e      	movs	r6, r1
 80012a4:	041b      	lsls	r3, r3, #16
 80012a6:	431c      	orrs	r4, r3
 80012a8:	2f1f      	cmp	r7, #31
 80012aa:	dc25      	bgt.n	80012f8 <__aeabi_dsub+0x620>
 80012ac:	2520      	movs	r5, #32
 80012ae:	0023      	movs	r3, r4
 80012b0:	1bed      	subs	r5, r5, r7
 80012b2:	0001      	movs	r1, r0
 80012b4:	40a8      	lsls	r0, r5
 80012b6:	40ab      	lsls	r3, r5
 80012b8:	40f9      	lsrs	r1, r7
 80012ba:	1e45      	subs	r5, r0, #1
 80012bc:	41a8      	sbcs	r0, r5
 80012be:	430b      	orrs	r3, r1
 80012c0:	40fc      	lsrs	r4, r7
 80012c2:	4318      	orrs	r0, r3
 80012c4:	465b      	mov	r3, fp
 80012c6:	1b1b      	subs	r3, r3, r4
 80012c8:	469b      	mov	fp, r3
 80012ca:	e739      	b.n	8001140 <__aeabi_dsub+0x468>
 80012cc:	4666      	mov	r6, ip
 80012ce:	2501      	movs	r5, #1
 80012d0:	e562      	b.n	8000d98 <__aeabi_dsub+0xc0>
 80012d2:	001f      	movs	r7, r3
 80012d4:	4659      	mov	r1, fp
 80012d6:	3f20      	subs	r7, #32
 80012d8:	40f9      	lsrs	r1, r7
 80012da:	468c      	mov	ip, r1
 80012dc:	2b20      	cmp	r3, #32
 80012de:	d005      	beq.n	80012ec <__aeabi_dsub+0x614>
 80012e0:	2740      	movs	r7, #64	@ 0x40
 80012e2:	4659      	mov	r1, fp
 80012e4:	1afb      	subs	r3, r7, r3
 80012e6:	4099      	lsls	r1, r3
 80012e8:	430a      	orrs	r2, r1
 80012ea:	4692      	mov	sl, r2
 80012ec:	4657      	mov	r7, sl
 80012ee:	1e7b      	subs	r3, r7, #1
 80012f0:	419f      	sbcs	r7, r3
 80012f2:	4663      	mov	r3, ip
 80012f4:	431f      	orrs	r7, r3
 80012f6:	e5c1      	b.n	8000e7c <__aeabi_dsub+0x1a4>
 80012f8:	003b      	movs	r3, r7
 80012fa:	0025      	movs	r5, r4
 80012fc:	3b20      	subs	r3, #32
 80012fe:	40dd      	lsrs	r5, r3
 8001300:	2f20      	cmp	r7, #32
 8001302:	d004      	beq.n	800130e <__aeabi_dsub+0x636>
 8001304:	2340      	movs	r3, #64	@ 0x40
 8001306:	1bdb      	subs	r3, r3, r7
 8001308:	409c      	lsls	r4, r3
 800130a:	4320      	orrs	r0, r4
 800130c:	4680      	mov	r8, r0
 800130e:	4640      	mov	r0, r8
 8001310:	1e43      	subs	r3, r0, #1
 8001312:	4198      	sbcs	r0, r3
 8001314:	4328      	orrs	r0, r5
 8001316:	e713      	b.n	8001140 <__aeabi_dsub+0x468>
 8001318:	2900      	cmp	r1, #0
 800131a:	d09d      	beq.n	8001258 <__aeabi_dsub+0x580>
 800131c:	2601      	movs	r6, #1
 800131e:	4663      	mov	r3, ip
 8001320:	465c      	mov	r4, fp
 8001322:	4690      	mov	r8, r2
 8001324:	401e      	ands	r6, r3
 8001326:	e6db      	b.n	80010e0 <__aeabi_dsub+0x408>
 8001328:	1a17      	subs	r7, r2, r0
 800132a:	465b      	mov	r3, fp
 800132c:	42ba      	cmp	r2, r7
 800132e:	4192      	sbcs	r2, r2
 8001330:	1b1c      	subs	r4, r3, r4
 8001332:	4252      	negs	r2, r2
 8001334:	1aa4      	subs	r4, r4, r2
 8001336:	0223      	lsls	r3, r4, #8
 8001338:	d4c8      	bmi.n	80012cc <__aeabi_dsub+0x5f4>
 800133a:	0763      	lsls	r3, r4, #29
 800133c:	08ff      	lsrs	r7, r7, #3
 800133e:	431f      	orrs	r7, r3
 8001340:	4666      	mov	r6, ip
 8001342:	2301      	movs	r3, #1
 8001344:	08e5      	lsrs	r5, r4, #3
 8001346:	e71f      	b.n	8001188 <__aeabi_dsub+0x4b0>
 8001348:	001d      	movs	r5, r3
 800134a:	2400      	movs	r4, #0
 800134c:	2700      	movs	r7, #0
 800134e:	e657      	b.n	8001000 <__aeabi_dsub+0x328>
 8001350:	465c      	mov	r4, fp
 8001352:	08d0      	lsrs	r0, r2, #3
 8001354:	e66a      	b.n	800102c <__aeabi_dsub+0x354>
 8001356:	2b00      	cmp	r3, #0
 8001358:	d100      	bne.n	800135c <__aeabi_dsub+0x684>
 800135a:	e737      	b.n	80011cc <__aeabi_dsub+0x4f4>
 800135c:	4653      	mov	r3, sl
 800135e:	08c0      	lsrs	r0, r0, #3
 8001360:	0767      	lsls	r7, r4, #29
 8001362:	4307      	orrs	r7, r0
 8001364:	08e5      	lsrs	r5, r4, #3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d100      	bne.n	800136c <__aeabi_dsub+0x694>
 800136a:	e5b1      	b.n	8000ed0 <__aeabi_dsub+0x1f8>
 800136c:	2380      	movs	r3, #128	@ 0x80
 800136e:	031b      	lsls	r3, r3, #12
 8001370:	421d      	tst	r5, r3
 8001372:	d008      	beq.n	8001386 <__aeabi_dsub+0x6ae>
 8001374:	4659      	mov	r1, fp
 8001376:	08c8      	lsrs	r0, r1, #3
 8001378:	4218      	tst	r0, r3
 800137a:	d104      	bne.n	8001386 <__aeabi_dsub+0x6ae>
 800137c:	08d2      	lsrs	r2, r2, #3
 800137e:	0749      	lsls	r1, r1, #29
 8001380:	430a      	orrs	r2, r1
 8001382:	0017      	movs	r7, r2
 8001384:	0005      	movs	r5, r0
 8001386:	0f7b      	lsrs	r3, r7, #29
 8001388:	00ff      	lsls	r7, r7, #3
 800138a:	08ff      	lsrs	r7, r7, #3
 800138c:	075b      	lsls	r3, r3, #29
 800138e:	431f      	orrs	r7, r3
 8001390:	e59e      	b.n	8000ed0 <__aeabi_dsub+0x1f8>
 8001392:	08c0      	lsrs	r0, r0, #3
 8001394:	0763      	lsls	r3, r4, #29
 8001396:	4318      	orrs	r0, r3
 8001398:	08e5      	lsrs	r5, r4, #3
 800139a:	2900      	cmp	r1, #0
 800139c:	d053      	beq.n	8001446 <__aeabi_dsub+0x76e>
 800139e:	2380      	movs	r3, #128	@ 0x80
 80013a0:	031b      	lsls	r3, r3, #12
 80013a2:	421d      	tst	r5, r3
 80013a4:	d00a      	beq.n	80013bc <__aeabi_dsub+0x6e4>
 80013a6:	4659      	mov	r1, fp
 80013a8:	08cc      	lsrs	r4, r1, #3
 80013aa:	421c      	tst	r4, r3
 80013ac:	d106      	bne.n	80013bc <__aeabi_dsub+0x6e4>
 80013ae:	2601      	movs	r6, #1
 80013b0:	4663      	mov	r3, ip
 80013b2:	0025      	movs	r5, r4
 80013b4:	08d0      	lsrs	r0, r2, #3
 80013b6:	0749      	lsls	r1, r1, #29
 80013b8:	4308      	orrs	r0, r1
 80013ba:	401e      	ands	r6, r3
 80013bc:	0f47      	lsrs	r7, r0, #29
 80013be:	00c0      	lsls	r0, r0, #3
 80013c0:	08c0      	lsrs	r0, r0, #3
 80013c2:	077f      	lsls	r7, r7, #29
 80013c4:	4307      	orrs	r7, r0
 80013c6:	e583      	b.n	8000ed0 <__aeabi_dsub+0x1f8>
 80013c8:	1883      	adds	r3, r0, r2
 80013ca:	4293      	cmp	r3, r2
 80013cc:	4192      	sbcs	r2, r2
 80013ce:	445c      	add	r4, fp
 80013d0:	4252      	negs	r2, r2
 80013d2:	18a5      	adds	r5, r4, r2
 80013d4:	022a      	lsls	r2, r5, #8
 80013d6:	d500      	bpl.n	80013da <__aeabi_dsub+0x702>
 80013d8:	e724      	b.n	8001224 <__aeabi_dsub+0x54c>
 80013da:	076f      	lsls	r7, r5, #29
 80013dc:	08db      	lsrs	r3, r3, #3
 80013de:	431f      	orrs	r7, r3
 80013e0:	08ed      	lsrs	r5, r5, #3
 80013e2:	2301      	movs	r3, #1
 80013e4:	e6d0      	b.n	8001188 <__aeabi_dsub+0x4b0>
 80013e6:	46c0      	nop			@ (mov r8, r8)
 80013e8:	000007ff 	.word	0x000007ff
 80013ec:	000007fe 	.word	0x000007fe
 80013f0:	ff7fffff 	.word	0xff7fffff
 80013f4:	465b      	mov	r3, fp
 80013f6:	08d2      	lsrs	r2, r2, #3
 80013f8:	075f      	lsls	r7, r3, #29
 80013fa:	4666      	mov	r6, ip
 80013fc:	4317      	orrs	r7, r2
 80013fe:	08dd      	lsrs	r5, r3, #3
 8001400:	e566      	b.n	8000ed0 <__aeabi_dsub+0x1f8>
 8001402:	0025      	movs	r5, r4
 8001404:	3b20      	subs	r3, #32
 8001406:	40dd      	lsrs	r5, r3
 8001408:	4663      	mov	r3, ip
 800140a:	2b20      	cmp	r3, #32
 800140c:	d005      	beq.n	800141a <__aeabi_dsub+0x742>
 800140e:	2340      	movs	r3, #64	@ 0x40
 8001410:	4661      	mov	r1, ip
 8001412:	1a5b      	subs	r3, r3, r1
 8001414:	409c      	lsls	r4, r3
 8001416:	4320      	orrs	r0, r4
 8001418:	4680      	mov	r8, r0
 800141a:	4647      	mov	r7, r8
 800141c:	1e7b      	subs	r3, r7, #1
 800141e:	419f      	sbcs	r7, r3
 8001420:	432f      	orrs	r7, r5
 8001422:	e5a0      	b.n	8000f66 <__aeabi_dsub+0x28e>
 8001424:	2120      	movs	r1, #32
 8001426:	2700      	movs	r7, #0
 8001428:	1a09      	subs	r1, r1, r0
 800142a:	e4d2      	b.n	8000dd2 <__aeabi_dsub+0xfa>
 800142c:	2f00      	cmp	r7, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dsub+0x75a>
 8001430:	e713      	b.n	800125a <__aeabi_dsub+0x582>
 8001432:	465c      	mov	r4, fp
 8001434:	0017      	movs	r7, r2
 8001436:	2500      	movs	r5, #0
 8001438:	e5f6      	b.n	8001028 <__aeabi_dsub+0x350>
 800143a:	08d7      	lsrs	r7, r2, #3
 800143c:	0749      	lsls	r1, r1, #29
 800143e:	2302      	movs	r3, #2
 8001440:	430f      	orrs	r7, r1
 8001442:	092d      	lsrs	r5, r5, #4
 8001444:	e6a0      	b.n	8001188 <__aeabi_dsub+0x4b0>
 8001446:	0007      	movs	r7, r0
 8001448:	e542      	b.n	8000ed0 <__aeabi_dsub+0x1f8>
 800144a:	465b      	mov	r3, fp
 800144c:	2601      	movs	r6, #1
 800144e:	075f      	lsls	r7, r3, #29
 8001450:	08dd      	lsrs	r5, r3, #3
 8001452:	4663      	mov	r3, ip
 8001454:	08d2      	lsrs	r2, r2, #3
 8001456:	4317      	orrs	r7, r2
 8001458:	401e      	ands	r6, r3
 800145a:	e539      	b.n	8000ed0 <__aeabi_dsub+0x1f8>
 800145c:	465b      	mov	r3, fp
 800145e:	08d2      	lsrs	r2, r2, #3
 8001460:	075f      	lsls	r7, r3, #29
 8001462:	4317      	orrs	r7, r2
 8001464:	08dd      	lsrs	r5, r3, #3
 8001466:	e533      	b.n	8000ed0 <__aeabi_dsub+0x1f8>
 8001468:	4a1e      	ldr	r2, [pc, #120]	@ (80014e4 <__aeabi_dsub+0x80c>)
 800146a:	08db      	lsrs	r3, r3, #3
 800146c:	4022      	ands	r2, r4
 800146e:	0757      	lsls	r7, r2, #29
 8001470:	0252      	lsls	r2, r2, #9
 8001472:	2501      	movs	r5, #1
 8001474:	431f      	orrs	r7, r3
 8001476:	0b14      	lsrs	r4, r2, #12
 8001478:	e5c2      	b.n	8001000 <__aeabi_dsub+0x328>
 800147a:	000e      	movs	r6, r1
 800147c:	2001      	movs	r0, #1
 800147e:	e65f      	b.n	8001140 <__aeabi_dsub+0x468>
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00d      	beq.n	80014a0 <__aeabi_dsub+0x7c8>
 8001484:	464b      	mov	r3, r9
 8001486:	1b5b      	subs	r3, r3, r5
 8001488:	469c      	mov	ip, r3
 800148a:	2d00      	cmp	r5, #0
 800148c:	d100      	bne.n	8001490 <__aeabi_dsub+0x7b8>
 800148e:	e548      	b.n	8000f22 <__aeabi_dsub+0x24a>
 8001490:	2701      	movs	r7, #1
 8001492:	2b38      	cmp	r3, #56	@ 0x38
 8001494:	dd00      	ble.n	8001498 <__aeabi_dsub+0x7c0>
 8001496:	e566      	b.n	8000f66 <__aeabi_dsub+0x28e>
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	041b      	lsls	r3, r3, #16
 800149c:	431c      	orrs	r4, r3
 800149e:	e550      	b.n	8000f42 <__aeabi_dsub+0x26a>
 80014a0:	1c6b      	adds	r3, r5, #1
 80014a2:	4d11      	ldr	r5, [pc, #68]	@ (80014e8 <__aeabi_dsub+0x810>)
 80014a4:	422b      	tst	r3, r5
 80014a6:	d000      	beq.n	80014aa <__aeabi_dsub+0x7d2>
 80014a8:	e673      	b.n	8001192 <__aeabi_dsub+0x4ba>
 80014aa:	4659      	mov	r1, fp
 80014ac:	0023      	movs	r3, r4
 80014ae:	4311      	orrs	r1, r2
 80014b0:	468a      	mov	sl, r1
 80014b2:	4303      	orrs	r3, r0
 80014b4:	e600      	b.n	80010b8 <__aeabi_dsub+0x3e0>
 80014b6:	0767      	lsls	r7, r4, #29
 80014b8:	08c0      	lsrs	r0, r0, #3
 80014ba:	2300      	movs	r3, #0
 80014bc:	4307      	orrs	r7, r0
 80014be:	08e5      	lsrs	r5, r4, #3
 80014c0:	e662      	b.n	8001188 <__aeabi_dsub+0x4b0>
 80014c2:	0764      	lsls	r4, r4, #29
 80014c4:	08ff      	lsrs	r7, r7, #3
 80014c6:	4327      	orrs	r7, r4
 80014c8:	0905      	lsrs	r5, r0, #4
 80014ca:	e65d      	b.n	8001188 <__aeabi_dsub+0x4b0>
 80014cc:	08d2      	lsrs	r2, r2, #3
 80014ce:	0749      	lsls	r1, r1, #29
 80014d0:	4311      	orrs	r1, r2
 80014d2:	000f      	movs	r7, r1
 80014d4:	2302      	movs	r3, #2
 80014d6:	092d      	lsrs	r5, r5, #4
 80014d8:	e656      	b.n	8001188 <__aeabi_dsub+0x4b0>
 80014da:	0007      	movs	r7, r0
 80014dc:	e5a4      	b.n	8001028 <__aeabi_dsub+0x350>
 80014de:	0038      	movs	r0, r7
 80014e0:	e48f      	b.n	8000e02 <__aeabi_dsub+0x12a>
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	ff7fffff 	.word	0xff7fffff
 80014e8:	000007fe 	.word	0x000007fe

080014ec <__aeabi_d2iz>:
 80014ec:	000b      	movs	r3, r1
 80014ee:	0002      	movs	r2, r0
 80014f0:	b570      	push	{r4, r5, r6, lr}
 80014f2:	4d16      	ldr	r5, [pc, #88]	@ (800154c <__aeabi_d2iz+0x60>)
 80014f4:	030c      	lsls	r4, r1, #12
 80014f6:	b082      	sub	sp, #8
 80014f8:	0049      	lsls	r1, r1, #1
 80014fa:	2000      	movs	r0, #0
 80014fc:	9200      	str	r2, [sp, #0]
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	0b24      	lsrs	r4, r4, #12
 8001502:	0d49      	lsrs	r1, r1, #21
 8001504:	0fde      	lsrs	r6, r3, #31
 8001506:	42a9      	cmp	r1, r5
 8001508:	dd04      	ble.n	8001514 <__aeabi_d2iz+0x28>
 800150a:	4811      	ldr	r0, [pc, #68]	@ (8001550 <__aeabi_d2iz+0x64>)
 800150c:	4281      	cmp	r1, r0
 800150e:	dd03      	ble.n	8001518 <__aeabi_d2iz+0x2c>
 8001510:	4b10      	ldr	r3, [pc, #64]	@ (8001554 <__aeabi_d2iz+0x68>)
 8001512:	18f0      	adds	r0, r6, r3
 8001514:	b002      	add	sp, #8
 8001516:	bd70      	pop	{r4, r5, r6, pc}
 8001518:	2080      	movs	r0, #128	@ 0x80
 800151a:	0340      	lsls	r0, r0, #13
 800151c:	4320      	orrs	r0, r4
 800151e:	4c0e      	ldr	r4, [pc, #56]	@ (8001558 <__aeabi_d2iz+0x6c>)
 8001520:	1a64      	subs	r4, r4, r1
 8001522:	2c1f      	cmp	r4, #31
 8001524:	dd08      	ble.n	8001538 <__aeabi_d2iz+0x4c>
 8001526:	4b0d      	ldr	r3, [pc, #52]	@ (800155c <__aeabi_d2iz+0x70>)
 8001528:	1a5b      	subs	r3, r3, r1
 800152a:	40d8      	lsrs	r0, r3
 800152c:	0003      	movs	r3, r0
 800152e:	4258      	negs	r0, r3
 8001530:	2e00      	cmp	r6, #0
 8001532:	d1ef      	bne.n	8001514 <__aeabi_d2iz+0x28>
 8001534:	0018      	movs	r0, r3
 8001536:	e7ed      	b.n	8001514 <__aeabi_d2iz+0x28>
 8001538:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <__aeabi_d2iz+0x74>)
 800153a:	9a00      	ldr	r2, [sp, #0]
 800153c:	469c      	mov	ip, r3
 800153e:	0003      	movs	r3, r0
 8001540:	4461      	add	r1, ip
 8001542:	408b      	lsls	r3, r1
 8001544:	40e2      	lsrs	r2, r4
 8001546:	4313      	orrs	r3, r2
 8001548:	e7f1      	b.n	800152e <__aeabi_d2iz+0x42>
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	000003fe 	.word	0x000003fe
 8001550:	0000041d 	.word	0x0000041d
 8001554:	7fffffff 	.word	0x7fffffff
 8001558:	00000433 	.word	0x00000433
 800155c:	00000413 	.word	0x00000413
 8001560:	fffffbed 	.word	0xfffffbed

08001564 <__aeabi_i2d>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	2800      	cmp	r0, #0
 8001568:	d016      	beq.n	8001598 <__aeabi_i2d+0x34>
 800156a:	17c3      	asrs	r3, r0, #31
 800156c:	18c5      	adds	r5, r0, r3
 800156e:	405d      	eors	r5, r3
 8001570:	0fc4      	lsrs	r4, r0, #31
 8001572:	0028      	movs	r0, r5
 8001574:	f000 f848 	bl	8001608 <__clzsi2>
 8001578:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <__aeabi_i2d+0x58>)
 800157a:	1a1b      	subs	r3, r3, r0
 800157c:	055b      	lsls	r3, r3, #21
 800157e:	0d5b      	lsrs	r3, r3, #21
 8001580:	280a      	cmp	r0, #10
 8001582:	dc14      	bgt.n	80015ae <__aeabi_i2d+0x4a>
 8001584:	0002      	movs	r2, r0
 8001586:	002e      	movs	r6, r5
 8001588:	3215      	adds	r2, #21
 800158a:	4096      	lsls	r6, r2
 800158c:	220b      	movs	r2, #11
 800158e:	1a12      	subs	r2, r2, r0
 8001590:	40d5      	lsrs	r5, r2
 8001592:	032d      	lsls	r5, r5, #12
 8001594:	0b2d      	lsrs	r5, r5, #12
 8001596:	e003      	b.n	80015a0 <__aeabi_i2d+0x3c>
 8001598:	2400      	movs	r4, #0
 800159a:	2300      	movs	r3, #0
 800159c:	2500      	movs	r5, #0
 800159e:	2600      	movs	r6, #0
 80015a0:	051b      	lsls	r3, r3, #20
 80015a2:	432b      	orrs	r3, r5
 80015a4:	07e4      	lsls	r4, r4, #31
 80015a6:	4323      	orrs	r3, r4
 80015a8:	0030      	movs	r0, r6
 80015aa:	0019      	movs	r1, r3
 80015ac:	bd70      	pop	{r4, r5, r6, pc}
 80015ae:	380b      	subs	r0, #11
 80015b0:	4085      	lsls	r5, r0
 80015b2:	032d      	lsls	r5, r5, #12
 80015b4:	2600      	movs	r6, #0
 80015b6:	0b2d      	lsrs	r5, r5, #12
 80015b8:	e7f2      	b.n	80015a0 <__aeabi_i2d+0x3c>
 80015ba:	46c0      	nop			@ (mov r8, r8)
 80015bc:	0000041e 	.word	0x0000041e

080015c0 <__aeabi_ui2d>:
 80015c0:	b510      	push	{r4, lr}
 80015c2:	1e04      	subs	r4, r0, #0
 80015c4:	d010      	beq.n	80015e8 <__aeabi_ui2d+0x28>
 80015c6:	f000 f81f 	bl	8001608 <__clzsi2>
 80015ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <__aeabi_ui2d+0x44>)
 80015cc:	1a1b      	subs	r3, r3, r0
 80015ce:	055b      	lsls	r3, r3, #21
 80015d0:	0d5b      	lsrs	r3, r3, #21
 80015d2:	280a      	cmp	r0, #10
 80015d4:	dc0f      	bgt.n	80015f6 <__aeabi_ui2d+0x36>
 80015d6:	220b      	movs	r2, #11
 80015d8:	0021      	movs	r1, r4
 80015da:	1a12      	subs	r2, r2, r0
 80015dc:	40d1      	lsrs	r1, r2
 80015de:	3015      	adds	r0, #21
 80015e0:	030a      	lsls	r2, r1, #12
 80015e2:	4084      	lsls	r4, r0
 80015e4:	0b12      	lsrs	r2, r2, #12
 80015e6:	e001      	b.n	80015ec <__aeabi_ui2d+0x2c>
 80015e8:	2300      	movs	r3, #0
 80015ea:	2200      	movs	r2, #0
 80015ec:	051b      	lsls	r3, r3, #20
 80015ee:	4313      	orrs	r3, r2
 80015f0:	0020      	movs	r0, r4
 80015f2:	0019      	movs	r1, r3
 80015f4:	bd10      	pop	{r4, pc}
 80015f6:	0022      	movs	r2, r4
 80015f8:	380b      	subs	r0, #11
 80015fa:	4082      	lsls	r2, r0
 80015fc:	0312      	lsls	r2, r2, #12
 80015fe:	2400      	movs	r4, #0
 8001600:	0b12      	lsrs	r2, r2, #12
 8001602:	e7f3      	b.n	80015ec <__aeabi_ui2d+0x2c>
 8001604:	0000041e 	.word	0x0000041e

08001608 <__clzsi2>:
 8001608:	211c      	movs	r1, #28
 800160a:	2301      	movs	r3, #1
 800160c:	041b      	lsls	r3, r3, #16
 800160e:	4298      	cmp	r0, r3
 8001610:	d301      	bcc.n	8001616 <__clzsi2+0xe>
 8001612:	0c00      	lsrs	r0, r0, #16
 8001614:	3910      	subs	r1, #16
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	4298      	cmp	r0, r3
 800161a:	d301      	bcc.n	8001620 <__clzsi2+0x18>
 800161c:	0a00      	lsrs	r0, r0, #8
 800161e:	3908      	subs	r1, #8
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	4298      	cmp	r0, r3
 8001624:	d301      	bcc.n	800162a <__clzsi2+0x22>
 8001626:	0900      	lsrs	r0, r0, #4
 8001628:	3904      	subs	r1, #4
 800162a:	a202      	add	r2, pc, #8	@ (adr r2, 8001634 <__clzsi2+0x2c>)
 800162c:	5c10      	ldrb	r0, [r2, r0]
 800162e:	1840      	adds	r0, r0, r1
 8001630:	4770      	bx	lr
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	02020304 	.word	0x02020304
 8001638:	01010101 	.word	0x01010101
	...

08001644 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	210f      	movs	r1, #15
 8001652:	187b      	adds	r3, r7, r1
 8001654:	1c02      	adds	r2, r0, #0
 8001656:	701a      	strb	r2, [r3, #0]
  if (idx < maxlen) {
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d205      	bcs.n	800166c <_out_buffer+0x28>
    ((char*)buffer)[idx] = character;
 8001660:	68ba      	ldr	r2, [r7, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	18d3      	adds	r3, r2, r3
 8001666:	187a      	adds	r2, r7, r1
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	701a      	strb	r2, [r3, #0]
  }
}
 800166c:	46c0      	nop			@ (mov r8, r8)
 800166e:	46bd      	mov	sp, r7
 8001670:	b004      	add	sp, #16
 8001672:	bd80      	pop	{r7, pc}

08001674 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	603b      	str	r3, [r7, #0]
 8001680:	230f      	movs	r3, #15
 8001682:	18fb      	adds	r3, r7, r3
 8001684:	1c02      	adds	r2, r0, #0
 8001686:	701a      	strb	r2, [r3, #0]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001688:	46c0      	nop			@ (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	b004      	add	sp, #16
 800168e:	bd80      	pop	{r7, pc}

08001690 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	210f      	movs	r1, #15
 800169e:	187b      	adds	r3, r7, r1
 80016a0:	1c02      	adds	r2, r0, #0
 80016a2:	701a      	strb	r2, [r3, #0]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80016a4:	000a      	movs	r2, r1
 80016a6:	18bb      	adds	r3, r7, r2
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <_out_char+0x28>
    _putchar(character);
 80016ae:	18bb      	adds	r3, r7, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	0018      	movs	r0, r3
 80016b4:	f002 f818 	bl	80036e8 <_putchar>
  }
}
 80016b8:	46c0      	nop			@ (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b004      	add	sp, #16
 80016be:	bd80      	pop	{r7, pc}

080016c0 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	e002      	b.n	80016d6 <_strnlen_s+0x16>
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	3301      	adds	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d004      	beq.n	80016e8 <_strnlen_s+0x28>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	1e5a      	subs	r2, r3, #1
 80016e2:	603a      	str	r2, [r7, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f3      	bne.n	80016d0 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	1ad3      	subs	r3, r2, r3
}
 80016ee:	0018      	movs	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b004      	add	sp, #16
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	0002      	movs	r2, r0
 80016fe:	1dfb      	adds	r3, r7, #7
 8001700:	701a      	strb	r2, [r3, #0]
  return (ch >= '0') && (ch <= '9');
 8001702:	1dfb      	adds	r3, r7, #7
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b2f      	cmp	r3, #47	@ 0x2f
 8001708:	d905      	bls.n	8001716 <_is_digit+0x20>
 800170a:	1dfb      	adds	r3, r7, #7
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b39      	cmp	r3, #57	@ 0x39
 8001710:	d801      	bhi.n	8001716 <_is_digit+0x20>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <_is_digit+0x22>
 8001716:	2300      	movs	r3, #0
 8001718:	1c1a      	adds	r2, r3, #0
 800171a:	2301      	movs	r3, #1
 800171c:	4013      	ands	r3, r2
 800171e:	b2db      	uxtb	r3, r3
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b002      	add	sp, #8
 8001726:	bd80      	pop	{r7, pc}

08001728 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001734:	e00e      	b.n	8001754 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	0013      	movs	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	189b      	adds	r3, r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	0018      	movs	r0, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	1c59      	adds	r1, r3, #1
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6011      	str	r1, [r2, #0]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	18c3      	adds	r3, r0, r3
 8001750:	3b30      	subs	r3, #48	@ 0x30
 8001752:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	0018      	movs	r0, r3
 800175c:	f7ff ffcb 	bl	80016f6 <_is_digit>
 8001760:	1e03      	subs	r3, r0, #0
 8001762:	d1e8      	bne.n	8001736 <_atoi+0xe>
  }
  return i;
 8001764:	68fb      	ldr	r3, [r7, #12]
}
 8001766:	0018      	movs	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	b004      	add	sp, #16
 800176c:	bd80      	pop	{r7, pc}

0800176e <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800176e:	b590      	push	{r4, r7, lr}
 8001770:	b087      	sub	sp, #28
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	613b      	str	r3, [r7, #16]
  int i;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001782:	2202      	movs	r2, #2
 8001784:	4013      	ands	r3, r2
 8001786:	d124      	bne.n	80017d2 <_out_rev+0x64>
 8001788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800178a:	2201      	movs	r2, #1
 800178c:	4013      	ands	r3, r2
 800178e:	d120      	bne.n	80017d2 <_out_rev+0x64>
    for (i = len; i < width; i++) {
 8001790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e00a      	b.n	80017ac <_out_rev+0x3e>
      out(' ', buffer, idx++, maxlen);
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	1c53      	adds	r3, r2, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68b9      	ldr	r1, [r7, #8]
 80017a0:	68fc      	ldr	r4, [r7, #12]
 80017a2:	2020      	movs	r0, #32
 80017a4:	47a0      	blx	r4
    for (i = len; i < width; i++) {
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8f0      	bhi.n	8001796 <_out_rev+0x28>
    }
  }

  // reverse string
  while (len) {
 80017b4:	e00d      	b.n	80017d2 <_out_rev+0x64>
    out(buf[--len], buffer, idx++, maxlen);
 80017b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017b8:	3b01      	subs	r3, #1
 80017ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80017be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017c0:	18d3      	adds	r3, r2, r3
 80017c2:	7818      	ldrb	r0, [r3, #0]
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	1c53      	adds	r3, r2, #1
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	68fc      	ldr	r4, [r7, #12]
 80017d0:	47a0      	blx	r4
  while (len) {
 80017d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1ee      	bne.n	80017b6 <_out_rev+0x48>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80017d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017da:	2202      	movs	r2, #2
 80017dc:	4013      	ands	r3, r2
 80017de:	d00e      	beq.n	80017fe <_out_rev+0x90>
    while (idx - start_idx < width) {
 80017e0:	e007      	b.n	80017f2 <_out_rev+0x84>
      out(' ', buffer, idx++, maxlen);
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	1c53      	adds	r3, r2, #1
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68b9      	ldr	r1, [r7, #8]
 80017ec:	68fc      	ldr	r4, [r7, #12]
 80017ee:	2020      	movs	r0, #32
 80017f0:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d8f1      	bhi.n	80017e2 <_out_rev+0x74>
    }
  }

  return idx;
 80017fe:	687b      	ldr	r3, [r7, #4]
}
 8001800:	0018      	movs	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	b007      	add	sp, #28
 8001806:	bd90      	pop	{r4, r7, pc}

08001808 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b089      	sub	sp, #36	@ 0x24
 800180c:	af04      	add	r7, sp, #16
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001818:	2202      	movs	r2, #2
 800181a:	4013      	ands	r3, r2
 800181c:	d134      	bne.n	8001888 <_ntoa_format+0x80>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800181e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001820:	2b00      	cmp	r3, #0
 8001822:	d017      	beq.n	8001854 <_ntoa_format+0x4c>
 8001824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001826:	2201      	movs	r2, #1
 8001828:	4013      	ands	r3, r2
 800182a:	d013      	beq.n	8001854 <_ntoa_format+0x4c>
 800182c:	2328      	movs	r3, #40	@ 0x28
 800182e:	18fb      	adds	r3, r7, r3
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d103      	bne.n	800183e <_ntoa_format+0x36>
 8001836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001838:	220c      	movs	r2, #12
 800183a:	4013      	ands	r3, r2
 800183c:	d00a      	beq.n	8001854 <_ntoa_format+0x4c>
      width--;
 800183e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001840:	3b01      	subs	r3, #1
 8001842:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001844:	e006      	b.n	8001854 <_ntoa_format+0x4c>
      buf[len++] = '0';
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	627a      	str	r2, [r7, #36]	@ 0x24
 800184c:	6a3a      	ldr	r2, [r7, #32]
 800184e:	18d3      	adds	r3, r2, r3
 8001850:	2230      	movs	r2, #48	@ 0x30
 8001852:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001858:	429a      	cmp	r2, r3
 800185a:	d20a      	bcs.n	8001872 <_ntoa_format+0x6a>
 800185c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185e:	2b1f      	cmp	r3, #31
 8001860:	d9f1      	bls.n	8001846 <_ntoa_format+0x3e>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001862:	e006      	b.n	8001872 <_ntoa_format+0x6a>
      buf[len++] = '0';
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	627a      	str	r2, [r7, #36]	@ 0x24
 800186a:	6a3a      	ldr	r2, [r7, #32]
 800186c:	18d3      	adds	r3, r2, r3
 800186e:	2230      	movs	r2, #48	@ 0x30
 8001870:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001874:	2201      	movs	r2, #1
 8001876:	4013      	ands	r3, r2
 8001878:	d006      	beq.n	8001888 <_ntoa_format+0x80>
 800187a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800187c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800187e:	429a      	cmp	r2, r3
 8001880:	d202      	bcs.n	8001888 <_ntoa_format+0x80>
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	2b1f      	cmp	r3, #31
 8001886:	d9ed      	bls.n	8001864 <_ntoa_format+0x5c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8001888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800188a:	2210      	movs	r2, #16
 800188c:	4013      	ands	r3, r2
 800188e:	d056      	beq.n	800193e <_ntoa_format+0x136>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001890:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001892:	2380      	movs	r3, #128	@ 0x80
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4013      	ands	r3, r2
 8001898:	d116      	bne.n	80018c8 <_ntoa_format+0xc0>
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	2b00      	cmp	r3, #0
 800189e:	d013      	beq.n	80018c8 <_ntoa_format+0xc0>
 80018a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d003      	beq.n	80018b0 <_ntoa_format+0xa8>
 80018a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d10b      	bne.n	80018c8 <_ntoa_format+0xc0>
      len--;
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	3b01      	subs	r3, #1
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (len && (base == 16U)) {
 80018b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <_ntoa_format+0xc0>
 80018bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018be:	2b10      	cmp	r3, #16
 80018c0:	d102      	bne.n	80018c8 <_ntoa_format+0xc0>
        len--;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	3b01      	subs	r3, #1
 80018c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80018c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d10e      	bne.n	80018ec <_ntoa_format+0xe4>
 80018ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018d0:	2220      	movs	r2, #32
 80018d2:	4013      	ands	r3, r2
 80018d4:	d10a      	bne.n	80018ec <_ntoa_format+0xe4>
 80018d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d8:	2b1f      	cmp	r3, #31
 80018da:	d807      	bhi.n	80018ec <_ntoa_format+0xe4>
      buf[len++] = 'x';
 80018dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80018e2:	6a3a      	ldr	r2, [r7, #32]
 80018e4:	18d3      	adds	r3, r2, r3
 80018e6:	2278      	movs	r2, #120	@ 0x78
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	e01e      	b.n	800192a <_ntoa_format+0x122>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80018ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ee:	2b10      	cmp	r3, #16
 80018f0:	d10e      	bne.n	8001910 <_ntoa_format+0x108>
 80018f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80018f4:	2220      	movs	r2, #32
 80018f6:	4013      	ands	r3, r2
 80018f8:	d00a      	beq.n	8001910 <_ntoa_format+0x108>
 80018fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018fc:	2b1f      	cmp	r3, #31
 80018fe:	d807      	bhi.n	8001910 <_ntoa_format+0x108>
      buf[len++] = 'X';
 8001900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001902:	1c5a      	adds	r2, r3, #1
 8001904:	627a      	str	r2, [r7, #36]	@ 0x24
 8001906:	6a3a      	ldr	r2, [r7, #32]
 8001908:	18d3      	adds	r3, r2, r3
 800190a:	2258      	movs	r2, #88	@ 0x58
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	e00c      	b.n	800192a <_ntoa_format+0x122>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001912:	2b02      	cmp	r3, #2
 8001914:	d109      	bne.n	800192a <_ntoa_format+0x122>
 8001916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001918:	2b1f      	cmp	r3, #31
 800191a:	d806      	bhi.n	800192a <_ntoa_format+0x122>
      buf[len++] = 'b';
 800191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	627a      	str	r2, [r7, #36]	@ 0x24
 8001922:	6a3a      	ldr	r2, [r7, #32]
 8001924:	18d3      	adds	r3, r2, r3
 8001926:	2262      	movs	r2, #98	@ 0x62
 8001928:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192c:	2b1f      	cmp	r3, #31
 800192e:	d806      	bhi.n	800193e <_ntoa_format+0x136>
      buf[len++] = '0';
 8001930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	627a      	str	r2, [r7, #36]	@ 0x24
 8001936:	6a3a      	ldr	r2, [r7, #32]
 8001938:	18d3      	adds	r3, r2, r3
 800193a:	2230      	movs	r2, #48	@ 0x30
 800193c:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	2b1f      	cmp	r3, #31
 8001942:	d823      	bhi.n	800198c <_ntoa_format+0x184>
    if (negative) {
 8001944:	2328      	movs	r3, #40	@ 0x28
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d007      	beq.n	800195e <_ntoa_format+0x156>
      buf[len++] = '-';
 800194e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	627a      	str	r2, [r7, #36]	@ 0x24
 8001954:	6a3a      	ldr	r2, [r7, #32]
 8001956:	18d3      	adds	r3, r2, r3
 8001958:	222d      	movs	r2, #45	@ 0x2d
 800195a:	701a      	strb	r2, [r3, #0]
 800195c:	e016      	b.n	800198c <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_PLUS) {
 800195e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001960:	2204      	movs	r2, #4
 8001962:	4013      	ands	r3, r2
 8001964:	d007      	beq.n	8001976 <_ntoa_format+0x16e>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	627a      	str	r2, [r7, #36]	@ 0x24
 800196c:	6a3a      	ldr	r2, [r7, #32]
 800196e:	18d3      	adds	r3, r2, r3
 8001970:	222b      	movs	r2, #43	@ 0x2b
 8001972:	701a      	strb	r2, [r3, #0]
 8001974:	e00a      	b.n	800198c <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_SPACE) {
 8001976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001978:	2208      	movs	r2, #8
 800197a:	4013      	ands	r3, r2
 800197c:	d006      	beq.n	800198c <_ntoa_format+0x184>
      buf[len++] = ' ';
 800197e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	627a      	str	r2, [r7, #36]	@ 0x24
 8001984:	6a3a      	ldr	r2, [r7, #32]
 8001986:	18d3      	adds	r3, r2, r3
 8001988:	2220      	movs	r2, #32
 800198a:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800198c:	683c      	ldr	r4, [r7, #0]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001996:	9303      	str	r3, [sp, #12]
 8001998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800199a:	9302      	str	r3, [sp, #8]
 800199c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	0023      	movs	r3, r4
 80019a6:	f7ff fee2 	bl	800176e <_out_rev>
 80019aa:	0003      	movs	r3, r0
}
 80019ac:	0018      	movs	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b005      	add	sp, #20
 80019b2:	bd90      	pop	{r4, r7, pc}

080019b4 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b097      	sub	sp, #92	@ 0x5c
 80019b8:	af08      	add	r7, sp, #32
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	637b      	str	r3, [r7, #52]	@ 0x34

  // no hash for 0 values
  if (!value) {
 80019c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d103      	bne.n	80019d4 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80019cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019ce:	2210      	movs	r2, #16
 80019d0:	4393      	bics	r3, r2
 80019d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80019d4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80019d6:	2380      	movs	r3, #128	@ 0x80
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4013      	ands	r3, r2
 80019dc:	d002      	beq.n	80019e4 <_ntoa_long+0x30>
 80019de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d033      	beq.n	8001a4c <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 80019e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7fe fc21 	bl	8000230 <__aeabi_uidivmod>
 80019ee:	000b      	movs	r3, r1
 80019f0:	001a      	movs	r2, r3
 80019f2:	2133      	movs	r1, #51	@ 0x33
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80019f8:	000a      	movs	r2, r1
 80019fa:	18bb      	adds	r3, r7, r2
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b09      	cmp	r3, #9
 8001a00:	d804      	bhi.n	8001a0c <_ntoa_long+0x58>
 8001a02:	18bb      	adds	r3, r7, r2
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	3330      	adds	r3, #48	@ 0x30
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	e00d      	b.n	8001a28 <_ntoa_long+0x74>
 8001a0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a0e:	2220      	movs	r2, #32
 8001a10:	4013      	ands	r3, r2
 8001a12:	d001      	beq.n	8001a18 <_ntoa_long+0x64>
 8001a14:	2341      	movs	r3, #65	@ 0x41
 8001a16:	e000      	b.n	8001a1a <_ntoa_long+0x66>
 8001a18:	2361      	movs	r3, #97	@ 0x61
 8001a1a:	2233      	movs	r2, #51	@ 0x33
 8001a1c:	18ba      	adds	r2, r7, r2
 8001a1e:	7812      	ldrb	r2, [r2, #0]
 8001a20:	189b      	adds	r3, r3, r2
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3b0a      	subs	r3, #10
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a2a:	1c59      	adds	r1, r3, #1
 8001a2c:	6379      	str	r1, [r7, #52]	@ 0x34
 8001a2e:	2110      	movs	r1, #16
 8001a30:	1879      	adds	r1, r7, r1
 8001a32:	54ca      	strb	r2, [r1, r3]
      value /= base;
 8001a34:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001a36:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001a38:	f7fe fb74 	bl	8000124 <__udivsi3>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001a40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d002      	beq.n	8001a4c <_ntoa_long+0x98>
 8001a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a48:	2b1f      	cmp	r3, #31
 8001a4a:	d9cb      	bls.n	80019e4 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001a4c:	683c      	ldr	r4, [r7, #0]
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a56:	9306      	str	r3, [sp, #24]
 8001a58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a5a:	9305      	str	r3, [sp, #20]
 8001a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001a5e:	9304      	str	r3, [sp, #16]
 8001a60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a62:	9303      	str	r3, [sp, #12]
 8001a64:	234c      	movs	r3, #76	@ 0x4c
 8001a66:	18fb      	adds	r3, r7, r3
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	9302      	str	r3, [sp, #8]
 8001a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	2310      	movs	r3, #16
 8001a72:	18fb      	adds	r3, r7, r3
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	0023      	movs	r3, r4
 8001a78:	f7ff fec6 	bl	8001808 <_ntoa_format>
 8001a7c:	0003      	movs	r3, r0
}
 8001a7e:	0018      	movs	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b00f      	add	sp, #60	@ 0x3c
 8001a84:	bd90      	pop	{r4, r7, pc}
	...

08001a88 <_ftoa>:

// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8a:	b09b      	sub	sp, #108	@ 0x6c
 8001a8c:	af04      	add	r7, sp, #16
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
 8001a94:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	657b      	str	r3, [r7, #84]	@ 0x54
  double diff = 0.0;
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8001aa2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001aa4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001aa6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001aa8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001aaa:	f7fe fcc1 	bl	8000430 <__aeabi_dcmpeq>
 8001aae:	1e03      	subs	r3, r0, #0
 8001ab0:	d112      	bne.n	8001ad8 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8001ab2:	683c      	ldr	r4, [r7, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	68b9      	ldr	r1, [r7, #8]
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	2380      	movs	r3, #128	@ 0x80
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	9303      	str	r3, [sp, #12]
 8001ac2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ac4:	9302      	str	r3, [sp, #8]
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	4bc8      	ldr	r3, [pc, #800]	@ (8001dec <_ftoa+0x364>)
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	0023      	movs	r3, r4
 8001ad0:	f7ff fe4d 	bl	800176e <_out_rev>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	e1e5      	b.n	8001ea4 <_ftoa+0x41c>
  if (value < -DBL_MAX)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	4252      	negs	r2, r2
 8001adc:	4bc4      	ldr	r3, [pc, #784]	@ (8001df0 <_ftoa+0x368>)
 8001ade:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001ae0:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001ae2:	f7fe fcab 	bl	800043c <__aeabi_dcmplt>
 8001ae6:	1e03      	subs	r3, r0, #0
 8001ae8:	d012      	beq.n	8001b10 <_ftoa+0x88>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001aea:	683c      	ldr	r4, [r7, #0]
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	2380      	movs	r3, #128	@ 0x80
 8001af4:	18fb      	adds	r3, r7, r3
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	9303      	str	r3, [sp, #12]
 8001afa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001afc:	9302      	str	r3, [sp, #8]
 8001afe:	2304      	movs	r3, #4
 8001b00:	9301      	str	r3, [sp, #4]
 8001b02:	4bbc      	ldr	r3, [pc, #752]	@ (8001df4 <_ftoa+0x36c>)
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	0023      	movs	r3, r4
 8001b08:	f7ff fe31 	bl	800176e <_out_rev>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	e1c9      	b.n	8001ea4 <_ftoa+0x41c>
  if (value > DBL_MAX)
 8001b10:	2201      	movs	r2, #1
 8001b12:	4252      	negs	r2, r2
 8001b14:	4bb8      	ldr	r3, [pc, #736]	@ (8001df8 <_ftoa+0x370>)
 8001b16:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001b18:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001b1a:	f7fe fca3 	bl	8000464 <__aeabi_dcmpgt>
 8001b1e:	1e03      	subs	r3, r0, #0
 8001b20:	d024      	beq.n	8001b6c <_ftoa+0xe4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001b22:	2380      	movs	r3, #128	@ 0x80
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2204      	movs	r2, #4
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d001      	beq.n	8001b32 <_ftoa+0xaa>
 8001b2e:	4bb3      	ldr	r3, [pc, #716]	@ (8001dfc <_ftoa+0x374>)
 8001b30:	e000      	b.n	8001b34 <_ftoa+0xac>
 8001b32:	4bb3      	ldr	r3, [pc, #716]	@ (8001e00 <_ftoa+0x378>)
 8001b34:	2280      	movs	r2, #128	@ 0x80
 8001b36:	18ba      	adds	r2, r7, r2
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	2104      	movs	r1, #4
 8001b3c:	400a      	ands	r2, r1
 8001b3e:	d001      	beq.n	8001b44 <_ftoa+0xbc>
 8001b40:	2204      	movs	r2, #4
 8001b42:	e000      	b.n	8001b46 <_ftoa+0xbe>
 8001b44:	2203      	movs	r2, #3
 8001b46:	683e      	ldr	r6, [r7, #0]
 8001b48:	687d      	ldr	r5, [r7, #4]
 8001b4a:	68bc      	ldr	r4, [r7, #8]
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	2180      	movs	r1, #128	@ 0x80
 8001b50:	1879      	adds	r1, r7, r1
 8001b52:	6809      	ldr	r1, [r1, #0]
 8001b54:	9103      	str	r1, [sp, #12]
 8001b56:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001b58:	9102      	str	r1, [sp, #8]
 8001b5a:	9201      	str	r2, [sp, #4]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	0033      	movs	r3, r6
 8001b60:	002a      	movs	r2, r5
 8001b62:	0021      	movs	r1, r4
 8001b64:	f7ff fe03 	bl	800176e <_out_rev>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	e19b      	b.n	8001ea4 <_ftoa+0x41c>
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
  }

  // test for negative
  bool negative = false;
 8001b6c:	2453      	movs	r4, #83	@ 0x53
 8001b6e:	193b      	adds	r3, r7, r4
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
  if (value < 0) {
 8001b74:	2200      	movs	r2, #0
 8001b76:	2300      	movs	r3, #0
 8001b78:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001b7a:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001b7c:	f7fe fc5e 	bl	800043c <__aeabi_dcmplt>
 8001b80:	1e03      	subs	r3, r0, #0
 8001b82:	d00c      	beq.n	8001b9e <_ftoa+0x116>
    negative = true;
 8001b84:	193b      	adds	r3, r7, r4
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
    value = 0 - value;
 8001b8a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001b8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b8e:	2000      	movs	r0, #0
 8001b90:	2100      	movs	r1, #0
 8001b92:	f7ff f8a1 	bl	8000cd8 <__aeabi_dsub>
 8001b96:	0002      	movs	r2, r0
 8001b98:	000b      	movs	r3, r1
 8001b9a:	673a      	str	r2, [r7, #112]	@ 0x70
 8001b9c:	677b      	str	r3, [r7, #116]	@ 0x74
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001b9e:	2380      	movs	r3, #128	@ 0x80
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2380      	movs	r3, #128	@ 0x80
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d10c      	bne.n	8001bc6 <_ftoa+0x13e>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001bac:	2306      	movs	r3, #6
 8001bae:	67bb      	str	r3, [r7, #120]	@ 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001bb0:	e009      	b.n	8001bc6 <_ftoa+0x13e>
    buf[len++] = '0';
 8001bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	657a      	str	r2, [r7, #84]	@ 0x54
 8001bb8:	2210      	movs	r2, #16
 8001bba:	18ba      	adds	r2, r7, r2
 8001bbc:	2130      	movs	r1, #48	@ 0x30
 8001bbe:	54d1      	strb	r1, [r2, r3]
    prec--;
 8001bc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	67bb      	str	r3, [r7, #120]	@ 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc8:	2b1f      	cmp	r3, #31
 8001bca:	d802      	bhi.n	8001bd2 <_ftoa+0x14a>
 8001bcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bce:	2b09      	cmp	r3, #9
 8001bd0:	d8ef      	bhi.n	8001bb2 <_ftoa+0x12a>
  }

  int whole = (int)value;
 8001bd2:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001bd4:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001bd6:	f7ff fc89 	bl	80014ec <__aeabi_d2iz>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  double tmp = (value - whole) * pow10[prec];
 8001bde:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001be0:	f7ff fcc0 	bl	8001564 <__aeabi_i2d>
 8001be4:	0002      	movs	r2, r0
 8001be6:	000b      	movs	r3, r1
 8001be8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001bea:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001bec:	f7ff f874 	bl	8000cd8 <__aeabi_dsub>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	000b      	movs	r3, r1
 8001bf4:	0010      	movs	r0, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	4a82      	ldr	r2, [pc, #520]	@ (8001e04 <_ftoa+0x37c>)
 8001bfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	18d3      	adds	r3, r2, r3
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f7fe fd82 	bl	800070c <__aeabi_dmul>
 8001c08:	0002      	movs	r2, r0
 8001c0a:	000b      	movs	r3, r1
 8001c0c:	633a      	str	r2, [r7, #48]	@ 0x30
 8001c0e:	637b      	str	r3, [r7, #52]	@ 0x34
  unsigned long frac = (unsigned long)tmp;
 8001c10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001c12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001c14:	f7fe fc3a 	bl	800048c <__aeabi_d2uiz>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  diff = tmp - frac;
 8001c1c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001c1e:	f7ff fccf 	bl	80015c0 <__aeabi_ui2d>
 8001c22:	0002      	movs	r2, r0
 8001c24:	000b      	movs	r3, r1
 8001c26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001c28:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001c2a:	f7ff f855 	bl	8000cd8 <__aeabi_dsub>
 8001c2e:	0002      	movs	r2, r0
 8001c30:	000b      	movs	r3, r1
 8001c32:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001c34:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (diff > 0.5) {
 8001c36:	2200      	movs	r2, #0
 8001c38:	4b73      	ldr	r3, [pc, #460]	@ (8001e08 <_ftoa+0x380>)
 8001c3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001c3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c3e:	f7fe fc11 	bl	8000464 <__aeabi_dcmpgt>
 8001c42:	1e03      	subs	r3, r0, #0
 8001c44:	d015      	beq.n	8001c72 <_ftoa+0x1ea>
    ++frac;
 8001c46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c48:	3301      	adds	r3, #1
 8001c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8001c4c:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001c4e:	f7ff fcb7 	bl	80015c0 <__aeabi_ui2d>
 8001c52:	4a6c      	ldr	r2, [pc, #432]	@ (8001e04 <_ftoa+0x37c>)
 8001c54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	18d3      	adds	r3, r2, r3
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f7fe fc0b 	bl	8000478 <__aeabi_dcmpge>
 8001c62:	1e03      	subs	r3, r0, #0
 8001c64:	d017      	beq.n	8001c96 <_ftoa+0x20e>
      frac = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	64bb      	str	r3, [r7, #72]	@ 0x48
      ++whole;
 8001c6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c70:	e011      	b.n	8001c96 <_ftoa+0x20e>
    }
  }
  else if (diff < 0.5) {
 8001c72:	2200      	movs	r2, #0
 8001c74:	4b64      	ldr	r3, [pc, #400]	@ (8001e08 <_ftoa+0x380>)
 8001c76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001c78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c7a:	f7fe fbdf 	bl	800043c <__aeabi_dcmplt>
 8001c7e:	1e03      	subs	r3, r0, #0
 8001c80:	d109      	bne.n	8001c96 <_ftoa+0x20e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8001c82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <_ftoa+0x208>
 8001c88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d002      	beq.n	8001c96 <_ftoa+0x20e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8001c90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c92:	3301      	adds	r3, #1
 8001c94:	64bb      	str	r3, [r7, #72]	@ 0x48
  }

  if (prec == 0U) {
 8001c96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d12e      	bne.n	8001cfa <_ftoa+0x272>
    diff = value - (double)whole;
 8001c9c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001c9e:	f7ff fc61 	bl	8001564 <__aeabi_i2d>
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	000b      	movs	r3, r1
 8001ca6:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001ca8:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8001caa:	f7ff f815 	bl	8000cd8 <__aeabi_dsub>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	000b      	movs	r3, r1
 8001cb2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	1c1c      	adds	r4, r3, #0
 8001cba:	2200      	movs	r2, #0
 8001cbc:	4b52      	ldr	r3, [pc, #328]	@ (8001e08 <_ftoa+0x380>)
 8001cbe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001cc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001cc2:	f7fe fbbb 	bl	800043c <__aeabi_dcmplt>
 8001cc6:	1e03      	subs	r3, r0, #0
 8001cc8:	d101      	bne.n	8001cce <_ftoa+0x246>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	1c1c      	adds	r4, r3, #0
 8001cce:	b2e3      	uxtb	r3, r4
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	4053      	eors	r3, r2
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d107      	bne.n	8001cea <_ftoa+0x262>
 8001cda:	2200      	movs	r2, #0
 8001cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8001e08 <_ftoa+0x380>)
 8001cde:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001ce0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001ce2:	f7fe fbbf 	bl	8000464 <__aeabi_dcmpgt>
 8001ce6:	1e03      	subs	r3, r0, #0
 8001ce8:	d045      	beq.n	8001d76 <_ftoa+0x2ee>
 8001cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cec:	2201      	movs	r2, #1
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d05b      	beq.n	8001daa <_ftoa+0x322>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8001cf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cf8:	e057      	b.n	8001daa <_ftoa+0x322>
    }
  }
  else {
    unsigned int count = prec;
 8001cfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001cfc:	647b      	str	r3, [r7, #68]	@ 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001cfe:	e01b      	b.n	8001d38 <_ftoa+0x2b0>
      --count;
 8001d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d02:	3b01      	subs	r3, #1
 8001d04:	647b      	str	r3, [r7, #68]	@ 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 8001d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d08:	210a      	movs	r1, #10
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f7fe fa90 	bl	8000230 <__aeabi_uidivmod>
 8001d10:	000b      	movs	r3, r1
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d16:	1c59      	adds	r1, r3, #1
 8001d18:	6579      	str	r1, [r7, #84]	@ 0x54
 8001d1a:	3230      	adds	r2, #48	@ 0x30
 8001d1c:	b2d1      	uxtb	r1, r2
 8001d1e:	2210      	movs	r2, #16
 8001d20:	18ba      	adds	r2, r7, r2
 8001d22:	54d1      	strb	r1, [r2, r3]
      if (!(frac /= 10U)) {
 8001d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d26:	210a      	movs	r1, #10
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7fe f9fb 	bl	8000124 <__udivsi3>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <_ftoa+0x2b8>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d3a:	2b1f      	cmp	r3, #31
 8001d3c:	d9e0      	bls.n	8001d00 <_ftoa+0x278>
 8001d3e:	e008      	b.n	8001d52 <_ftoa+0x2ca>
        break;
 8001d40:	46c0      	nop			@ (mov r8, r8)
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001d42:	e006      	b.n	8001d52 <_ftoa+0x2ca>
      buf[len++] = '0';
 8001d44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	657a      	str	r2, [r7, #84]	@ 0x54
 8001d4a:	2210      	movs	r2, #16
 8001d4c:	18ba      	adds	r2, r7, r2
 8001d4e:	2130      	movs	r1, #48	@ 0x30
 8001d50:	54d1      	strb	r1, [r2, r3]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8001d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d54:	2b1f      	cmp	r3, #31
 8001d56:	d804      	bhi.n	8001d62 <_ftoa+0x2da>
 8001d58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d5a:	1e5a      	subs	r2, r3, #1
 8001d5c:	647a      	str	r2, [r7, #68]	@ 0x44
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <_ftoa+0x2bc>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d64:	2b1f      	cmp	r3, #31
 8001d66:	d820      	bhi.n	8001daa <_ftoa+0x322>
      // add decimal
      buf[len++] = '.';
 8001d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	657a      	str	r2, [r7, #84]	@ 0x54
 8001d6e:	2210      	movs	r2, #16
 8001d70:	18ba      	adds	r2, r7, r2
 8001d72:	212e      	movs	r1, #46	@ 0x2e
 8001d74:	54d1      	strb	r1, [r2, r3]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001d76:	e018      	b.n	8001daa <_ftoa+0x322>
    buf[len++] = (char)(48 + (whole % 10));
 8001d78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d7a:	210a      	movs	r1, #10
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f7fe fb41 	bl	8000404 <__aeabi_idivmod>
 8001d82:	000b      	movs	r3, r1
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d88:	1c59      	adds	r1, r3, #1
 8001d8a:	6579      	str	r1, [r7, #84]	@ 0x54
 8001d8c:	3230      	adds	r2, #48	@ 0x30
 8001d8e:	b2d1      	uxtb	r1, r2
 8001d90:	2210      	movs	r2, #16
 8001d92:	18ba      	adds	r2, r7, r2
 8001d94:	54d1      	strb	r1, [r2, r3]
    if (!(whole /= 10)) {
 8001d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d98:	210a      	movs	r1, #10
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7fe fa4c 	bl	8000238 <__divsi3>
 8001da0:	0003      	movs	r3, r0
 8001da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <_ftoa+0x32a>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001daa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001dac:	2b1f      	cmp	r3, #31
 8001dae:	d9e3      	bls.n	8001d78 <_ftoa+0x2f0>
 8001db0:	e000      	b.n	8001db4 <_ftoa+0x32c>
      break;
 8001db2:	46c0      	nop			@ (mov r8, r8)
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8001db4:	2180      	movs	r1, #128	@ 0x80
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d133      	bne.n	8001e28 <_ftoa+0x3a0>
 8001dc0:	187b      	adds	r3, r7, r1
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d02e      	beq.n	8001e28 <_ftoa+0x3a0>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001dca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d024      	beq.n	8001e1a <_ftoa+0x392>
 8001dd0:	2353      	movs	r3, #83	@ 0x53
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d104      	bne.n	8001de4 <_ftoa+0x35c>
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	220c      	movs	r2, #12
 8001de0:	4013      	ands	r3, r2
 8001de2:	d01a      	beq.n	8001e1a <_ftoa+0x392>
      width--;
 8001de4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001de6:	3b01      	subs	r3, #1
 8001de8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001dea:	e016      	b.n	8001e1a <_ftoa+0x392>
 8001dec:	08009668 	.word	0x08009668
 8001df0:	ffefffff 	.word	0xffefffff
 8001df4:	0800966c 	.word	0x0800966c
 8001df8:	7fefffff 	.word	0x7fefffff
 8001dfc:	08009674 	.word	0x08009674
 8001e00:	0800967c 	.word	0x0800967c
 8001e04:	080097e8 	.word	0x080097e8
 8001e08:	3fe00000 	.word	0x3fe00000
      buf[len++] = '0';
 8001e0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	657a      	str	r2, [r7, #84]	@ 0x54
 8001e12:	2210      	movs	r2, #16
 8001e14:	18ba      	adds	r2, r7, r2
 8001e16:	2130      	movs	r1, #48	@ 0x30
 8001e18:	54d1      	strb	r1, [r2, r3]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8001e1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d202      	bcs.n	8001e28 <_ftoa+0x3a0>
 8001e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e24:	2b1f      	cmp	r3, #31
 8001e26:	d9f1      	bls.n	8001e0c <_ftoa+0x384>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8001e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e2a:	2b1f      	cmp	r3, #31
 8001e2c:	d827      	bhi.n	8001e7e <_ftoa+0x3f6>
    if (negative) {
 8001e2e:	2353      	movs	r3, #83	@ 0x53
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d007      	beq.n	8001e48 <_ftoa+0x3c0>
      buf[len++] = '-';
 8001e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	657a      	str	r2, [r7, #84]	@ 0x54
 8001e3e:	2210      	movs	r2, #16
 8001e40:	18ba      	adds	r2, r7, r2
 8001e42:	212d      	movs	r1, #45	@ 0x2d
 8001e44:	54d1      	strb	r1, [r2, r3]
 8001e46:	e01a      	b.n	8001e7e <_ftoa+0x3f6>
    }
    else if (flags & FLAGS_PLUS) {
 8001e48:	2380      	movs	r3, #128	@ 0x80
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2204      	movs	r2, #4
 8001e50:	4013      	ands	r3, r2
 8001e52:	d007      	beq.n	8001e64 <_ftoa+0x3dc>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	657a      	str	r2, [r7, #84]	@ 0x54
 8001e5a:	2210      	movs	r2, #16
 8001e5c:	18ba      	adds	r2, r7, r2
 8001e5e:	212b      	movs	r1, #43	@ 0x2b
 8001e60:	54d1      	strb	r1, [r2, r3]
 8001e62:	e00c      	b.n	8001e7e <_ftoa+0x3f6>
    }
    else if (flags & FLAGS_SPACE) {
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d006      	beq.n	8001e7e <_ftoa+0x3f6>
      buf[len++] = ' ';
 8001e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	657a      	str	r2, [r7, #84]	@ 0x54
 8001e76:	2210      	movs	r2, #16
 8001e78:	18ba      	adds	r2, r7, r2
 8001e7a:	2120      	movs	r1, #32
 8001e7c:	54d1      	strb	r1, [r2, r3]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001e7e:	683c      	ldr	r4, [r7, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	68b9      	ldr	r1, [r7, #8]
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	2380      	movs	r3, #128	@ 0x80
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	9303      	str	r3, [sp, #12]
 8001e8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e90:	9302      	str	r3, [sp, #8]
 8001e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	2310      	movs	r3, #16
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	0023      	movs	r3, r4
 8001e9e:	f7ff fc66 	bl	800176e <_out_rev>
 8001ea2:	0003      	movs	r3, r0
}
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b017      	add	sp, #92	@ 0x5c
 8001eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001eac <_vsnprintf>:

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8001eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eae:	b099      	sub	sp, #100	@ 0x64
 8001eb0:	af06      	add	r7, sp, #24
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!buffer) {
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d000      	beq.n	8001ec6 <_vsnprintf+0x1a>
 8001ec4:	e327      	b.n	8002516 <_vsnprintf+0x66a>
    // use null output function
    out = _out_null;
 8001ec6:	4baa      	ldr	r3, [pc, #680]	@ (8002170 <_vsnprintf+0x2c4>)
 8001ec8:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 8001eca:	e324      	b.n	8002516 <_vsnprintf+0x66a>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b25      	cmp	r3, #37	@ 0x25
 8001ed2:	d00c      	beq.n	8001eee <_vsnprintf+0x42>
      // no
      out(*format, buffer, idx++, maxlen);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	7818      	ldrb	r0, [r3, #0]
 8001ed8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001eda:	1c53      	adds	r3, r2, #1
 8001edc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	68fc      	ldr	r4, [r7, #12]
 8001ee4:	47a0      	blx	r4
      format++;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	603b      	str	r3, [r7, #0]
      continue;
 8001eec:	e313      	b.n	8002516 <_vsnprintf+0x66a>
    }
    else {
      // yes, evaluate it
      format++;
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	647b      	str	r3, [r7, #68]	@ 0x44
    do {
      switch (*format) {
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	3b20      	subs	r3, #32
 8001efe:	2b10      	cmp	r3, #16
 8001f00:	d836      	bhi.n	8001f70 <_vsnprintf+0xc4>
 8001f02:	009a      	lsls	r2, r3, #2
 8001f04:	4b9b      	ldr	r3, [pc, #620]	@ (8002174 <_vsnprintf+0x2c8>)
 8001f06:	18d3      	adds	r3, r2, r3
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8001f0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f0e:	2201      	movs	r2, #1
 8001f10:	4313      	orrs	r3, r2
 8001f12:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	603b      	str	r3, [r7, #0]
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f1e:	e02a      	b.n	8001f76 <_vsnprintf+0xca>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8001f20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f22:	2202      	movs	r2, #2
 8001f24:	4313      	orrs	r3, r2
 8001f26:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	603b      	str	r3, [r7, #0]
 8001f2e:	2301      	movs	r3, #1
 8001f30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f32:	e020      	b.n	8001f76 <_vsnprintf+0xca>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8001f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f36:	2204      	movs	r2, #4
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	2301      	movs	r3, #1
 8001f44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f46:	e016      	b.n	8001f76 <_vsnprintf+0xca>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8001f48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	603b      	str	r3, [r7, #0]
 8001f56:	2301      	movs	r3, #1
 8001f58:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f5a:	e00c      	b.n	8001f76 <_vsnprintf+0xca>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8001f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f5e:	2210      	movs	r2, #16
 8001f60:	4313      	orrs	r3, r2
 8001f62:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	3301      	adds	r3, #1
 8001f68:	603b      	str	r3, [r7, #0]
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f6e:	e002      	b.n	8001f76 <_vsnprintf+0xca>
        default :                                   n = 0U; break;
 8001f70:	2300      	movs	r3, #0
 8001f72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f74:	46c0      	nop			@ (mov r8, r8)
      }
    } while (n);
 8001f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1bd      	bne.n	8001ef8 <_vsnprintf+0x4c>

    // evaluate width field
    width = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (_is_digit(*format)) {
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	0018      	movs	r0, r3
 8001f86:	f7ff fbb6 	bl	80016f6 <_is_digit>
 8001f8a:	1e03      	subs	r3, r0, #0
 8001f8c:	d006      	beq.n	8001f9c <_vsnprintf+0xf0>
      width = _atoi(&format);
 8001f8e:	003b      	movs	r3, r7
 8001f90:	0018      	movs	r0, r3
 8001f92:	f7ff fbc9 	bl	8001728 <_atoi>
 8001f96:	0003      	movs	r3, r0
 8001f98:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f9a:	e018      	b.n	8001fce <_vsnprintf+0x122>
    }
    else if (*format == '*') {
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fa2:	d114      	bne.n	8001fce <_vsnprintf+0x122>
      const int w = va_arg(va, int);
 8001fa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fa6:	1d1a      	adds	r2, r3, #4
 8001fa8:	663a      	str	r2, [r7, #96]	@ 0x60
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	623b      	str	r3, [r7, #32]
      if (w < 0) {
 8001fae:	6a3b      	ldr	r3, [r7, #32]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	da07      	bge.n	8001fc4 <_vsnprintf+0x118>
        flags |= FLAGS_LEFT;    // reverse padding
 8001fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	647b      	str	r3, [r7, #68]	@ 0x44
        width = (unsigned int)-w;
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	425b      	negs	r3, r3
 8001fc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fc2:	e001      	b.n	8001fc8 <_vsnprintf+0x11c>
      }
      else {
        width = (unsigned int)w;
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	643b      	str	r3, [r7, #64]	@ 0x40
      }
      format++;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (*format == '.') {
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8001fd8:	d126      	bne.n	8002028 <_vsnprintf+0x17c>
      flags |= FLAGS_PRECISION;
 8001fda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fdc:	2280      	movs	r2, #128	@ 0x80
 8001fde:	00d2      	lsls	r2, r2, #3
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	647b      	str	r3, [r7, #68]	@ 0x44
      format++;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f7ff fb81 	bl	80016f6 <_is_digit>
 8001ff4:	1e03      	subs	r3, r0, #0
 8001ff6:	d006      	beq.n	8002006 <_vsnprintf+0x15a>
        precision = _atoi(&format);
 8001ff8:	003b      	movs	r3, r7
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f7ff fb94 	bl	8001728 <_atoi>
 8002000:	0003      	movs	r3, r0
 8002002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002004:	e010      	b.n	8002028 <_vsnprintf+0x17c>
      }
      else if (*format == '*') {
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b2a      	cmp	r3, #42	@ 0x2a
 800200c:	d10c      	bne.n	8002028 <_vsnprintf+0x17c>
        const int prec = (int)va_arg(va, int);
 800200e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002010:	1d1a      	adds	r2, r3, #4
 8002012:	663a      	str	r2, [r7, #96]	@ 0x60
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	61fb      	str	r3, [r7, #28]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	2b00      	cmp	r3, #0
 800201c:	da00      	bge.n	8002020 <_vsnprintf+0x174>
 800201e:	2300      	movs	r3, #0
 8002020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        format++;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	3301      	adds	r3, #1
 8002026:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	3b68      	subs	r3, #104	@ 0x68
 800202e:	2b12      	cmp	r3, #18
 8002030:	d847      	bhi.n	80020c2 <_vsnprintf+0x216>
 8002032:	009a      	lsls	r2, r3, #2
 8002034:	4b50      	ldr	r3, [pc, #320]	@ (8002178 <_vsnprintf+0x2cc>)
 8002036:	18d3      	adds	r3, r2, r3
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	469f      	mov	pc, r3
      case 'l' :
        flags |= FLAGS_LONG;
 800203c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800203e:	2280      	movs	r2, #128	@ 0x80
 8002040:	0052      	lsls	r2, r2, #1
 8002042:	4313      	orrs	r3, r2
 8002044:	647b      	str	r3, [r7, #68]	@ 0x44
        format++;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	3301      	adds	r3, #1
 800204a:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b6c      	cmp	r3, #108	@ 0x6c
 8002052:	d138      	bne.n	80020c6 <_vsnprintf+0x21a>
          flags |= FLAGS_LONG_LONG;
 8002054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002056:	2280      	movs	r2, #128	@ 0x80
 8002058:	0092      	lsls	r2, r2, #2
 800205a:	4313      	orrs	r3, r2
 800205c:	647b      	str	r3, [r7, #68]	@ 0x44
          format++;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	603b      	str	r3, [r7, #0]
        }
        break;
 8002064:	e02f      	b.n	80020c6 <_vsnprintf+0x21a>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002066:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002068:	2280      	movs	r2, #128	@ 0x80
 800206a:	4313      	orrs	r3, r2
 800206c:	647b      	str	r3, [r7, #68]	@ 0x44
        format++;
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	3301      	adds	r3, #1
 8002072:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b68      	cmp	r3, #104	@ 0x68
 800207a:	d126      	bne.n	80020ca <_vsnprintf+0x21e>
          flags |= FLAGS_CHAR;
 800207c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800207e:	2240      	movs	r2, #64	@ 0x40
 8002080:	4313      	orrs	r3, r2
 8002082:	647b      	str	r3, [r7, #68]	@ 0x44
          format++;
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	3301      	adds	r3, #1
 8002088:	603b      	str	r3, [r7, #0]
        }
        break;
 800208a:	e01e      	b.n	80020ca <_vsnprintf+0x21e>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800208c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800208e:	2280      	movs	r2, #128	@ 0x80
 8002090:	0052      	lsls	r2, r2, #1
 8002092:	4313      	orrs	r3, r2
 8002094:	647b      	str	r3, [r7, #68]	@ 0x44
        format++;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	3301      	adds	r3, #1
 800209a:	603b      	str	r3, [r7, #0]
        break;
 800209c:	e016      	b.n	80020cc <_vsnprintf+0x220>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800209e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020a0:	2280      	movs	r2, #128	@ 0x80
 80020a2:	0092      	lsls	r2, r2, #2
 80020a4:	4313      	orrs	r3, r2
 80020a6:	647b      	str	r3, [r7, #68]	@ 0x44
        format++;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	3301      	adds	r3, #1
 80020ac:	603b      	str	r3, [r7, #0]
        break;
 80020ae:	e00d      	b.n	80020cc <_vsnprintf+0x220>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80020b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020b2:	2280      	movs	r2, #128	@ 0x80
 80020b4:	0052      	lsls	r2, r2, #1
 80020b6:	4313      	orrs	r3, r2
 80020b8:	647b      	str	r3, [r7, #68]	@ 0x44
        format++;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	3301      	adds	r3, #1
 80020be:	603b      	str	r3, [r7, #0]
        break;
 80020c0:	e004      	b.n	80020cc <_vsnprintf+0x220>
      default :
        break;
 80020c2:	46c0      	nop			@ (mov r8, r8)
 80020c4:	e002      	b.n	80020cc <_vsnprintf+0x220>
        break;
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	e000      	b.n	80020cc <_vsnprintf+0x220>
        break;
 80020ca:	46c0      	nop			@ (mov r8, r8)
    }

    // evaluate specifier
    switch (*format) {
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b78      	cmp	r3, #120	@ 0x78
 80020d2:	dd00      	ble.n	80020d6 <_vsnprintf+0x22a>
 80020d4:	e212      	b.n	80024fc <_vsnprintf+0x650>
 80020d6:	2b69      	cmp	r3, #105	@ 0x69
 80020d8:	da0a      	bge.n	80020f0 <_vsnprintf+0x244>
 80020da:	2b25      	cmp	r3, #37	@ 0x25
 80020dc:	d100      	bne.n	80020e0 <_vsnprintf+0x234>
 80020de:	e201      	b.n	80024e4 <_vsnprintf+0x638>
 80020e0:	da00      	bge.n	80020e4 <_vsnprintf+0x238>
 80020e2:	e20b      	b.n	80024fc <_vsnprintf+0x650>
 80020e4:	2b66      	cmp	r3, #102	@ 0x66
 80020e6:	dd00      	ble.n	80020ea <_vsnprintf+0x23e>
 80020e8:	e208      	b.n	80024fc <_vsnprintf+0x650>
 80020ea:	2b46      	cmp	r3, #70	@ 0x46
 80020ec:	da1d      	bge.n	800212a <_vsnprintf+0x27e>
 80020ee:	e205      	b.n	80024fc <_vsnprintf+0x650>
 80020f0:	3b69      	subs	r3, #105	@ 0x69
 80020f2:	2201      	movs	r2, #1
 80020f4:	409a      	lsls	r2, r3
 80020f6:	0013      	movs	r3, r2
 80020f8:	4a20      	ldr	r2, [pc, #128]	@ (800217c <_vsnprintf+0x2d0>)
 80020fa:	401a      	ands	r2, r3
 80020fc:	1e51      	subs	r1, r2, #1
 80020fe:	418a      	sbcs	r2, r1
 8002100:	b2d2      	uxtb	r2, r2
 8002102:	2a00      	cmp	r2, #0
 8002104:	d11a      	bne.n	800213c <_vsnprintf+0x290>
 8002106:	2280      	movs	r2, #128	@ 0x80
 8002108:	401a      	ands	r2, r3
 800210a:	1e51      	subs	r1, r2, #1
 800210c:	418a      	sbcs	r2, r1
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	2a00      	cmp	r2, #0
 8002112:	d000      	beq.n	8002116 <_vsnprintf+0x26a>
 8002114:	e1dc      	b.n	80024d0 <_vsnprintf+0x624>
 8002116:	2280      	movs	r2, #128	@ 0x80
 8002118:	00d2      	lsls	r2, r2, #3
 800211a:	4013      	ands	r3, r2
 800211c:	1e5a      	subs	r2, r3, #1
 800211e:	4193      	sbcs	r3, r2
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d000      	beq.n	8002128 <_vsnprintf+0x27c>
 8002126:	e171      	b.n	800240c <_vsnprintf+0x560>
 8002128:	e1e8      	b.n	80024fc <_vsnprintf+0x650>
 800212a:	3b46      	subs	r3, #70	@ 0x46
 800212c:	2b20      	cmp	r3, #32
 800212e:	d900      	bls.n	8002132 <_vsnprintf+0x286>
 8002130:	e1e4      	b.n	80024fc <_vsnprintf+0x650>
 8002132:	009a      	lsls	r2, r3, #2
 8002134:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <_vsnprintf+0x2d4>)
 8002136:	18d3      	adds	r3, r2, r3
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	469f      	mov	pc, r3
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b78      	cmp	r3, #120	@ 0x78
 8002142:	d003      	beq.n	800214c <_vsnprintf+0x2a0>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b58      	cmp	r3, #88	@ 0x58
 800214a:	d102      	bne.n	8002152 <_vsnprintf+0x2a6>
          base = 16U;
 800214c:	2310      	movs	r3, #16
 800214e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002150:	e01e      	b.n	8002190 <_vsnprintf+0x2e4>
        }
        else if (*format == 'o') {
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b6f      	cmp	r3, #111	@ 0x6f
 8002158:	d102      	bne.n	8002160 <_vsnprintf+0x2b4>
          base =  8U;
 800215a:	2308      	movs	r3, #8
 800215c:	633b      	str	r3, [r7, #48]	@ 0x30
 800215e:	e017      	b.n	8002190 <_vsnprintf+0x2e4>
        }
        else if (*format == 'b') {
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b62      	cmp	r3, #98	@ 0x62
 8002166:	d10d      	bne.n	8002184 <_vsnprintf+0x2d8>
          base =  2U;
 8002168:	2302      	movs	r3, #2
 800216a:	633b      	str	r3, [r7, #48]	@ 0x30
 800216c:	e010      	b.n	8002190 <_vsnprintf+0x2e4>
 800216e:	46c0      	nop			@ (mov r8, r8)
 8002170:	08001675 	.word	0x08001675
 8002174:	080096d0 	.word	0x080096d0
 8002178:	08009714 	.word	0x08009714
 800217c:	00009041 	.word	0x00009041
 8002180:	08009760 	.word	0x08009760
        }
        else {
          base = 10U;
 8002184:	230a      	movs	r3, #10
 8002186:	633b      	str	r3, [r7, #48]	@ 0x30
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800218a:	2210      	movs	r2, #16
 800218c:	4393      	bics	r3, r2
 800218e:	647b      	str	r3, [r7, #68]	@ 0x44
        }
        // uppercase
        if (*format == 'X') {
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b58      	cmp	r3, #88	@ 0x58
 8002196:	d103      	bne.n	80021a0 <_vsnprintf+0x2f4>
          flags |= FLAGS_UPPERCASE;
 8002198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800219a:	2220      	movs	r2, #32
 800219c:	4313      	orrs	r3, r2
 800219e:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b69      	cmp	r3, #105	@ 0x69
 80021a6:	d007      	beq.n	80021b8 <_vsnprintf+0x30c>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b64      	cmp	r3, #100	@ 0x64
 80021ae:	d003      	beq.n	80021b8 <_vsnprintf+0x30c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80021b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021b2:	220c      	movs	r2, #12
 80021b4:	4393      	bics	r3, r2
 80021b6:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80021b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021ba:	2380      	movs	r3, #128	@ 0x80
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4013      	ands	r3, r2
 80021c0:	d003      	beq.n	80021ca <_vsnprintf+0x31e>
          flags &= ~FLAGS_ZEROPAD;
 80021c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021c4:	2201      	movs	r2, #1
 80021c6:	4393      	bics	r3, r2
 80021c8:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b69      	cmp	r3, #105	@ 0x69
 80021d0:	d003      	beq.n	80021da <_vsnprintf+0x32e>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b64      	cmp	r3, #100	@ 0x64
 80021d8:	d162      	bne.n	80022a0 <_vsnprintf+0x3f4>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80021da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021dc:	2380      	movs	r3, #128	@ 0x80
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4013      	ands	r3, r2
 80021e2:	d000      	beq.n	80021e6 <_vsnprintf+0x33a>
 80021e4:	e0ae      	b.n	8002344 <_vsnprintf+0x498>
          }
          else if (flags & FLAGS_LONG) {
 80021e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021e8:	2380      	movs	r3, #128	@ 0x80
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4013      	ands	r3, r2
 80021ee:	d021      	beq.n	8002234 <_vsnprintf+0x388>
            const long value = va_arg(va, long);
 80021f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021f2:	1d1a      	adds	r2, r3, #4
 80021f4:	663a      	str	r2, [r7, #96]	@ 0x60
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	613b      	str	r3, [r7, #16]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	17da      	asrs	r2, r3, #31
 80021fe:	189b      	adds	r3, r3, r2
 8002200:	4053      	eors	r3, r2
 8002202:	001e      	movs	r6, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	0fdb      	lsrs	r3, r3, #31
 8002208:	b2db      	uxtb	r3, r3
 800220a:	687d      	ldr	r5, [r7, #4]
 800220c:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002214:	9205      	str	r2, [sp, #20]
 8002216:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002218:	9204      	str	r2, [sp, #16]
 800221a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800221c:	9203      	str	r2, [sp, #12]
 800221e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002220:	9202      	str	r2, [sp, #8]
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	9600      	str	r6, [sp, #0]
 8002226:	002b      	movs	r3, r5
 8002228:	0022      	movs	r2, r4
 800222a:	f7ff fbc3 	bl	80019b4 <_ntoa_long>
 800222e:	0003      	movs	r3, r0
 8002230:	637b      	str	r3, [r7, #52]	@ 0x34
          if (flags & FLAGS_LONG_LONG) {
 8002232:	e087      	b.n	8002344 <_vsnprintf+0x498>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002236:	2240      	movs	r2, #64	@ 0x40
 8002238:	4013      	ands	r3, r2
 800223a:	d005      	beq.n	8002248 <_vsnprintf+0x39c>
 800223c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800223e:	1d1a      	adds	r2, r3, #4
 8002240:	663a      	str	r2, [r7, #96]	@ 0x60
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	b2db      	uxtb	r3, r3
 8002246:	e00d      	b.n	8002264 <_vsnprintf+0x3b8>
 8002248:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800224a:	2280      	movs	r2, #128	@ 0x80
 800224c:	4013      	ands	r3, r2
 800224e:	d005      	beq.n	800225c <_vsnprintf+0x3b0>
 8002250:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002252:	1d1a      	adds	r2, r3, #4
 8002254:	663a      	str	r2, [r7, #96]	@ 0x60
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	b21b      	sxth	r3, r3
 800225a:	e003      	b.n	8002264 <_vsnprintf+0x3b8>
 800225c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800225e:	1d1a      	adds	r2, r3, #4
 8002260:	663a      	str	r2, [r7, #96]	@ 0x60
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	617b      	str	r3, [r7, #20]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	17da      	asrs	r2, r3, #31
 800226a:	189b      	adds	r3, r3, r2
 800226c:	4053      	eors	r3, r2
 800226e:	001e      	movs	r6, r3
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	0fdb      	lsrs	r3, r3, #31
 8002274:	b2db      	uxtb	r3, r3
 8002276:	687d      	ldr	r5, [r7, #4]
 8002278:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 800227a:	68b9      	ldr	r1, [r7, #8]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002280:	9205      	str	r2, [sp, #20]
 8002282:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002284:	9204      	str	r2, [sp, #16]
 8002286:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002288:	9203      	str	r2, [sp, #12]
 800228a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800228c:	9202      	str	r2, [sp, #8]
 800228e:	9301      	str	r3, [sp, #4]
 8002290:	9600      	str	r6, [sp, #0]
 8002292:	002b      	movs	r3, r5
 8002294:	0022      	movs	r2, r4
 8002296:	f7ff fb8d 	bl	80019b4 <_ntoa_long>
 800229a:	0003      	movs	r3, r0
 800229c:	637b      	str	r3, [r7, #52]	@ 0x34
          if (flags & FLAGS_LONG_LONG) {
 800229e:	e051      	b.n	8002344 <_vsnprintf+0x498>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80022a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022a2:	2380      	movs	r3, #128	@ 0x80
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4013      	ands	r3, r2
 80022a8:	d14c      	bne.n	8002344 <_vsnprintf+0x498>
          }
          else if (flags & FLAGS_LONG) {
 80022aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022ac:	2380      	movs	r3, #128	@ 0x80
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4013      	ands	r3, r2
 80022b2:	d019      	beq.n	80022e8 <_vsnprintf+0x43c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80022b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022b6:	1d1a      	adds	r2, r3, #4
 80022b8:	663a      	str	r2, [r7, #96]	@ 0x60
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	687d      	ldr	r5, [r7, #4]
 80022be:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022c6:	9205      	str	r2, [sp, #20]
 80022c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022ca:	9204      	str	r2, [sp, #16]
 80022cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022ce:	9203      	str	r2, [sp, #12]
 80022d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022d2:	9202      	str	r2, [sp, #8]
 80022d4:	2200      	movs	r2, #0
 80022d6:	9201      	str	r2, [sp, #4]
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	002b      	movs	r3, r5
 80022dc:	0022      	movs	r2, r4
 80022de:	f7ff fb69 	bl	80019b4 <_ntoa_long>
 80022e2:	0003      	movs	r3, r0
 80022e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80022e6:	e02d      	b.n	8002344 <_vsnprintf+0x498>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80022e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ea:	2240      	movs	r2, #64	@ 0x40
 80022ec:	4013      	ands	r3, r2
 80022ee:	d005      	beq.n	80022fc <_vsnprintf+0x450>
 80022f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022f2:	1d1a      	adds	r2, r3, #4
 80022f4:	663a      	str	r2, [r7, #96]	@ 0x60
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	e00d      	b.n	8002318 <_vsnprintf+0x46c>
 80022fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022fe:	2280      	movs	r2, #128	@ 0x80
 8002300:	4013      	ands	r3, r2
 8002302:	d005      	beq.n	8002310 <_vsnprintf+0x464>
 8002304:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002306:	1d1a      	adds	r2, r3, #4
 8002308:	663a      	str	r2, [r7, #96]	@ 0x60
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b29b      	uxth	r3, r3
 800230e:	e003      	b.n	8002318 <_vsnprintf+0x46c>
 8002310:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002312:	1d1a      	adds	r2, r3, #4
 8002314:	663a      	str	r2, [r7, #96]	@ 0x60
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800231a:	687c      	ldr	r4, [r7, #4]
 800231c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002324:	9305      	str	r3, [sp, #20]
 8002326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002328:	9304      	str	r3, [sp, #16]
 800232a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800232c:	9303      	str	r3, [sp, #12]
 800232e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002330:	9302      	str	r3, [sp, #8]
 8002332:	2300      	movs	r3, #0
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	0023      	movs	r3, r4
 800233c:	f7ff fb3a 	bl	80019b4 <_ntoa_long>
 8002340:	0003      	movs	r3, r0
 8002342:	637b      	str	r3, [r7, #52]	@ 0x34
          }
        }
        format++;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	3301      	adds	r3, #1
 8002348:	603b      	str	r3, [r7, #0]
        break;
 800234a:	e0e4      	b.n	8002516 <_vsnprintf+0x66a>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b46      	cmp	r3, #70	@ 0x46
 8002352:	d103      	bne.n	800235c <_vsnprintf+0x4b0>
 8002354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002356:	2220      	movs	r2, #32
 8002358:	4313      	orrs	r3, r2
 800235a:	647b      	str	r3, [r7, #68]	@ 0x44
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800235c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800235e:	3307      	adds	r3, #7
 8002360:	2207      	movs	r2, #7
 8002362:	4393      	bics	r3, r2
 8002364:	001a      	movs	r2, r3
 8002366:	3208      	adds	r2, #8
 8002368:	663a      	str	r2, [r7, #96]	@ 0x60
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	687e      	ldr	r6, [r7, #4]
 8002370:	6b7d      	ldr	r5, [r7, #52]	@ 0x34
 8002372:	68bc      	ldr	r4, [r7, #8]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002378:	9104      	str	r1, [sp, #16]
 800237a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800237c:	9103      	str	r1, [sp, #12]
 800237e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002380:	9102      	str	r1, [sp, #8]
 8002382:	9200      	str	r2, [sp, #0]
 8002384:	9301      	str	r3, [sp, #4]
 8002386:	0033      	movs	r3, r6
 8002388:	002a      	movs	r2, r5
 800238a:	0021      	movs	r1, r4
 800238c:	f7ff fb7c 	bl	8001a88 <_ftoa>
 8002390:	0003      	movs	r3, r0
 8002392:	637b      	str	r3, [r7, #52]	@ 0x34
        format++;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	3301      	adds	r3, #1
 8002398:	603b      	str	r3, [r7, #0]
        break;
 800239a:	e0bc      	b.n	8002516 <_vsnprintf+0x66a>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800239c:	2301      	movs	r3, #1
 800239e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80023a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023a2:	2202      	movs	r2, #2
 80023a4:	4013      	ands	r3, r2
 80023a6:	d10e      	bne.n	80023c6 <_vsnprintf+0x51a>
          while (l++ < width) {
 80023a8:	e007      	b.n	80023ba <_vsnprintf+0x50e>
            out(' ', buffer, idx++, maxlen);
 80023aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023ac:	1c53      	adds	r3, r2, #1
 80023ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	68fc      	ldr	r4, [r7, #12]
 80023b6:	2020      	movs	r0, #32
 80023b8:	47a0      	blx	r4
          while (l++ < width) {
 80023ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d8f1      	bhi.n	80023aa <_vsnprintf+0x4fe>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80023c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023c8:	1d1a      	adds	r2, r3, #4
 80023ca:	663a      	str	r2, [r7, #96]	@ 0x60
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	b2d8      	uxtb	r0, r3
 80023d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023d2:	1c53      	adds	r3, r2, #1
 80023d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	68fc      	ldr	r4, [r7, #12]
 80023dc:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 80023de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023e0:	2202      	movs	r2, #2
 80023e2:	4013      	ands	r3, r2
 80023e4:	d00e      	beq.n	8002404 <_vsnprintf+0x558>
          while (l++ < width) {
 80023e6:	e007      	b.n	80023f8 <_vsnprintf+0x54c>
            out(' ', buffer, idx++, maxlen);
 80023e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80023ea:	1c53      	adds	r3, r2, #1
 80023ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68b9      	ldr	r1, [r7, #8]
 80023f2:	68fc      	ldr	r4, [r7, #12]
 80023f4:	2020      	movs	r0, #32
 80023f6:	47a0      	blx	r4
          while (l++ < width) {
 80023f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023fa:	1c5a      	adds	r2, r3, #1
 80023fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002400:	429a      	cmp	r2, r3
 8002402:	d8f1      	bhi.n	80023e8 <_vsnprintf+0x53c>
          }
        }
        format++;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	3301      	adds	r3, #1
 8002408:	603b      	str	r3, [r7, #0]
        break;
 800240a:	e084      	b.n	8002516 <_vsnprintf+0x66a>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800240c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800240e:	1d1a      	adds	r2, r3, #4
 8002410:	663a      	str	r2, [r7, #96]	@ 0x60
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	62bb      	str	r3, [r7, #40]	@ 0x28
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8002416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <_vsnprintf+0x574>
 800241c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800241e:	e001      	b.n	8002424 <_vsnprintf+0x578>
 8002420:	2301      	movs	r3, #1
 8002422:	425b      	negs	r3, r3
 8002424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002426:	0019      	movs	r1, r3
 8002428:	0010      	movs	r0, r2
 800242a:	f7ff f949 	bl	80016c0 <_strnlen_s>
 800242e:	0003      	movs	r3, r0
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8002432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002434:	2380      	movs	r3, #128	@ 0x80
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	4013      	ands	r3, r2
 800243a:	d005      	beq.n	8002448 <_vsnprintf+0x59c>
          l = (l < precision ? l : precision);
 800243c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800243e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002440:	4293      	cmp	r3, r2
 8002442:	d900      	bls.n	8002446 <_vsnprintf+0x59a>
 8002444:	0013      	movs	r3, r2
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        if (!(flags & FLAGS_LEFT)) {
 8002448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800244a:	2202      	movs	r2, #2
 800244c:	4013      	ands	r3, r2
 800244e:	d11a      	bne.n	8002486 <_vsnprintf+0x5da>
          while (l++ < width) {
 8002450:	e007      	b.n	8002462 <_vsnprintf+0x5b6>
            out(' ', buffer, idx++, maxlen);
 8002452:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002454:	1c53      	adds	r3, r2, #1
 8002456:	637b      	str	r3, [r7, #52]	@ 0x34
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	68fc      	ldr	r4, [r7, #12]
 800245e:	2020      	movs	r0, #32
 8002460:	47a0      	blx	r4
          while (l++ < width) {
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	627a      	str	r2, [r7, #36]	@ 0x24
 8002468:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800246a:	429a      	cmp	r2, r3
 800246c:	d8f1      	bhi.n	8002452 <_vsnprintf+0x5a6>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800246e:	e00a      	b.n	8002486 <_vsnprintf+0x5da>
          out(*(p++), buffer, idx++, maxlen);
 8002470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002476:	7818      	ldrb	r0, [r3, #0]
 8002478:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800247a:	1c53      	adds	r3, r2, #1
 800247c:	637b      	str	r3, [r7, #52]	@ 0x34
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	68fc      	ldr	r4, [r7, #12]
 8002484:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8002486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d009      	beq.n	80024a2 <_vsnprintf+0x5f6>
 800248e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002490:	2380      	movs	r3, #128	@ 0x80
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4013      	ands	r3, r2
 8002496:	d0eb      	beq.n	8002470 <_vsnprintf+0x5c4>
 8002498:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800249a:	1e5a      	subs	r2, r3, #1
 800249c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1e6      	bne.n	8002470 <_vsnprintf+0x5c4>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80024a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024a4:	2202      	movs	r2, #2
 80024a6:	4013      	ands	r3, r2
 80024a8:	d00e      	beq.n	80024c8 <_vsnprintf+0x61c>
          while (l++ < width) {
 80024aa:	e007      	b.n	80024bc <_vsnprintf+0x610>
            out(' ', buffer, idx++, maxlen);
 80024ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024ae:	1c53      	adds	r3, r2, #1
 80024b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	68fc      	ldr	r4, [r7, #12]
 80024b8:	2020      	movs	r0, #32
 80024ba:	47a0      	blx	r4
          while (l++ < width) {
 80024bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80024c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d8f1      	bhi.n	80024ac <_vsnprintf+0x600>
          }
        }
        format++;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	3301      	adds	r3, #1
 80024cc:	603b      	str	r3, [r7, #0]
        break;
 80024ce:	e022      	b.n	8002516 <_vsnprintf+0x66a>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80024d0:	2308      	movs	r3, #8
 80024d2:	643b      	str	r3, [r7, #64]	@ 0x40
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80024d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024d6:	2221      	movs	r2, #33	@ 0x21
 80024d8:	4313      	orrs	r3, r2
 80024da:	647b      	str	r3, [r7, #68]	@ 0x44
        format++;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	3301      	adds	r3, #1
 80024e0:	603b      	str	r3, [r7, #0]
        break;
 80024e2:	e018      	b.n	8002516 <_vsnprintf+0x66a>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80024e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80024e6:	1c53      	adds	r3, r2, #1
 80024e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68b9      	ldr	r1, [r7, #8]
 80024ee:	68fc      	ldr	r4, [r7, #12]
 80024f0:	2025      	movs	r0, #37	@ 0x25
 80024f2:	47a0      	blx	r4
        format++;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	3301      	adds	r3, #1
 80024f8:	603b      	str	r3, [r7, #0]
        break;
 80024fa:	e00c      	b.n	8002516 <_vsnprintf+0x66a>

      default :
        out(*format, buffer, idx++, maxlen);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	7818      	ldrb	r0, [r3, #0]
 8002500:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002502:	1c53      	adds	r3, r2, #1
 8002504:	637b      	str	r3, [r7, #52]	@ 0x34
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	68fc      	ldr	r4, [r7, #12]
 800250c:	47a0      	blx	r4
        format++;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	603b      	str	r3, [r7, #0]
        break;
 8002514:	46c0      	nop			@ (mov r8, r8)
  while (*format)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d000      	beq.n	8002520 <_vsnprintf+0x674>
 800251e:	e4d5      	b.n	8001ecc <_vsnprintf+0x20>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8002520:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	d302      	bcc.n	800252e <_vsnprintf+0x682>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	1e5a      	subs	r2, r3, #1
 800252c:	e000      	b.n	8002530 <_vsnprintf+0x684>
 800252e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	68fc      	ldr	r4, [r7, #12]
 8002536:	2000      	movs	r0, #0
 8002538:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800253a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	b013      	add	sp, #76	@ 0x4c
 8002542:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002544 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8002544:	b40f      	push	{r0, r1, r2, r3}
 8002546:	b590      	push	{r4, r7, lr}
 8002548:	b087      	sub	sp, #28
 800254a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 800254c:	2324      	movs	r3, #36	@ 0x24
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8002552:	6a3c      	ldr	r4, [r7, #32]
 8002554:	2301      	movs	r3, #1
 8002556:	425a      	negs	r2, r3
 8002558:	1d39      	adds	r1, r7, #4
 800255a:	4808      	ldr	r0, [pc, #32]	@ (800257c <printf_+0x38>)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	0023      	movs	r3, r4
 8002562:	f7ff fca3 	bl	8001eac <_vsnprintf>
 8002566:	0003      	movs	r3, r0
 8002568:	60fb      	str	r3, [r7, #12]
  va_end(va);
  return ret;
 800256a:	68fb      	ldr	r3, [r7, #12]
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	b005      	add	sp, #20
 8002572:	bc90      	pop	{r4, r7}
 8002574:	bc08      	pop	{r3}
 8002576:	b004      	add	sp, #16
 8002578:	4718      	bx	r3
 800257a:	46c0      	nop			@ (mov r8, r8)
 800257c:	08001691 	.word	0x08001691

08002580 <snprintf_>:
  return ret;
}


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 8002580:	b40c      	push	{r2, r3}
 8002582:	b590      	push	{r4, r7, lr}
 8002584:	b087      	sub	sp, #28
 8002586:	af02      	add	r7, sp, #8
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
 800258c:	2324      	movs	r3, #36	@ 0x24
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 8002592:	6a3c      	ldr	r4, [r7, #32]
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4807      	ldr	r0, [pc, #28]	@ (80025b8 <snprintf_+0x38>)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	0023      	movs	r3, r4
 80025a0:	f7ff fc84 	bl	8001eac <_vsnprintf>
 80025a4:	0003      	movs	r3, r0
 80025a6:	60fb      	str	r3, [r7, #12]
  va_end(va);
  return ret;
 80025a8:	68fb      	ldr	r3, [r7, #12]
}
 80025aa:	0018      	movs	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b005      	add	sp, #20
 80025b0:	bc90      	pop	{r4, r7}
 80025b2:	bc08      	pop	{r3}
 80025b4:	b002      	add	sp, #8
 80025b6:	4718      	bx	r3
 80025b8:	08001645 	.word	0x08001645

080025bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025c2:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <MX_DMA_Init+0x38>)
 80025c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025c6:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <MX_DMA_Init+0x38>)
 80025c8:	2101      	movs	r1, #1
 80025ca:	430a      	orrs	r2, r1
 80025cc:	639a      	str	r2, [r3, #56]	@ 0x38
 80025ce:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <MX_DMA_Init+0x38>)
 80025d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d2:	2201      	movs	r2, #1
 80025d4:	4013      	ands	r3, r2
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	2009      	movs	r0, #9
 80025e0:	f001 fee2 	bl	80043a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025e4:	2009      	movs	r0, #9
 80025e6:	f001 fef4 	bl	80043d2 <HAL_NVIC_EnableIRQ>

}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b002      	add	sp, #8
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	46c0      	nop			@ (mov r8, r8)
 80025f4:	40021000 	.word	0x40021000

080025f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b089      	sub	sp, #36	@ 0x24
 80025fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fe:	240c      	movs	r4, #12
 8002600:	193b      	adds	r3, r7, r4
 8002602:	0018      	movs	r0, r3
 8002604:	2314      	movs	r3, #20
 8002606:	001a      	movs	r2, r3
 8002608:	2100      	movs	r1, #0
 800260a:	f006 f8db 	bl	80087c4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800260e:	4b28      	ldr	r3, [pc, #160]	@ (80026b0 <MX_GPIO_Init+0xb8>)
 8002610:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002612:	4b27      	ldr	r3, [pc, #156]	@ (80026b0 <MX_GPIO_Init+0xb8>)
 8002614:	2104      	movs	r1, #4
 8002616:	430a      	orrs	r2, r1
 8002618:	635a      	str	r2, [r3, #52]	@ 0x34
 800261a:	4b25      	ldr	r3, [pc, #148]	@ (80026b0 <MX_GPIO_Init+0xb8>)
 800261c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261e:	2204      	movs	r2, #4
 8002620:	4013      	ands	r3, r2
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	4b22      	ldr	r3, [pc, #136]	@ (80026b0 <MX_GPIO_Init+0xb8>)
 8002628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800262a:	4b21      	ldr	r3, [pc, #132]	@ (80026b0 <MX_GPIO_Init+0xb8>)
 800262c:	2101      	movs	r1, #1
 800262e:	430a      	orrs	r2, r1
 8002630:	635a      	str	r2, [r3, #52]	@ 0x34
 8002632:	4b1f      	ldr	r3, [pc, #124]	@ (80026b0 <MX_GPIO_Init+0xb8>)
 8002634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002636:	2201      	movs	r2, #1
 8002638:	4013      	ands	r3, r2
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800263e:	2380      	movs	r3, #128	@ 0x80
 8002640:	015b      	lsls	r3, r3, #5
 8002642:	481c      	ldr	r0, [pc, #112]	@ (80026b4 <MX_GPIO_Init+0xbc>)
 8002644:	2200      	movs	r2, #0
 8002646:	0019      	movs	r1, r3
 8002648:	f002 fb7f 	bl	8004d4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800264c:	23a0      	movs	r3, #160	@ 0xa0
 800264e:	05db      	lsls	r3, r3, #23
 8002650:	2200      	movs	r2, #0
 8002652:	2140      	movs	r1, #64	@ 0x40
 8002654:	0018      	movs	r0, r3
 8002656:	f002 fb78 	bl	8004d4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800265a:	193b      	adds	r3, r7, r4
 800265c:	2280      	movs	r2, #128	@ 0x80
 800265e:	0152      	lsls	r2, r2, #5
 8002660:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002662:	193b      	adds	r3, r7, r4
 8002664:	2201      	movs	r2, #1
 8002666:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	193b      	adds	r3, r7, r4
 800266a:	2200      	movs	r2, #0
 800266c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	193b      	adds	r3, r7, r4
 8002670:	2200      	movs	r2, #0
 8002672:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002674:	193b      	adds	r3, r7, r4
 8002676:	4a0f      	ldr	r2, [pc, #60]	@ (80026b4 <MX_GPIO_Init+0xbc>)
 8002678:	0019      	movs	r1, r3
 800267a:	0010      	movs	r0, r2
 800267c:	f002 f9e4 	bl	8004a48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002680:	0021      	movs	r1, r4
 8002682:	187b      	adds	r3, r7, r1
 8002684:	2240      	movs	r2, #64	@ 0x40
 8002686:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002688:	187b      	adds	r3, r7, r1
 800268a:	2201      	movs	r2, #1
 800268c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	187b      	adds	r3, r7, r1
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002694:	187b      	adds	r3, r7, r1
 8002696:	2202      	movs	r2, #2
 8002698:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269a:	187a      	adds	r2, r7, r1
 800269c:	23a0      	movs	r3, #160	@ 0xa0
 800269e:	05db      	lsls	r3, r3, #23
 80026a0:	0011      	movs	r1, r2
 80026a2:	0018      	movs	r0, r3
 80026a4:	f002 f9d0 	bl	8004a48 <HAL_GPIO_Init>

}
 80026a8:	46c0      	nop			@ (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b009      	add	sp, #36	@ 0x24
 80026ae:	bd90      	pop	{r4, r7, pc}
 80026b0:	40021000 	.word	0x40021000
 80026b4:	50000800 	.word	0x50000800

080026b8 <calculate_utc_offset>:
    int hours;
    int minutes;
} TimeOffset;

// Function to calculate the time offset from the UTC constant using switch
static inline TimeOffset calculate_utc_offset(int utc_constant) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
    TimeOffset offset = {0, 0}; // Default offset
 80026c2:	2108      	movs	r1, #8
 80026c4:	187b      	adds	r3, r7, r1
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	187b      	adds	r3, r7, r1
 80026cc:	2200      	movs	r2, #0
 80026ce:	605a      	str	r2, [r3, #4]

    switch (utc_constant) {
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2b26      	cmp	r3, #38	@ 0x26
 80026d4:	d900      	bls.n	80026d8 <calculate_utc_offset+0x20>
 80026d6:	e0f4      	b.n	80028c2 <calculate_utc_offset+0x20a>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	009a      	lsls	r2, r3, #2
 80026dc:	4b81      	ldr	r3, [pc, #516]	@ (80028e4 <calculate_utc_offset+0x22c>)
 80026de:	18d3      	adds	r3, r2, r3
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	469f      	mov	pc, r3
        case 1:  offset.hours = -12; break;           // UTC−12:00
 80026e4:	2308      	movs	r3, #8
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	220c      	movs	r2, #12
 80026ea:	4252      	negs	r2, r2
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	e0f0      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 2:  offset.hours = -11; break;           // UTC−11:00
 80026f0:	2308      	movs	r3, #8
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	220b      	movs	r2, #11
 80026f6:	4252      	negs	r2, r2
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e0ea      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 3:  offset.hours = -10; break;           // UTC−10:00
 80026fc:	2308      	movs	r3, #8
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	220a      	movs	r2, #10
 8002702:	4252      	negs	r2, r2
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e0e4      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 4:  offset.hours = -9; offset.minutes = -30; break; 		  // UTC−09:30
 8002708:	2108      	movs	r1, #8
 800270a:	187b      	adds	r3, r7, r1
 800270c:	2209      	movs	r2, #9
 800270e:	4252      	negs	r2, r2
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	187b      	adds	r3, r7, r1
 8002714:	221e      	movs	r2, #30
 8002716:	4252      	negs	r2, r2
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	e0da      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 5:  offset.hours = -9; break;            // UTC−09:00
 800271c:	2308      	movs	r3, #8
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	2209      	movs	r2, #9
 8002722:	4252      	negs	r2, r2
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e0d4      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 6:  offset.hours = -8; break;            // UTC−08:00
 8002728:	2308      	movs	r3, #8
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	2208      	movs	r2, #8
 800272e:	4252      	negs	r2, r2
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	e0ce      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 7:  offset.hours = -7; break;            // UTC−07:00
 8002734:	2308      	movs	r3, #8
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	2207      	movs	r2, #7
 800273a:	4252      	negs	r2, r2
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e0c8      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 8:  offset.hours = -6; break;            // UTC−06:00
 8002740:	2308      	movs	r3, #8
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	2206      	movs	r2, #6
 8002746:	4252      	negs	r2, r2
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e0c2      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 9:  offset.hours = -5; break;            // UTC−05:00
 800274c:	2308      	movs	r3, #8
 800274e:	18fb      	adds	r3, r7, r3
 8002750:	2205      	movs	r2, #5
 8002752:	4252      	negs	r2, r2
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e0bc      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 10: offset.hours = -4; break;            // UTC−04:00
 8002758:	2308      	movs	r3, #8
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	2204      	movs	r2, #4
 800275e:	4252      	negs	r2, r2
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e0b6      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 11: offset.hours = -3; offset.minutes = -30; break; 		  // UTC−03:30
 8002764:	2108      	movs	r1, #8
 8002766:	187b      	adds	r3, r7, r1
 8002768:	2203      	movs	r2, #3
 800276a:	4252      	negs	r2, r2
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	187b      	adds	r3, r7, r1
 8002770:	221e      	movs	r2, #30
 8002772:	4252      	negs	r2, r2
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	e0ac      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 12: offset.hours = -3; break;            // UTC−03:00
 8002778:	2308      	movs	r3, #8
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	2203      	movs	r2, #3
 800277e:	4252      	negs	r2, r2
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	e0a6      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 13: offset.hours = -2; break;            // UTC−02:00
 8002784:	2308      	movs	r3, #8
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	2202      	movs	r2, #2
 800278a:	4252      	negs	r2, r2
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e0a0      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 14: offset.hours = -1; break;            // UTC−01:00
 8002790:	2308      	movs	r3, #8
 8002792:	18fb      	adds	r3, r7, r3
 8002794:	2201      	movs	r2, #1
 8002796:	4252      	negs	r2, r2
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e09a      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 15: offset.hours = 0; break;             // UTC+00:00
 800279c:	2308      	movs	r3, #8
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e095      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 16: offset.hours = 1; break;             // UTC+01:00
 80027a6:	2308      	movs	r3, #8
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	2201      	movs	r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	e090      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 17: offset.hours = 2; break;             // UTC+02:00
 80027b0:	2308      	movs	r3, #8
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	2202      	movs	r2, #2
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	e08b      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 18: offset.hours = 3; break;             // UTC+03:00
 80027ba:	2308      	movs	r3, #8
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	2203      	movs	r2, #3
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e086      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 19: offset.hours = 3; offset.minutes = 30; break;			  // UTC+03:30
 80027c4:	2108      	movs	r1, #8
 80027c6:	187b      	adds	r3, r7, r1
 80027c8:	2203      	movs	r2, #3
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	221e      	movs	r2, #30
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	e07e      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 20: offset.hours = 4; break;             // UTC+04:00
 80027d4:	2308      	movs	r3, #8
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	2204      	movs	r2, #4
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	e079      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 21: offset.hours = 4; offset.minutes = 30; break;			  // UTC+04:30
 80027de:	2108      	movs	r1, #8
 80027e0:	187b      	adds	r3, r7, r1
 80027e2:	2204      	movs	r2, #4
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	187b      	adds	r3, r7, r1
 80027e8:	221e      	movs	r2, #30
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	e071      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 22: offset.hours = 5; break;             // UTC+05:00
 80027ee:	2308      	movs	r3, #8
 80027f0:	18fb      	adds	r3, r7, r3
 80027f2:	2205      	movs	r2, #5
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	e06c      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 23: offset.hours = 5; offset.minutes = 30; break;			  // UTC+05:30
 80027f8:	2108      	movs	r1, #8
 80027fa:	187b      	adds	r3, r7, r1
 80027fc:	2205      	movs	r2, #5
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	187b      	adds	r3, r7, r1
 8002802:	221e      	movs	r2, #30
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	e064      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 24: offset.hours = 5; offset.minutes = 45; break;			  // UTC+05:45
 8002808:	2108      	movs	r1, #8
 800280a:	187b      	adds	r3, r7, r1
 800280c:	2205      	movs	r2, #5
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	187b      	adds	r3, r7, r1
 8002812:	222d      	movs	r2, #45	@ 0x2d
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	e05c      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 25: offset.hours = 6; break;             // UTC+06:00
 8002818:	2308      	movs	r3, #8
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	2206      	movs	r2, #6
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e057      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 26: offset.hours = 6; offset.minutes = 30; break;			  // UTC+06:30
 8002822:	2108      	movs	r1, #8
 8002824:	187b      	adds	r3, r7, r1
 8002826:	2206      	movs	r2, #6
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	187b      	adds	r3, r7, r1
 800282c:	221e      	movs	r2, #30
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	e04f      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 27: offset.hours = 7; break;             // UTC+07:00
 8002832:	2308      	movs	r3, #8
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	2207      	movs	r2, #7
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	e04a      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 28: offset.hours = 8; break;             // UTC+08:00
 800283c:	2308      	movs	r3, #8
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	2208      	movs	r2, #8
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	e045      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 29: offset.hours = 8; offset.minutes = 45; break;			  // UTC+08:45
 8002846:	2108      	movs	r1, #8
 8002848:	187b      	adds	r3, r7, r1
 800284a:	2208      	movs	r2, #8
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	187b      	adds	r3, r7, r1
 8002850:	222d      	movs	r2, #45	@ 0x2d
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	e03d      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 30: offset.hours = 9; break;             // UTC+09:00
 8002856:	2308      	movs	r3, #8
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	2209      	movs	r2, #9
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	e038      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 31: offset.hours = 9; offset.minutes = 30; break;			  // UTC+09:30
 8002860:	2108      	movs	r1, #8
 8002862:	187b      	adds	r3, r7, r1
 8002864:	2209      	movs	r2, #9
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	187b      	adds	r3, r7, r1
 800286a:	221e      	movs	r2, #30
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	e030      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 32: offset.hours = 10; break;            // UTC+10:00
 8002870:	2308      	movs	r3, #8
 8002872:	18fb      	adds	r3, r7, r3
 8002874:	220a      	movs	r2, #10
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	e02b      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 33: offset.hours = 10; offset.minutes = 30; break;			  // UTC+10:30
 800287a:	2108      	movs	r1, #8
 800287c:	187b      	adds	r3, r7, r1
 800287e:	220a      	movs	r2, #10
 8002880:	601a      	str	r2, [r3, #0]
 8002882:	187b      	adds	r3, r7, r1
 8002884:	221e      	movs	r2, #30
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	e023      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 34: offset.hours = 11; break;            // UTC+11:00
 800288a:	2308      	movs	r3, #8
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	220b      	movs	r2, #11
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e01e      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 35: offset.hours = 12; break;            // UTC+12:00
 8002894:	2308      	movs	r3, #8
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	220c      	movs	r2, #12
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e019      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 36: offset.hours = 12; offset.minutes = 45; break; 		  // UTC+12:45
 800289e:	2108      	movs	r1, #8
 80028a0:	187b      	adds	r3, r7, r1
 80028a2:	220c      	movs	r2, #12
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	187b      	adds	r3, r7, r1
 80028a8:	222d      	movs	r2, #45	@ 0x2d
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	e011      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 37: offset.hours = 13; break;            // UTC+13:00
 80028ae:	2308      	movs	r3, #8
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	220d      	movs	r2, #13
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	e00c      	b.n	80028d2 <calculate_utc_offset+0x21a>
        case 38: offset.hours = 14; break;            // UTC+14:00
 80028b8:	2308      	movs	r3, #8
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	220e      	movs	r2, #14
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e007      	b.n	80028d2 <calculate_utc_offset+0x21a>
        default:
            // Invalid UTC constant
            offset.hours = 0;
 80028c2:	2108      	movs	r1, #8
 80028c4:	187b      	adds	r3, r7, r1
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
            offset.minutes = 0;
 80028ca:	187b      	adds	r3, r7, r1
 80028cc:	2200      	movs	r2, #0
 80028ce:	605a      	str	r2, [r3, #4]
            break;
 80028d0:	46c0      	nop			@ (mov r8, r8)
    }

    return offset;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2208      	movs	r2, #8
 80028d6:	18ba      	adds	r2, r7, r2
 80028d8:	ca03      	ldmia	r2!, {r0, r1}
 80028da:	c303      	stmia	r3!, {r0, r1}
}
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	46bd      	mov	sp, r7
 80028e0:	b004      	add	sp, #16
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	08009838 	.word	0x08009838

080028e8 <Update_Changes>:
char gps_buff[BUFF_SIZE];



void Update_Changes(int btn_status)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	if(btn_status == 1)			{	printf("Button Pressed: Once \r\n"); }
	else if(btn_status == 2)	{	printf("Button Pressed: Twice \r\n");}
	else if(btn_status == 3)	{	printf("Button Pressed: for 5 seconds\r\n");}
#endif

	if(btn_status == 1){
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d10e      	bne.n	8002914 <Update_Changes+0x2c>
		Is12HourEnabled = !Is12HourEnabled;
 80028f6:	4b74      	ldr	r3, [pc, #464]	@ (8002ac8 <Update_Changes+0x1e0>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	1e5a      	subs	r2, r3, #1
 80028fc:	4193      	sbcs	r3, r2
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2201      	movs	r2, #1
 8002902:	4053      	eors	r3, r2
 8002904:	b2db      	uxtb	r3, r3
 8002906:	1c1a      	adds	r2, r3, #0
 8002908:	2301      	movs	r3, #1
 800290a:	4013      	ands	r3, r2
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4b6e      	ldr	r3, [pc, #440]	@ (8002ac8 <Update_Changes+0x1e0>)
 8002910:	701a      	strb	r2, [r3, #0]
				default: break;
			}

		}
	}
}
 8002912:	e0d5      	b.n	8002ac0 <Update_Changes+0x1d8>
	else if(btn_status == 2){
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d11b      	bne.n	8002952 <Update_Changes+0x6a>
		IsOneHourAdd = !IsOneHourAdd;
 800291a:	4b6c      	ldr	r3, [pc, #432]	@ (8002acc <Update_Changes+0x1e4>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	1e5a      	subs	r2, r3, #1
 8002920:	4193      	sbcs	r3, r2
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2201      	movs	r2, #1
 8002926:	4053      	eors	r3, r2
 8002928:	b2db      	uxtb	r3, r3
 800292a:	1c1a      	adds	r2, r3, #0
 800292c:	2301      	movs	r3, #1
 800292e:	4013      	ands	r3, r2
 8002930:	b2da      	uxtb	r2, r3
 8002932:	4b66      	ldr	r3, [pc, #408]	@ (8002acc <Update_Changes+0x1e4>)
 8002934:	701a      	strb	r2, [r3, #0]
		if(IsOneHourAdd == true){
 8002936:	4b65      	ldr	r3, [pc, #404]	@ (8002acc <Update_Changes+0x1e4>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d004      	beq.n	8002948 <Update_Changes+0x60>
			HAL_RTC_DST_Add1Hour(&hrtc);
 800293e:	4b64      	ldr	r3, [pc, #400]	@ (8002ad0 <Update_Changes+0x1e8>)
 8002940:	0018      	movs	r0, r3
 8002942:	f003 fd5c 	bl	80063fe <HAL_RTC_DST_Add1Hour>
}
 8002946:	e0bb      	b.n	8002ac0 <Update_Changes+0x1d8>
			HAL_RTC_DST_Sub1Hour(&hrtc);
 8002948:	4b61      	ldr	r3, [pc, #388]	@ (8002ad0 <Update_Changes+0x1e8>)
 800294a:	0018      	movs	r0, r3
 800294c:	f003 fd74 	bl	8006438 <HAL_RTC_DST_Sub1Hour>
}
 8002950:	e0b6      	b.n	8002ac0 <Update_Changes+0x1d8>
	else if(btn_status == 3){
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d000      	beq.n	800295a <Update_Changes+0x72>
 8002958:	e0b2      	b.n	8002ac0 <Update_Changes+0x1d8>
		uint8_t utc_set_state = 0, button_state;
 800295a:	2317      	movs	r3, #23
 800295c:	18fb      	adds	r3, r7, r3
 800295e:	2200      	movs	r2, #0
 8002960:	701a      	strb	r2, [r3, #0]
		uint32_t utc_ms_count = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
		uint8_t menuOpen = 0;
 8002966:	230f      	movs	r3, #15
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
		inMenu = true;
 800296e:	4b59      	ldr	r3, [pc, #356]	@ (8002ad4 <Update_Changes+0x1ec>)
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim6);
 8002974:	4b58      	ldr	r3, [pc, #352]	@ (8002ad8 <Update_Changes+0x1f0>)
 8002976:	0018      	movs	r0, r3
 8002978:	f004 fa30 	bl	8006ddc <HAL_TIM_Base_Stop_IT>
		while(utc_set_state < 10){
 800297c:	e09a      	b.n	8002ab4 <Update_Changes+0x1cc>
			switch(utc_set_state){
 800297e:	2317      	movs	r3, #23
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d100      	bne.n	800298a <Update_Changes+0xa2>
 8002988:	e06c      	b.n	8002a64 <Update_Changes+0x17c>
 800298a:	dd00      	ble.n	800298e <Update_Changes+0xa6>
 800298c:	e08f      	b.n	8002aae <Update_Changes+0x1c6>
 800298e:	2b00      	cmp	r3, #0
 8002990:	d002      	beq.n	8002998 <Update_Changes+0xb0>
 8002992:	2b01      	cmp	r3, #1
 8002994:	d016      	beq.n	80029c4 <Update_Changes+0xdc>
				default: break;
 8002996:	e08a      	b.n	8002aae <Update_Changes+0x1c6>
					HAL_TIM_Base_Stop_IT(&htim6);
 8002998:	4b4f      	ldr	r3, [pc, #316]	@ (8002ad8 <Update_Changes+0x1f0>)
 800299a:	0018      	movs	r0, r3
 800299c:	f004 fa1e 	bl	8006ddc <HAL_TIM_Base_Stop_IT>
					__HAL_TIM_SET_COUNTER(&htim6, 0);
 80029a0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ad8 <Update_Changes+0x1f0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2200      	movs	r2, #0
 80029a6:	625a      	str	r2, [r3, #36]	@ 0x24
					utc_ms_count = HAL_GetTick();
 80029a8:	f001 fc24 	bl	80041f4 <HAL_GetTick>
 80029ac:	0003      	movs	r3, r0
 80029ae:	613b      	str	r3, [r7, #16]
					utc_set_state = 1;
 80029b0:	2317      	movs	r3, #23
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
					Show_UTC(UTC_Constant);
 80029b8:	4b48      	ldr	r3, [pc, #288]	@ (8002adc <Update_Changes+0x1f4>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	0018      	movs	r0, r3
 80029be:	f000 f897 	bl	8002af0 <Show_UTC>
					break;
 80029c2:	e077      	b.n	8002ab4 <Update_Changes+0x1cc>
					button_state = HAL_GPIO_ReadPin(BTN_PORT, BTN_PIN);
 80029c4:	250e      	movs	r5, #14
 80029c6:	197c      	adds	r4, r7, r5
 80029c8:	4b45      	ldr	r3, [pc, #276]	@ (8002ae0 <Update_Changes+0x1f8>)
 80029ca:	2101      	movs	r1, #1
 80029cc:	0018      	movs	r0, r3
 80029ce:	f002 f99f 	bl	8004d10 <HAL_GPIO_ReadPin>
 80029d2:	0003      	movs	r3, r0
 80029d4:	7023      	strb	r3, [r4, #0]
					if(button_state == GPIO_PIN_RESET){
 80029d6:	197b      	adds	r3, r7, r5
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d12f      	bne.n	8002a3e <Update_Changes+0x156>
						if(menuOpen == 1) {
 80029de:	230f      	movs	r3, #15
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d10d      	bne.n	8002a04 <Update_Changes+0x11c>
							if(UTC_Constant >= 38)	UTC_Constant = 1;
 80029e8:	4b3c      	ldr	r3, [pc, #240]	@ (8002adc <Update_Changes+0x1f4>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b25      	cmp	r3, #37	@ 0x25
 80029ee:	d903      	bls.n	80029f8 <Update_Changes+0x110>
 80029f0:	4b3a      	ldr	r3, [pc, #232]	@ (8002adc <Update_Changes+0x1f4>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e005      	b.n	8002a04 <Update_Changes+0x11c>
							else					UTC_Constant++;
 80029f8:	4b38      	ldr	r3, [pc, #224]	@ (8002adc <Update_Changes+0x1f4>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	3301      	adds	r3, #1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b36      	ldr	r3, [pc, #216]	@ (8002adc <Update_Changes+0x1f4>)
 8002a02:	701a      	strb	r2, [r3, #0]
						HAL_Delay(100);
 8002a04:	2064      	movs	r0, #100	@ 0x64
 8002a06:	f001 fbff 	bl	8004208 <HAL_Delay>
						utc_ms_count = HAL_GetTick();
 8002a0a:	f001 fbf3 	bl	80041f4 <HAL_GetTick>
 8002a0e:	0003      	movs	r3, r0
 8002a10:	613b      	str	r3, [r7, #16]
						Show_UTC(UTC_Constant);
 8002a12:	4b32      	ldr	r3, [pc, #200]	@ (8002adc <Update_Changes+0x1f4>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f000 f86a 	bl	8002af0 <Show_UTC>
						menuOpen = 1;
 8002a1c:	230f      	movs	r3, #15
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	2201      	movs	r2, #1
 8002a22:	701a      	strb	r2, [r3, #0]
						while(button_state == HAL_GPIO_ReadPin(BTN_PORT, BTN_PIN));
 8002a24:	46c0      	nop			@ (mov r8, r8)
 8002a26:	4b2e      	ldr	r3, [pc, #184]	@ (8002ae0 <Update_Changes+0x1f8>)
 8002a28:	2101      	movs	r1, #1
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f002 f970 	bl	8004d10 <HAL_GPIO_ReadPin>
 8002a30:	0003      	movs	r3, r0
 8002a32:	001a      	movs	r2, r3
 8002a34:	230e      	movs	r3, #14
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d0f3      	beq.n	8002a26 <Update_Changes+0x13e>
					if(HAL_GetTick()-utc_ms_count > 5000){
 8002a3e:	f001 fbd9 	bl	80041f4 <HAL_GetTick>
 8002a42:	0002      	movs	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	4a26      	ldr	r2, [pc, #152]	@ (8002ae4 <Update_Changes+0x1fc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d931      	bls.n	8002ab2 <Update_Changes+0x1ca>
						utc_set_state = 2;
 8002a4e:	2317      	movs	r3, #23
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	2202      	movs	r2, #2
 8002a54:	701a      	strb	r2, [r3, #0]
						memset(gps_buff, 0, BUFF_SIZE);
 8002a56:	4b24      	ldr	r3, [pc, #144]	@ (8002ae8 <Update_Changes+0x200>)
 8002a58:	2264      	movs	r2, #100	@ 0x64
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f005 feb1 	bl	80087c4 <memset>
					break;
 8002a62:	e026      	b.n	8002ab2 <Update_Changes+0x1ca>
					Read_GPS(gps_buff, BUFF_SIZE);
 8002a64:	4b20      	ldr	r3, [pc, #128]	@ (8002ae8 <Update_Changes+0x200>)
 8002a66:	2164      	movs	r1, #100	@ 0x64
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 fa81 	bl	8002f70 <Read_GPS>
					if(strstr(gps_buff, "$GNRMC") != NULL){
 8002a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8002aec <Update_Changes+0x204>)
 8002a70:	4b1d      	ldr	r3, [pc, #116]	@ (8002ae8 <Update_Changes+0x200>)
 8002a72:	0011      	movs	r1, r2
 8002a74:	0018      	movs	r0, r3
 8002a76:	f005 ff0d 	bl	8008894 <strstr>
 8002a7a:	1e03      	subs	r3, r0, #0
 8002a7c:	d007      	beq.n	8002a8e <Update_Changes+0x1a6>
						Parse_GPGGA(gps_buff);
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae8 <Update_Changes+0x200>)
 8002a80:	0018      	movs	r0, r3
 8002a82:	f000 fac9 	bl	8003018 <Parse_GPGGA>
						utc_set_state = 20;
 8002a86:	2317      	movs	r3, #23
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	2214      	movs	r2, #20
 8002a8c:	701a      	strb	r2, [r3, #0]
				    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, UTC_Constant);
 8002a8e:	4b13      	ldr	r3, [pc, #76]	@ (8002adc <Update_Changes+0x1f4>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	001a      	movs	r2, r3
 8002a94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <Update_Changes+0x1e8>)
 8002a96:	2100      	movs	r1, #0
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f003 fcf2 	bl	8006482 <HAL_RTCEx_BKUPWrite>
					HAL_TIM_Base_Start_IT(&htim6);
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad8 <Update_Changes+0x1f0>)
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f004 f945 	bl	8006d30 <HAL_TIM_Base_Start_IT>
					inMenu = false;
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <Update_Changes+0x1ec>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
					break;
 8002aac:	e002      	b.n	8002ab4 <Update_Changes+0x1cc>
				default: break;
 8002aae:	46c0      	nop			@ (mov r8, r8)
 8002ab0:	e000      	b.n	8002ab4 <Update_Changes+0x1cc>
					break;
 8002ab2:	46c0      	nop			@ (mov r8, r8)
		while(utc_set_state < 10){
 8002ab4:	2317      	movs	r3, #23
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b09      	cmp	r3, #9
 8002abc:	d800      	bhi.n	8002ac0 <Update_Changes+0x1d8>
 8002abe:	e75e      	b.n	800297e <Update_Changes+0x96>
}
 8002ac0:	46c0      	nop			@ (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b006      	add	sp, #24
 8002ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8002ac8:	200000a0 	.word	0x200000a0
 8002acc:	200000a1 	.word	0x200000a1
 8002ad0:	20000134 	.word	0x20000134
 8002ad4:	200000c0 	.word	0x200000c0
 8002ad8:	20000224 	.word	0x20000224
 8002adc:	200000ac 	.word	0x200000ac
 8002ae0:	50000800 	.word	0x50000800
 8002ae4:	00001388 	.word	0x00001388
 8002ae8:	200000c4 	.word	0x200000c4
 8002aec:	08009680 	.word	0x08009680

08002af0 <Show_UTC>:


void Show_UTC(uint8_t utc_num)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	0002      	movs	r2, r0
 8002af8:	1dfb      	adds	r3, r7, #7
 8002afa:	701a      	strb	r2, [r3, #0]
	DisplayDigits(0, 0, 0, 0, utc_num/10, utc_num%10);
 8002afc:	1dfb      	adds	r3, r7, #7
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	210a      	movs	r1, #10
 8002b02:	0018      	movs	r0, r3
 8002b04:	f7fd fb0e 	bl	8000124 <__udivsi3>
 8002b08:	0003      	movs	r3, r0
 8002b0a:	b2dc      	uxtb	r4, r3
 8002b0c:	1dfb      	adds	r3, r7, #7
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	210a      	movs	r1, #10
 8002b12:	0018      	movs	r0, r3
 8002b14:	f7fd fb8c 	bl	8000230 <__aeabi_uidivmod>
 8002b18:	000b      	movs	r3, r1
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	9301      	str	r3, [sp, #4]
 8002b1e:	9400      	str	r4, [sp, #0]
 8002b20:	2300      	movs	r3, #0
 8002b22:	2200      	movs	r2, #0
 8002b24:	2100      	movs	r1, #0
 8002b26:	2000      	movs	r0, #0
 8002b28:	f000 f884 	bl	8002c34 <DisplayDigits>

#if DEBUG == 1
	//printf("%d, %d, %d, %d, %d\r\n", test[4], test[3],test[2],test[1],test[0]);
#endif
}
 8002b2c:	46c0      	nop			@ (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b003      	add	sp, #12
 8002b32:	bd90      	pop	{r4, r7, pc}

08002b34 <Show_Time>:

void Show_Time(void)
{
 8002b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b36:	46ce      	mov	lr, r9
 8002b38:	4647      	mov	r7, r8
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b085      	sub	sp, #20
 8002b3e:	af02      	add	r7, sp, #8
	uint8_t new_hour=0;
 8002b40:	1dfb      	adds	r3, r7, #7
 8002b42:	2200      	movs	r2, #0
 8002b44:	701a      	strb	r2, [r3, #0]
	HAL_RTC_GetTime(&hrtc, &myTime, RTC_FORMAT_BIN);
 8002b46:	4937      	ldr	r1, [pc, #220]	@ (8002c24 <Show_Time+0xf0>)
 8002b48:	4b37      	ldr	r3, [pc, #220]	@ (8002c28 <Show_Time+0xf4>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f003 f8ab 	bl	8005ca8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &myDate, RTC_FORMAT_BIN);
 8002b52:	4936      	ldr	r1, [pc, #216]	@ (8002c2c <Show_Time+0xf8>)
 8002b54:	4b34      	ldr	r3, [pc, #208]	@ (8002c28 <Show_Time+0xf4>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f003 f993 	bl	8005e84 <HAL_RTC_GetDate>

	//myTime.Seconds = 12; myTime.Minutes = 59; myTime.Hours = 06;
	Print_UTC_Time(myTime.Hours, myTime.Minutes, myTime.Seconds);
 8002b5e:	4b31      	ldr	r3, [pc, #196]	@ (8002c24 <Show_Time+0xf0>)
 8002b60:	7818      	ldrb	r0, [r3, #0]
 8002b62:	4b30      	ldr	r3, [pc, #192]	@ (8002c24 <Show_Time+0xf0>)
 8002b64:	7859      	ldrb	r1, [r3, #1]
 8002b66:	4b2f      	ldr	r3, [pc, #188]	@ (8002c24 <Show_Time+0xf0>)
 8002b68:	789b      	ldrb	r3, [r3, #2]
 8002b6a:	001a      	movs	r2, r3
 8002b6c:	f000 fb20 	bl	80031b0 <Print_UTC_Time>

	new_hour = myTime.Hours;
 8002b70:	1dfb      	adds	r3, r7, #7
 8002b72:	4a2c      	ldr	r2, [pc, #176]	@ (8002c24 <Show_Time+0xf0>)
 8002b74:	7812      	ldrb	r2, [r2, #0]
 8002b76:	701a      	strb	r2, [r3, #0]
	if(Is12HourEnabled){
 8002b78:	4b2d      	ldr	r3, [pc, #180]	@ (8002c30 <Show_Time+0xfc>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00f      	beq.n	8002ba0 <Show_Time+0x6c>
		if(new_hour > 12)
 8002b80:	1dfb      	adds	r3, r7, #7
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b0c      	cmp	r3, #12
 8002b86:	d904      	bls.n	8002b92 <Show_Time+0x5e>
			new_hour = new_hour - 12;
 8002b88:	1dfb      	adds	r3, r7, #7
 8002b8a:	1dfa      	adds	r2, r7, #7
 8002b8c:	7812      	ldrb	r2, [r2, #0]
 8002b8e:	3a0c      	subs	r2, #12
 8002b90:	701a      	strb	r2, [r3, #0]
		 if(new_hour == 0)
 8002b92:	1dfb      	adds	r3, r7, #7
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <Show_Time+0x6c>
			new_hour = 12;
 8002b9a:	1dfb      	adds	r3, r7, #7
 8002b9c:	220c      	movs	r2, #12
 8002b9e:	701a      	strb	r2, [r3, #0]
	}

	DisplayDigits(new_hour/10, new_hour%10, myTime.Minutes/10, myTime.Minutes%10, myTime.Seconds/10, myTime.Seconds%10);
 8002ba0:	1dfb      	adds	r3, r7, #7
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	210a      	movs	r1, #10
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f7fd fabc 	bl	8000124 <__udivsi3>
 8002bac:	0003      	movs	r3, r0
 8002bae:	b2dd      	uxtb	r5, r3
 8002bb0:	1dfb      	adds	r3, r7, #7
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	210a      	movs	r1, #10
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f7fd fb3a 	bl	8000230 <__aeabi_uidivmod>
 8002bbc:	000b      	movs	r3, r1
 8002bbe:	b2de      	uxtb	r6, r3
 8002bc0:	4b18      	ldr	r3, [pc, #96]	@ (8002c24 <Show_Time+0xf0>)
 8002bc2:	785b      	ldrb	r3, [r3, #1]
 8002bc4:	210a      	movs	r1, #10
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f7fd faac 	bl	8000124 <__udivsi3>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	4698      	mov	r8, r3
 8002bd2:	4b14      	ldr	r3, [pc, #80]	@ (8002c24 <Show_Time+0xf0>)
 8002bd4:	785b      	ldrb	r3, [r3, #1]
 8002bd6:	210a      	movs	r1, #10
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f7fd fb29 	bl	8000230 <__aeabi_uidivmod>
 8002bde:	000b      	movs	r3, r1
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	4699      	mov	r9, r3
 8002be4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <Show_Time+0xf0>)
 8002be6:	789b      	ldrb	r3, [r3, #2]
 8002be8:	210a      	movs	r1, #10
 8002bea:	0018      	movs	r0, r3
 8002bec:	f7fd fa9a 	bl	8000124 <__udivsi3>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	b2dc      	uxtb	r4, r3
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <Show_Time+0xf0>)
 8002bf6:	789b      	ldrb	r3, [r3, #2]
 8002bf8:	210a      	movs	r1, #10
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7fd fb18 	bl	8000230 <__aeabi_uidivmod>
 8002c00:	000b      	movs	r3, r1
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	9400      	str	r4, [sp, #0]
 8002c08:	464b      	mov	r3, r9
 8002c0a:	4642      	mov	r2, r8
 8002c0c:	0031      	movs	r1, r6
 8002c0e:	0028      	movs	r0, r5
 8002c10:	f000 f810 	bl	8002c34 <DisplayDigits>
}
 8002c14:	46c0      	nop			@ (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b003      	add	sp, #12
 8002c1a:	bcc0      	pop	{r6, r7}
 8002c1c:	46b9      	mov	r9, r7
 8002c1e:	46b0      	mov	r8, r6
 8002c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c22:	46c0      	nop			@ (mov r8, r8)
 8002c24:	20000088 	.word	0x20000088
 8002c28:	20000134 	.word	0x20000134
 8002c2c:	2000009c 	.word	0x2000009c
 8002c30:	200000a0 	.word	0x200000a0

08002c34 <DisplayDigits>:

void DisplayDigits(uint8_t hour1, uint8_t hour2, uint8_t min3, uint8_t min4, uint8_t sec5, uint8_t sec6) {
 8002c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	0005      	movs	r5, r0
 8002c3c:	000c      	movs	r4, r1
 8002c3e:	0010      	movs	r0, r2
 8002c40:	0019      	movs	r1, r3
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	1c2a      	adds	r2, r5, #0
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	1dbb      	adds	r3, r7, #6
 8002c4a:	1c22      	adds	r2, r4, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	1d7b      	adds	r3, r7, #5
 8002c50:	1c02      	adds	r2, r0, #0
 8002c52:	701a      	strb	r2, [r3, #0]
 8002c54:	1d3b      	adds	r3, r7, #4
 8002c56:	1c0a      	adds	r2, r1, #0
 8002c58:	701a      	strb	r2, [r3, #0]
	static uint8_t shiftRegisters[8] = {0};
	uint16_t dig1, dig2, dig3, dig4, dig5, dig6;

	dig1 = 1U << sec6;
 8002c5a:	232c      	movs	r3, #44	@ 0x2c
 8002c5c:	2008      	movs	r0, #8
 8002c5e:	181b      	adds	r3, r3, r0
 8002c60:	19db      	adds	r3, r3, r7
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2201      	movs	r2, #1
 8002c66:	409a      	lsls	r2, r3
 8002c68:	2116      	movs	r1, #22
 8002c6a:	187b      	adds	r3, r7, r1
 8002c6c:	801a      	strh	r2, [r3, #0]
	dig2 = 1U << sec5;
 8002c6e:	2328      	movs	r3, #40	@ 0x28
 8002c70:	181b      	adds	r3, r3, r0
 8002c72:	19db      	adds	r3, r3, r7
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2201      	movs	r2, #1
 8002c78:	409a      	lsls	r2, r3
 8002c7a:	2014      	movs	r0, #20
 8002c7c:	183b      	adds	r3, r7, r0
 8002c7e:	801a      	strh	r2, [r3, #0]
	dig3 = 1U << min4;
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	409a      	lsls	r2, r3
 8002c88:	2412      	movs	r4, #18
 8002c8a:	193b      	adds	r3, r7, r4
 8002c8c:	801a      	strh	r2, [r3, #0]
	dig4 = 1U << min3;
 8002c8e:	1d7b      	adds	r3, r7, #5
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2201      	movs	r2, #1
 8002c94:	409a      	lsls	r2, r3
 8002c96:	2510      	movs	r5, #16
 8002c98:	197b      	adds	r3, r7, r5
 8002c9a:	801a      	strh	r2, [r3, #0]
	dig5 = 1U << hour2;
 8002c9c:	1dbb      	adds	r3, r7, #6
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	260e      	movs	r6, #14
 8002ca6:	19bb      	adds	r3, r7, r6
 8002ca8:	801a      	strh	r2, [r3, #0]
	dig6 = 1U << hour1;
 8002caa:	1dfb      	adds	r3, r7, #7
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	230c      	movs	r3, #12
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	801a      	strh	r2, [r3, #0]

	shiftRegisters[0] = dig1 & 0xFF;
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4b35      	ldr	r3, [pc, #212]	@ (8002d94 <DisplayDigits+0x160>)
 8002cc0:	701a      	strb	r2, [r3, #0]
	shiftRegisters[1] = ((dig2 & 0x3F) << 2) | ((dig1 >> 8) & 0x03);
 8002cc2:	183b      	adds	r3, r7, r0
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	b25b      	sxtb	r3, r3
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	b25a      	sxtb	r2, r3
 8002ccc:	187b      	adds	r3, r7, r1
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	0a1b      	lsrs	r3, r3, #8
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	b25b      	sxtb	r3, r3
 8002cd6:	2103      	movs	r1, #3
 8002cd8:	400b      	ands	r3, r1
 8002cda:	b25b      	sxtb	r3, r3
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	b25b      	sxtb	r3, r3
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4b2c      	ldr	r3, [pc, #176]	@ (8002d94 <DisplayDigits+0x160>)
 8002ce4:	705a      	strb	r2, [r3, #1]
	shiftRegisters[2] = ((dig3 & 0x0F) << 4) | ((dig2 >> 6) & 0x0F);
 8002ce6:	193b      	adds	r3, r7, r4
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	b25b      	sxtb	r3, r3
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	b25a      	sxtb	r2, r3
 8002cf0:	183b      	adds	r3, r7, r0
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	b25b      	sxtb	r3, r3
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	400b      	ands	r3, r1
 8002cfe:	b25b      	sxtb	r3, r3
 8002d00:	4313      	orrs	r3, r2
 8002d02:	b25b      	sxtb	r3, r3
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4b23      	ldr	r3, [pc, #140]	@ (8002d94 <DisplayDigits+0x160>)
 8002d08:	709a      	strb	r2, [r3, #2]
	shiftRegisters[3] = ((dig4 & 0x03) << 6) | ((dig3 >> 4) & 0x3F);
 8002d0a:	197b      	adds	r3, r7, r5
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	b25b      	sxtb	r3, r3
 8002d10:	019b      	lsls	r3, r3, #6
 8002d12:	b25a      	sxtb	r2, r3
 8002d14:	193b      	adds	r3, r7, r4
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	091b      	lsrs	r3, r3, #4
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	b25b      	sxtb	r3, r3
 8002d1e:	213f      	movs	r1, #63	@ 0x3f
 8002d20:	400b      	ands	r3, r1
 8002d22:	b25b      	sxtb	r3, r3
 8002d24:	4313      	orrs	r3, r2
 8002d26:	b25b      	sxtb	r3, r3
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002d94 <DisplayDigits+0x160>)
 8002d2c:	70da      	strb	r2, [r3, #3]
	shiftRegisters[4] = ((dig4 >> 2) & 0xFF);
 8002d2e:	197b      	adds	r3, r7, r5
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	089b      	lsrs	r3, r3, #2
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	4b16      	ldr	r3, [pc, #88]	@ (8002d94 <DisplayDigits+0x160>)
 8002d3a:	711a      	strb	r2, [r3, #4]
	shiftRegisters[5] = dig5 & 0xFF;
 8002d3c:	19bb      	adds	r3, r7, r6
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <DisplayDigits+0x160>)
 8002d44:	715a      	strb	r2, [r3, #5]
	shiftRegisters[6] = ((dig6 & 0x3F) << 2) | ((dig5 >> 8) & 0x03);
 8002d46:	200c      	movs	r0, #12
 8002d48:	183b      	adds	r3, r7, r0
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b25b      	sxtb	r3, r3
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	b25a      	sxtb	r2, r3
 8002d52:	19bb      	adds	r3, r7, r6
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	b25b      	sxtb	r3, r3
 8002d5c:	2103      	movs	r1, #3
 8002d5e:	400b      	ands	r3, r1
 8002d60:	b25b      	sxtb	r3, r3
 8002d62:	4313      	orrs	r3, r2
 8002d64:	b25b      	sxtb	r3, r3
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <DisplayDigits+0x160>)
 8002d6a:	719a      	strb	r2, [r3, #6]
	shiftRegisters[7] = ((dig6 >> 6) & 0x0F);
 8002d6c:	183b      	adds	r3, r7, r0
 8002d6e:	881b      	ldrh	r3, [r3, #0]
 8002d70:	099b      	lsrs	r3, r3, #6
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	220f      	movs	r2, #15
 8002d78:	4013      	ands	r3, r2
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <DisplayDigits+0x160>)
 8002d7e:	71da      	strb	r2, [r3, #7]

	HAL_SPI_Transmit_DMA(&hspi1, shiftRegisters, 8);
 8002d80:	4904      	ldr	r1, [pc, #16]	@ (8002d94 <DisplayDigits+0x160>)
 8002d82:	4b05      	ldr	r3, [pc, #20]	@ (8002d98 <DisplayDigits+0x164>)
 8002d84:	2208      	movs	r2, #8
 8002d86:	0018      	movs	r0, r3
 8002d88:	f003 fc6c 	bl	8006664 <HAL_SPI_Transmit_DMA>
}
 8002d8c:	46c0      	nop			@ (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b007      	add	sp, #28
 8002d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d94:	20000128 	.word	0x20000128
 8002d98:	20000160 	.word	0x20000160

08002d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002da0:	f001 f9ac 	bl	80040fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002da4:	f000 f87c 	bl	8002ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002da8:	f7ff fc26 	bl	80025f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002dac:	f7ff fc06 	bl	80025bc <MX_DMA_Init>
  MX_RTC_Init();
 8002db0:	f000 fcb6 	bl	8003720 <MX_RTC_Init>
  MX_SPI1_Init();
 8002db4:	f000 fd6c 	bl	8003890 <MX_SPI1_Init>
  MX_TIM6_Init();
 8002db8:	f000 ff6a 	bl	8003c90 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 8002dbc:	f001 f826 	bl	8003e0c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002dc0:	f001 f872 	bl	8003ea8 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8002dc4:	f000 ffa2 	bl	8003d0c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
#if DEBUG == 1
   printf(">> Program starts... \r\n");
#endif
   printf(">> Program starts... \r\n");
 8002dc8:	4b2c      	ldr	r3, [pc, #176]	@ (8002e7c <main+0xe0>)
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7ff fbba 	bl	8002544 <printf_>

   if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != 0x00) {
 8002dd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e80 <main+0xe4>)
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f003 fb71 	bl	80064bc <HAL_RTCEx_BKUPRead>
 8002dda:	1e03      	subs	r3, r0, #0
 8002ddc:	d008      	beq.n	8002df0 <main+0x54>
	   UTC_Constant = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0);
 8002dde:	4b28      	ldr	r3, [pc, #160]	@ (8002e80 <main+0xe4>)
 8002de0:	2100      	movs	r1, #0
 8002de2:	0018      	movs	r0, r3
 8002de4:	f003 fb6a 	bl	80064bc <HAL_RTCEx_BKUPRead>
 8002de8:	0003      	movs	r3, r0
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	4b25      	ldr	r3, [pc, #148]	@ (8002e84 <main+0xe8>)
 8002dee:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(rtc_stage){
 8002df0:	4b25      	ldr	r3, [pc, #148]	@ (8002e88 <main+0xec>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d033      	beq.n	8002e60 <main+0xc4>
 8002df8:	dc3e      	bgt.n	8002e78 <main+0xdc>
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d024      	beq.n	8002e48 <main+0xac>
 8002dfe:	dc3b      	bgt.n	8002e78 <main+0xdc>
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	d002      	beq.n	8002e0a <main+0x6e>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d006      	beq.n	8002e16 <main+0x7a>
	  		  Update_Changes(status);
	  		  status = -1;

	  		  break;

	  	  default: break;
 8002e08:	e036      	b.n	8002e78 <main+0xdc>
			  Button_Init();
 8002e0a:	f000 fb0f 	bl	800342c <Button_Init>
			  rtc_stage = 0;
 8002e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002e88 <main+0xec>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
			  break;
 8002e14:	e031      	b.n	8002e7a <main+0xde>
	  		  Read_GPS(gps_buff, BUFF_SIZE);
 8002e16:	4b1d      	ldr	r3, [pc, #116]	@ (8002e8c <main+0xf0>)
 8002e18:	2164      	movs	r1, #100	@ 0x64
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f000 f8a8 	bl	8002f70 <Read_GPS>
			  if(strstr(gps_buff, "$GNRMC") != NULL){
 8002e20:	4a1b      	ldr	r2, [pc, #108]	@ (8002e90 <main+0xf4>)
 8002e22:	4b1a      	ldr	r3, [pc, #104]	@ (8002e8c <main+0xf0>)
 8002e24:	0011      	movs	r1, r2
 8002e26:	0018      	movs	r0, r3
 8002e28:	f005 fd34 	bl	8008894 <strstr>
 8002e2c:	1e03      	subs	r3, r0, #0
 8002e2e:	d007      	beq.n	8002e40 <main+0xa4>
				  printf(gps_buff);
 8002e30:	4b16      	ldr	r3, [pc, #88]	@ (8002e8c <main+0xf0>)
 8002e32:	0018      	movs	r0, r3
 8002e34:	f7ff fb86 	bl	8002544 <printf_>
				  Parse_GPGGA(gps_buff);
 8002e38:	4b14      	ldr	r3, [pc, #80]	@ (8002e8c <main+0xf0>)
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f000 f8ec 	bl	8003018 <Parse_GPGGA>
		  	  rtc_stage = 1;
 8002e40:	4b11      	ldr	r3, [pc, #68]	@ (8002e88 <main+0xec>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	601a      	str	r2, [r3, #0]
	  		  break;
 8002e46:	e018      	b.n	8002e7a <main+0xde>
	  		  HAL_TIM_Base_Start_IT(&htim6);
 8002e48:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <main+0xf8>)
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f003 ff70 	bl	8006d30 <HAL_TIM_Base_Start_IT>
	  		  HAL_TIM_Base_Start_IT(&htim7);
 8002e50:	4b11      	ldr	r3, [pc, #68]	@ (8002e98 <main+0xfc>)
 8002e52:	0018      	movs	r0, r3
 8002e54:	f003 ff6c 	bl	8006d30 <HAL_TIM_Base_Start_IT>
	  		  rtc_stage = 2;
 8002e58:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <main+0xec>)
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	601a      	str	r2, [r3, #0]
	  		  break;
 8002e5e:	e00c      	b.n	8002e7a <main+0xde>
	  		  process_button_events();
 8002e60:	f000 fb9e 	bl	80035a0 <process_button_events>
	  		  Update_Changes(status);
 8002e64:	4b0d      	ldr	r3, [pc, #52]	@ (8002e9c <main+0x100>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	0018      	movs	r0, r3
 8002e6c:	f7ff fd3c 	bl	80028e8 <Update_Changes>
	  		  status = -1;
 8002e70:	4b0a      	ldr	r3, [pc, #40]	@ (8002e9c <main+0x100>)
 8002e72:	22ff      	movs	r2, #255	@ 0xff
 8002e74:	701a      	strb	r2, [r3, #0]
	  		  break;
 8002e76:	e000      	b.n	8002e7a <main+0xde>
	  	  default: break;
 8002e78:	46c0      	nop			@ (mov r8, r8)
	  switch(rtc_stage){
 8002e7a:	e7b9      	b.n	8002df0 <main+0x54>
 8002e7c:	08009688 	.word	0x08009688
 8002e80:	20000134 	.word	0x20000134
 8002e84:	200000ac 	.word	0x200000ac
 8002e88:	20000000 	.word	0x20000000
 8002e8c:	200000c4 	.word	0x200000c4
 8002e90:	08009680 	.word	0x08009680
 8002e94:	20000224 	.word	0x20000224
 8002e98:	20000270 	.word	0x20000270
 8002e9c:	200000ad 	.word	0x200000ad

08002ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b093      	sub	sp, #76	@ 0x4c
 8002ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ea6:	2414      	movs	r4, #20
 8002ea8:	193b      	adds	r3, r7, r4
 8002eaa:	0018      	movs	r0, r3
 8002eac:	2334      	movs	r3, #52	@ 0x34
 8002eae:	001a      	movs	r2, r3
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	f005 fc87 	bl	80087c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002eb6:	1d3b      	adds	r3, r7, #4
 8002eb8:	0018      	movs	r0, r3
 8002eba:	2310      	movs	r3, #16
 8002ebc:	001a      	movs	r2, r3
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	f005 fc80 	bl	80087c4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ec4:	2380      	movs	r3, #128	@ 0x80
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f001 ff69 	bl	8004da0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002ece:	f001 ff59 	bl	8004d84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002ed2:	4b26      	ldr	r3, [pc, #152]	@ (8002f6c <SystemClock_Config+0xcc>)
 8002ed4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ed6:	4b25      	ldr	r3, [pc, #148]	@ (8002f6c <SystemClock_Config+0xcc>)
 8002ed8:	2118      	movs	r1, #24
 8002eda:	438a      	bics	r2, r1
 8002edc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002ede:	193b      	adds	r3, r7, r4
 8002ee0:	2206      	movs	r2, #6
 8002ee2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ee4:	193b      	adds	r3, r7, r4
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002eea:	193b      	adds	r3, r7, r4
 8002eec:	2280      	movs	r2, #128	@ 0x80
 8002eee:	0052      	lsls	r2, r2, #1
 8002ef0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8002ef2:	0021      	movs	r1, r4
 8002ef4:	187b      	adds	r3, r7, r1
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002efa:	187b      	adds	r3, r7, r1
 8002efc:	2240      	movs	r2, #64	@ 0x40
 8002efe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	2202      	movs	r2, #2
 8002f04:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f06:	187b      	adds	r3, r7, r1
 8002f08:	2202      	movs	r2, #2
 8002f0a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002f0c:	187b      	adds	r3, r7, r1
 8002f0e:	2200      	movs	r2, #0
 8002f10:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002f12:	187b      	adds	r3, r7, r1
 8002f14:	2208      	movs	r2, #8
 8002f16:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f18:	187b      	adds	r3, r7, r1
 8002f1a:	2280      	movs	r2, #128	@ 0x80
 8002f1c:	0292      	lsls	r2, r2, #10
 8002f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	2280      	movs	r2, #128	@ 0x80
 8002f24:	0592      	lsls	r2, r2, #22
 8002f26:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f001 ff84 	bl	8004e38 <HAL_RCC_OscConfig>
 8002f30:	1e03      	subs	r3, r0, #0
 8002f32:	d001      	beq.n	8002f38 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002f34:	f000 fbee 	bl	8003714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	2207      	movs	r2, #7
 8002f3c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f3e:	1d3b      	adds	r3, r7, #4
 8002f40:	2202      	movs	r2, #2
 8002f42:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f50:	1d3b      	adds	r3, r7, #4
 8002f52:	2102      	movs	r1, #2
 8002f54:	0018      	movs	r0, r3
 8002f56:	f002 fa7f 	bl	8005458 <HAL_RCC_ClockConfig>
 8002f5a:	1e03      	subs	r3, r0, #0
 8002f5c:	d001      	beq.n	8002f62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002f5e:	f000 fbd9 	bl	8003714 <Error_Handler>
  }
}
 8002f62:	46c0      	nop			@ (mov r8, r8)
 8002f64:	46bd      	mov	sp, r7
 8002f66:	b013      	add	sp, #76	@ 0x4c
 8002f68:	bd90      	pop	{r4, r7, pc}
 8002f6a:	46c0      	nop			@ (mov r8, r8)
 8002f6c:	40021000 	.word	0x40021000

08002f70 <Read_GPS>:

/* USER CODE BEGIN 4 */

void Read_GPS(char *buff, uint8_t size)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	000a      	movs	r2, r1
 8002f7a:	1cfb      	adds	r3, r7, #3
 8002f7c:	701a      	strb	r2, [r3, #0]
	uint8_t idx = 0;
 8002f7e:	230f      	movs	r3, #15
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]

	MX_USART1_UART_Init();
 8002f86:	f000 ff41 	bl	8003e0c <MX_USART1_UART_Init>
	USART1->CR1 |= USART_CR1_RE;
 8002f8a:	4b22      	ldr	r3, [pc, #136]	@ (8003014 <Read_GPS+0xa4>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	4b21      	ldr	r3, [pc, #132]	@ (8003014 <Read_GPS+0xa4>)
 8002f90:	2104      	movs	r1, #4
 8002f92:	430a      	orrs	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]
	while(idx < size)
 8002f96:	e02c      	b.n	8002ff2 <Read_GPS+0x82>
	{
		if(USART1->ISR & USART_ISR_RXNE_RXFNE){
 8002f98:	4b1e      	ldr	r3, [pc, #120]	@ (8003014 <Read_GPS+0xa4>)
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	200f      	movs	r0, #15
 8002fa2:	183a      	adds	r2, r7, r0
 8002fa4:	1839      	adds	r1, r7, r0
 8002fa6:	7809      	ldrb	r1, [r1, #0]
 8002fa8:	7011      	strb	r1, [r2, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d021      	beq.n	8002ff2 <Read_GPS+0x82>
			buff[idx] = USART1->RDR;
 8002fae:	4b19      	ldr	r3, [pc, #100]	@ (8003014 <Read_GPS+0xa4>)
 8002fb0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002fb2:	183b      	adds	r3, r7, r0
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	18d3      	adds	r3, r2, r3
 8002fba:	b2ca      	uxtb	r2, r1
 8002fbc:	701a      	strb	r2, [r3, #0]
			if(buff[idx] == '\n'){
 8002fbe:	0001      	movs	r1, r0
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	18d3      	adds	r3, r2, r3
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b0a      	cmp	r3, #10
 8002fcc:	d10b      	bne.n	8002fe6 <Read_GPS+0x76>
				buff[++idx] = '\0';
 8002fce:	187b      	adds	r3, r7, r1
 8002fd0:	187a      	adds	r2, r7, r1
 8002fd2:	7812      	ldrb	r2, [r2, #0]
 8002fd4:	3201      	adds	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	18d3      	adds	r3, r2, r3
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	701a      	strb	r2, [r3, #0]
				return;
 8002fe4:	e012      	b.n	800300c <Read_GPS+0x9c>
			}
			idx++;
 8002fe6:	210f      	movs	r1, #15
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	781a      	ldrb	r2, [r3, #0]
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	3201      	adds	r2, #1
 8002ff0:	701a      	strb	r2, [r3, #0]
	while(idx < size)
 8002ff2:	230f      	movs	r3, #15
 8002ff4:	18fa      	adds	r2, r7, r3
 8002ff6:	1cfb      	adds	r3, r7, #3
 8002ff8:	7812      	ldrb	r2, [r2, #0]
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d3cb      	bcc.n	8002f98 <Read_GPS+0x28>
		}
	}

	USART1->CR1 &= ~USART_CR1_RE;
 8003000:	4b04      	ldr	r3, [pc, #16]	@ (8003014 <Read_GPS+0xa4>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4b03      	ldr	r3, [pc, #12]	@ (8003014 <Read_GPS+0xa4>)
 8003006:	2104      	movs	r1, #4
 8003008:	438a      	bics	r2, r1
 800300a:	601a      	str	r2, [r3, #0]

}
 800300c:	46bd      	mov	sp, r7
 800300e:	b004      	add	sp, #16
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			@ (mov r8, r8)
 8003014:	40013800 	.word	0x40013800

08003018 <Parse_GPGGA>:

void Parse_GPGGA(char *sentence)
{
 8003018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301a:	b0af      	sub	sp, #188	@ 0xbc
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	uint8_t sec = 0, min = 0, hour = 0;
 8003020:	23af      	movs	r3, #175	@ 0xaf
 8003022:	18fb      	adds	r3, r7, r3
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	23ae      	movs	r3, #174	@ 0xae
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	2200      	movs	r2, #0
 800302e:	701a      	strb	r2, [r3, #0]
 8003030:	23ad      	movs	r3, #173	@ 0xad
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	2200      	movs	r2, #0
 8003036:	701a      	strb	r2, [r3, #0]
	char utc_time[10] = "";
 8003038:	23a0      	movs	r3, #160	@ 0xa0
 800303a:	18fb      	adds	r3, r7, r3
 800303c:	0018      	movs	r0, r3
 800303e:	230a      	movs	r3, #10
 8003040:	001a      	movs	r2, r3
 8003042:	2100      	movs	r1, #0
 8003044:	f005 fbbe 	bl	80087c4 <memset>
	char gpsParsed[15][10] = { NULL };
 8003048:	2308      	movs	r3, #8
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	0018      	movs	r0, r3
 800304e:	2396      	movs	r3, #150	@ 0x96
 8003050:	001a      	movs	r2, r3
 8003052:	2100      	movs	r1, #0
 8003054:	f005 fbb6 	bl	80087c4 <memset>
	uint8_t i = 0;
 8003058:	23b7      	movs	r3, #183	@ 0xb7
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]

	char* token = strtok(sentence, ",");
 8003060:	4a50      	ldr	r2, [pc, #320]	@ (80031a4 <Parse_GPGGA+0x18c>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	0011      	movs	r1, r2
 8003066:	0018      	movs	r0, r3
 8003068:	f005 fbb4 	bl	80087d4 <strtok>
 800306c:	0003      	movs	r3, r0
 800306e:	22b0      	movs	r2, #176	@ 0xb0
 8003070:	18ba      	adds	r2, r7, r2
 8003072:	6013      	str	r3, [r2, #0]

	do {
		strcpy(gpsParsed[i], token);
 8003074:	24b7      	movs	r4, #183	@ 0xb7
 8003076:	193b      	adds	r3, r7, r4
 8003078:	781a      	ldrb	r2, [r3, #0]
 800307a:	2508      	movs	r5, #8
 800307c:	1979      	adds	r1, r7, r5
 800307e:	0013      	movs	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	189b      	adds	r3, r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	18cb      	adds	r3, r1, r3
 8003088:	26b0      	movs	r6, #176	@ 0xb0
 800308a:	19ba      	adds	r2, r7, r6
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	0011      	movs	r1, r2
 8003090:	0018      	movs	r0, r3
 8003092:	f005 fc90 	bl	80089b6 <strcpy>
		token = strtok(NULL, ",");
 8003096:	4b43      	ldr	r3, [pc, #268]	@ (80031a4 <Parse_GPGGA+0x18c>)
 8003098:	0019      	movs	r1, r3
 800309a:	2000      	movs	r0, #0
 800309c:	f005 fb9a 	bl	80087d4 <strtok>
 80030a0:	0003      	movs	r3, r0
 80030a2:	0031      	movs	r1, r6
 80030a4:	187a      	adds	r2, r7, r1
 80030a6:	6013      	str	r3, [r2, #0]
		i++;
 80030a8:	193b      	adds	r3, r7, r4
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	193b      	adds	r3, r7, r4
 80030ae:	3201      	adds	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
	} while(token != NULL);
 80030b2:	187b      	adds	r3, r7, r1
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1dc      	bne.n	8003074 <Parse_GPGGA+0x5c>

	//token = strtok(NULL, ",");

	snprintf(utc_time, sizeof(utc_time), "%s", gpsParsed[1]);  // Copy the time string
 80030ba:	197b      	adds	r3, r7, r5
 80030bc:	330a      	adds	r3, #10
 80030be:	4a3a      	ldr	r2, [pc, #232]	@ (80031a8 <Parse_GPGGA+0x190>)
 80030c0:	24a0      	movs	r4, #160	@ 0xa0
 80030c2:	1938      	adds	r0, r7, r4
 80030c4:	210a      	movs	r1, #10
 80030c6:	f7ff fa5b 	bl	8002580 <snprintf_>

	// Extract hours, minutes, and seconds
	hour = (utc_time[0] - '0') * 10 + (utc_time[1] - '0');
 80030ca:	0021      	movs	r1, r4
 80030cc:	187b      	adds	r3, r7, r1
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	3b30      	subs	r3, #48	@ 0x30
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	1c1a      	adds	r2, r3, #0
 80030d6:	0092      	lsls	r2, r2, #2
 80030d8:	18d3      	adds	r3, r2, r3
 80030da:	18db      	adds	r3, r3, r3
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	785b      	ldrb	r3, [r3, #1]
 80030e2:	18d3      	adds	r3, r2, r3
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	23ad      	movs	r3, #173	@ 0xad
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	3a30      	subs	r2, #48	@ 0x30
 80030ec:	701a      	strb	r2, [r3, #0]
	min = (utc_time[2] - '0') * 10 + (utc_time[3] - '0');
 80030ee:	187b      	adds	r3, r7, r1
 80030f0:	789b      	ldrb	r3, [r3, #2]
 80030f2:	3b30      	subs	r3, #48	@ 0x30
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	1c1a      	adds	r2, r3, #0
 80030f8:	0092      	lsls	r2, r2, #2
 80030fa:	18d3      	adds	r3, r2, r3
 80030fc:	18db      	adds	r3, r3, r3
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	187b      	adds	r3, r7, r1
 8003102:	78db      	ldrb	r3, [r3, #3]
 8003104:	18d3      	adds	r3, r2, r3
 8003106:	b2da      	uxtb	r2, r3
 8003108:	23ae      	movs	r3, #174	@ 0xae
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	3a30      	subs	r2, #48	@ 0x30
 800310e:	701a      	strb	r2, [r3, #0]
	sec = (utc_time[4] - '0') * 10 + (utc_time[5] - '0');
 8003110:	187b      	adds	r3, r7, r1
 8003112:	791b      	ldrb	r3, [r3, #4]
 8003114:	3b30      	subs	r3, #48	@ 0x30
 8003116:	b2db      	uxtb	r3, r3
 8003118:	1c1a      	adds	r2, r3, #0
 800311a:	0092      	lsls	r2, r2, #2
 800311c:	18d3      	adds	r3, r2, r3
 800311e:	18db      	adds	r3, r3, r3
 8003120:	b2da      	uxtb	r2, r3
 8003122:	187b      	adds	r3, r7, r1
 8003124:	795b      	ldrb	r3, [r3, #5]
 8003126:	18d3      	adds	r3, r2, r3
 8003128:	b2da      	uxtb	r2, r3
 800312a:	23af      	movs	r3, #175	@ 0xaf
 800312c:	18fb      	adds	r3, r7, r3
 800312e:	3a30      	subs	r2, #48	@ 0x30
 8003130:	701a      	strb	r2, [r3, #0]
#if DEBUG == 1
	//Print_UTC_Time(hour, min, sec);
#endif
	//RTC_SetTime(hour, min, sec);

	if(gpsParsed[6][0] == '1' || gpsParsed[6][0] == '2' || gpsParsed[2][0] == 'A' || gpsParsed[1][6] == '.'){
 8003132:	197b      	adds	r3, r7, r5
 8003134:	223c      	movs	r2, #60	@ 0x3c
 8003136:	5c9b      	ldrb	r3, [r3, r2]
 8003138:	2b31      	cmp	r3, #49	@ 0x31
 800313a:	d00c      	beq.n	8003156 <Parse_GPGGA+0x13e>
 800313c:	197b      	adds	r3, r7, r5
 800313e:	223c      	movs	r2, #60	@ 0x3c
 8003140:	5c9b      	ldrb	r3, [r3, r2]
 8003142:	2b32      	cmp	r3, #50	@ 0x32
 8003144:	d007      	beq.n	8003156 <Parse_GPGGA+0x13e>
 8003146:	197b      	adds	r3, r7, r5
 8003148:	7d1b      	ldrb	r3, [r3, #20]
 800314a:	2b41      	cmp	r3, #65	@ 0x41
 800314c:	d003      	beq.n	8003156 <Parse_GPGGA+0x13e>
 800314e:	197b      	adds	r3, r7, r5
 8003150:	7c1b      	ldrb	r3, [r3, #16]
 8003152:	2b2e      	cmp	r3, #46	@ 0x2e
 8003154:	d119      	bne.n	800318a <Parse_GPGGA+0x172>
		RTC_SetTime(hour, min, sec);
 8003156:	23af      	movs	r3, #175	@ 0xaf
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	781a      	ldrb	r2, [r3, #0]
 800315c:	23ae      	movs	r3, #174	@ 0xae
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	7819      	ldrb	r1, [r3, #0]
 8003162:	23ad      	movs	r3, #173	@ 0xad
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	0018      	movs	r0, r3
 800316a:	f000 f855 	bl	8003218 <RTC_SetTime>
		RTC_SetDate(24, RTC_MONTH_DECEMBER, 20, RTC_WEEKDAY_SUNDAY);
 800316e:	2307      	movs	r3, #7
 8003170:	2214      	movs	r2, #20
 8003172:	2112      	movs	r1, #18
 8003174:	2018      	movs	r0, #24
 8003176:	f000 f921 	bl	80033bc <RTC_SetDate>

		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 800317a:	2380      	movs	r3, #128	@ 0x80
 800317c:	015b      	lsls	r3, r3, #5
 800317e:	480b      	ldr	r0, [pc, #44]	@ (80031ac <Parse_GPGGA+0x194>)
 8003180:	2201      	movs	r2, #1
 8003182:	0019      	movs	r1, r3
 8003184:	f001 fde1 	bl	8004d4a <HAL_GPIO_WritePin>
 8003188:	e007      	b.n	800319a <Parse_GPGGA+0x182>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 800318a:	2380      	movs	r3, #128	@ 0x80
 800318c:	015b      	lsls	r3, r3, #5
 800318e:	4807      	ldr	r0, [pc, #28]	@ (80031ac <Parse_GPGGA+0x194>)
 8003190:	2200      	movs	r2, #0
 8003192:	0019      	movs	r1, r3
 8003194:	f001 fdd9 	bl	8004d4a <HAL_GPIO_WritePin>
	}
	//Update_Changes(0);*/
}
 8003198:	46c0      	nop			@ (mov r8, r8)
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	46bd      	mov	sp, r7
 800319e:	b02f      	add	sp, #188	@ 0xbc
 80031a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	080096a0 	.word	0x080096a0
 80031a8:	080096a4 	.word	0x080096a4
 80031ac:	50000800 	.word	0x50000800

080031b0 <Print_UTC_Time>:

void Print_UTC_Time(uint8_t hour, uint8_t minute, uint8_t second) {
 80031b0:	b5b0      	push	{r4, r5, r7, lr}
 80031b2:	b08c      	sub	sp, #48	@ 0x30
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	0004      	movs	r4, r0
 80031b8:	0008      	movs	r0, r1
 80031ba:	0011      	movs	r1, r2
 80031bc:	1dfb      	adds	r3, r7, #7
 80031be:	1c22      	adds	r2, r4, #0
 80031c0:	701a      	strb	r2, [r3, #0]
 80031c2:	1dbb      	adds	r3, r7, #6
 80031c4:	1c02      	adds	r2, r0, #0
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	1d7b      	adds	r3, r7, #5
 80031ca:	1c0a      	adds	r2, r1, #0
 80031cc:	701a      	strb	r2, [r3, #0]
	char time_str[25];
    snprintf(time_str, sizeof(time_str), "UTC Time: %02d:%02d:%02d \r\n", hour, minute, second);
 80031ce:	1dfb      	adds	r3, r7, #7
 80031d0:	781c      	ldrb	r4, [r3, #0]
 80031d2:	1dbb      	adds	r3, r7, #6
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	1d7a      	adds	r2, r7, #5
 80031d8:	7812      	ldrb	r2, [r2, #0]
 80031da:	490d      	ldr	r1, [pc, #52]	@ (8003210 <Print_UTC_Time+0x60>)
 80031dc:	250c      	movs	r5, #12
 80031de:	1978      	adds	r0, r7, r5
 80031e0:	9201      	str	r2, [sp, #4]
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	0023      	movs	r3, r4
 80031e6:	000a      	movs	r2, r1
 80031e8:	2119      	movs	r1, #25
 80031ea:	f7ff f9c9 	bl	8002580 <snprintf_>
    HAL_UART_Transmit(&huart2, (uint8_t*)time_str, strlen(time_str), 100);
 80031ee:	002c      	movs	r4, r5
 80031f0:	193b      	adds	r3, r7, r4
 80031f2:	0018      	movs	r0, r3
 80031f4:	f7fc ff84 	bl	8000100 <strlen>
 80031f8:	0003      	movs	r3, r0
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	1939      	adds	r1, r7, r4
 80031fe:	4805      	ldr	r0, [pc, #20]	@ (8003214 <Print_UTC_Time+0x64>)
 8003200:	2364      	movs	r3, #100	@ 0x64
 8003202:	f004 f89b 	bl	800733c <HAL_UART_Transmit>
}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	46bd      	mov	sp, r7
 800320a:	b00a      	add	sp, #40	@ 0x28
 800320c:	bdb0      	pop	{r4, r5, r7, pc}
 800320e:	46c0      	nop			@ (mov r8, r8)
 8003210:	080096a8 	.word	0x080096a8
 8003214:	20000350 	.word	0x20000350

08003218 <RTC_SetTime>:

void RTC_SetTime(uint8_t hour, uint8_t min, uint8_t sec)
{
 8003218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800321a:	b08b      	sub	sp, #44	@ 0x2c
 800321c:	af00      	add	r7, sp, #0
 800321e:	0004      	movs	r4, r0
 8003220:	0008      	movs	r0, r1
 8003222:	0011      	movs	r1, r2
 8003224:	250f      	movs	r5, #15
 8003226:	197b      	adds	r3, r7, r5
 8003228:	1c22      	adds	r2, r4, #0
 800322a:	701a      	strb	r2, [r3, #0]
 800322c:	260e      	movs	r6, #14
 800322e:	19bb      	adds	r3, r7, r6
 8003230:	1c02      	adds	r2, r0, #0
 8003232:	701a      	strb	r2, [r3, #0]
 8003234:	230d      	movs	r3, #13
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	1c0a      	adds	r2, r1, #0
 800323a:	701a      	strb	r2, [r3, #0]
	RTC_TimeTypeDef sTime;
	uint8_t new_hour=0, new_min=0;
 800323c:	2327      	movs	r3, #39	@ 0x27
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	2200      	movs	r2, #0
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	2326      	movs	r3, #38	@ 0x26
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]

	utc_offset = calculate_utc_offset(UTC_Constant);
 800324c:	4b57      	ldr	r3, [pc, #348]	@ (80033ac <RTC_SetTime+0x194>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	001a      	movs	r2, r3
 8003252:	4c57      	ldr	r4, [pc, #348]	@ (80033b0 <RTC_SetTime+0x198>)
 8003254:	003b      	movs	r3, r7
 8003256:	0011      	movs	r1, r2
 8003258:	0018      	movs	r0, r3
 800325a:	f7ff fa2d 	bl	80026b8 <calculate_utc_offset>
 800325e:	003a      	movs	r2, r7
 8003260:	0023      	movs	r3, r4
 8003262:	ca03      	ldmia	r2!, {r0, r1}
 8003264:	c303      	stmia	r3!, {r0, r1}

	if(min + utc_offset.minutes < 0){
 8003266:	19bb      	adds	r3, r7, r6
 8003268:	781a      	ldrb	r2, [r3, #0]
 800326a:	4b51      	ldr	r3, [pc, #324]	@ (80033b0 <RTC_SetTime+0x198>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	18d3      	adds	r3, r2, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	da10      	bge.n	8003296 <RTC_SetTime+0x7e>
		new_min = 60 + min + utc_offset.minutes;
 8003274:	4b4e      	ldr	r3, [pc, #312]	@ (80033b0 <RTC_SetTime+0x198>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	19bb      	adds	r3, r7, r6
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	18d3      	adds	r3, r2, r3
 8003280:	b2da      	uxtb	r2, r3
 8003282:	2326      	movs	r3, #38	@ 0x26
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	323c      	adds	r2, #60	@ 0x3c
 8003288:	701a      	strb	r2, [r3, #0]
		hour -= 1;
 800328a:	197b      	adds	r3, r7, r5
 800328c:	197a      	adds	r2, r7, r5
 800328e:	7812      	ldrb	r2, [r2, #0]
 8003290:	3a01      	subs	r2, #1
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	e023      	b.n	80032de <RTC_SetTime+0xc6>
		//printf("min <0: %d \r\n", new_min);
	}
	else if(min + utc_offset.minutes > 59){
 8003296:	210e      	movs	r1, #14
 8003298:	187b      	adds	r3, r7, r1
 800329a:	781a      	ldrb	r2, [r3, #0]
 800329c:	4b44      	ldr	r3, [pc, #272]	@ (80033b0 <RTC_SetTime+0x198>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	18d3      	adds	r3, r2, r3
 80032a2:	2b3b      	cmp	r3, #59	@ 0x3b
 80032a4:	dd11      	ble.n	80032ca <RTC_SetTime+0xb2>
		new_min =  min + utc_offset.minutes - 60;
 80032a6:	4b42      	ldr	r3, [pc, #264]	@ (80033b0 <RTC_SetTime+0x198>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	187b      	adds	r3, r7, r1
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	18d3      	adds	r3, r2, r3
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	2326      	movs	r3, #38	@ 0x26
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	3a3c      	subs	r2, #60	@ 0x3c
 80032ba:	701a      	strb	r2, [r3, #0]
		hour += 1;
 80032bc:	220f      	movs	r2, #15
 80032be:	18bb      	adds	r3, r7, r2
 80032c0:	18ba      	adds	r2, r7, r2
 80032c2:	7812      	ldrb	r2, [r2, #0]
 80032c4:	3201      	adds	r2, #1
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	e009      	b.n	80032de <RTC_SetTime+0xc6>
		//printf("min >59: %d \r\n", new_min);
	}
	else{
		new_min = min + utc_offset.minutes;
 80032ca:	4b39      	ldr	r3, [pc, #228]	@ (80033b0 <RTC_SetTime+0x198>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	b2d9      	uxtb	r1, r3
 80032d0:	2326      	movs	r3, #38	@ 0x26
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	220e      	movs	r2, #14
 80032d6:	18ba      	adds	r2, r7, r2
 80032d8:	7812      	ldrb	r2, [r2, #0]
 80032da:	188a      	adds	r2, r1, r2
 80032dc:	701a      	strb	r2, [r3, #0]
		//printf("min 0-59: %d \r\n", new_min);
	}

	if(hour + utc_offset.hours < 0){
 80032de:	210f      	movs	r1, #15
 80032e0:	187b      	adds	r3, r7, r1
 80032e2:	781a      	ldrb	r2, [r3, #0]
 80032e4:	4b32      	ldr	r3, [pc, #200]	@ (80033b0 <RTC_SetTime+0x198>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	18d3      	adds	r3, r2, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	da0b      	bge.n	8003306 <RTC_SetTime+0xee>
		new_hour = 24 + hour + utc_offset.hours;
 80032ee:	4b30      	ldr	r3, [pc, #192]	@ (80033b0 <RTC_SetTime+0x198>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	b2da      	uxtb	r2, r3
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	18d3      	adds	r3, r2, r3
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	2327      	movs	r3, #39	@ 0x27
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	3218      	adds	r2, #24
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e01d      	b.n	8003342 <RTC_SetTime+0x12a>
		//printf("hour <0: %d \r\n", new_hour);
	}
	else if(hour + utc_offset.hours > 23){
 8003306:	210f      	movs	r1, #15
 8003308:	187b      	adds	r3, r7, r1
 800330a:	781a      	ldrb	r2, [r3, #0]
 800330c:	4b28      	ldr	r3, [pc, #160]	@ (80033b0 <RTC_SetTime+0x198>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	18d3      	adds	r3, r2, r3
 8003312:	2b17      	cmp	r3, #23
 8003314:	dd0b      	ble.n	800332e <RTC_SetTime+0x116>
		new_hour = hour + utc_offset.hours - 24;
 8003316:	4b26      	ldr	r3, [pc, #152]	@ (80033b0 <RTC_SetTime+0x198>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	b2da      	uxtb	r2, r3
 800331c:	187b      	adds	r3, r7, r1
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	18d3      	adds	r3, r2, r3
 8003322:	b2da      	uxtb	r2, r3
 8003324:	2327      	movs	r3, #39	@ 0x27
 8003326:	18fb      	adds	r3, r7, r3
 8003328:	3a18      	subs	r2, #24
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	e009      	b.n	8003342 <RTC_SetTime+0x12a>
		//printf("hour >23: %d \r\n", new_hour);
	}
	else{
		new_hour = hour + utc_offset.hours;
 800332e:	4b20      	ldr	r3, [pc, #128]	@ (80033b0 <RTC_SetTime+0x198>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	b2d9      	uxtb	r1, r3
 8003334:	2327      	movs	r3, #39	@ 0x27
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	220f      	movs	r2, #15
 800333a:	18ba      	adds	r2, r7, r2
 800333c:	7812      	ldrb	r2, [r2, #0]
 800333e:	188a      	adds	r2, r1, r2
 8003340:	701a      	strb	r2, [r3, #0]
		//printf("hour 0-23: %d \r\n", new_hour);
	}

	if(IsOneHourAdd) {
 8003342:	4b1c      	ldr	r3, [pc, #112]	@ (80033b4 <RTC_SetTime+0x19c>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <RTC_SetTime+0x13e>
		new_hour += 1;
 800334a:	2227      	movs	r2, #39	@ 0x27
 800334c:	18bb      	adds	r3, r7, r2
 800334e:	18ba      	adds	r2, r7, r2
 8003350:	7812      	ldrb	r2, [r2, #0]
 8003352:	3201      	adds	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
	}

	sTime.Hours = new_hour;
 8003356:	2110      	movs	r1, #16
 8003358:	187b      	adds	r3, r7, r1
 800335a:	2227      	movs	r2, #39	@ 0x27
 800335c:	18ba      	adds	r2, r7, r2
 800335e:	7812      	ldrb	r2, [r2, #0]
 8003360:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = new_min;
 8003362:	187b      	adds	r3, r7, r1
 8003364:	2226      	movs	r2, #38	@ 0x26
 8003366:	18ba      	adds	r2, r7, r2
 8003368:	7812      	ldrb	r2, [r2, #0]
 800336a:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = sec;
 800336c:	187b      	adds	r3, r7, r1
 800336e:	220d      	movs	r2, #13
 8003370:	18ba      	adds	r2, r7, r2
 8003372:	7812      	ldrb	r2, [r2, #0]
 8003374:	709a      	strb	r2, [r3, #2]
	sTime.SubSeconds = 0;
 8003376:	187b      	adds	r3, r7, r1
 8003378:	2200      	movs	r2, #0
 800337a:	605a      	str	r2, [r3, #4]
	sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800337c:	187b      	adds	r3, r7, r1
 800337e:	2200      	movs	r2, #0
 8003380:	70da      	strb	r2, [r3, #3]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003382:	187b      	adds	r3, r7, r1
 8003384:	2200      	movs	r2, #0
 8003386:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003388:	187b      	adds	r3, r7, r1
 800338a:	2200      	movs	r2, #0
 800338c:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800338e:	1879      	adds	r1, r7, r1
 8003390:	4b09      	ldr	r3, [pc, #36]	@ (80033b8 <RTC_SetTime+0x1a0>)
 8003392:	2200      	movs	r2, #0
 8003394:	0018      	movs	r0, r3
 8003396:	f002 fbdf 	bl	8005b58 <HAL_RTC_SetTime>
 800339a:	1e03      	subs	r3, r0, #0
 800339c:	d001      	beq.n	80033a2 <RTC_SetTime+0x18a>
	{
		Error_Handler();
 800339e:	f000 f9b9 	bl	8003714 <Error_Handler>
	}

	//Print_UTC_Time(new_hour, new_min, sec);
}
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	46bd      	mov	sp, r7
 80033a6:	b00b      	add	sp, #44	@ 0x2c
 80033a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033aa:	46c0      	nop			@ (mov r8, r8)
 80033ac:	200000ac 	.word	0x200000ac
 80033b0:	200000a4 	.word	0x200000a4
 80033b4:	200000a1 	.word	0x200000a1
 80033b8:	20000134 	.word	0x20000134

080033bc <RTC_SetDate>:

void RTC_SetDate(uint8_t year, uint8_t month, uint8_t date, uint8_t day)
{
 80033bc:	b5b0      	push	{r4, r5, r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	0005      	movs	r5, r0
 80033c4:	000c      	movs	r4, r1
 80033c6:	0010      	movs	r0, r2
 80033c8:	0019      	movs	r1, r3
 80033ca:	1dfb      	adds	r3, r7, #7
 80033cc:	1c2a      	adds	r2, r5, #0
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	1dbb      	adds	r3, r7, #6
 80033d2:	1c22      	adds	r2, r4, #0
 80033d4:	701a      	strb	r2, [r3, #0]
 80033d6:	1d7b      	adds	r3, r7, #5
 80033d8:	1c02      	adds	r2, r0, #0
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	1c0a      	adds	r2, r1, #0
 80033e0:	701a      	strb	r2, [r3, #0]
	RTC_DateTypeDef sDate = {0};
 80033e2:	210c      	movs	r1, #12
 80033e4:	187b      	adds	r3, r7, r1
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]

	sDate.WeekDay = day;
 80033ea:	187b      	adds	r3, r7, r1
 80033ec:	1d3a      	adds	r2, r7, #4
 80033ee:	7812      	ldrb	r2, [r2, #0]
 80033f0:	701a      	strb	r2, [r3, #0]
	sDate.Month = month;
 80033f2:	187b      	adds	r3, r7, r1
 80033f4:	1dba      	adds	r2, r7, #6
 80033f6:	7812      	ldrb	r2, [r2, #0]
 80033f8:	705a      	strb	r2, [r3, #1]
	sDate.Date = date;
 80033fa:	187b      	adds	r3, r7, r1
 80033fc:	1d7a      	adds	r2, r7, #5
 80033fe:	7812      	ldrb	r2, [r2, #0]
 8003400:	709a      	strb	r2, [r3, #2]
	sDate.Year = year;
 8003402:	187b      	adds	r3, r7, r1
 8003404:	1dfa      	adds	r2, r7, #7
 8003406:	7812      	ldrb	r2, [r2, #0]
 8003408:	70da      	strb	r2, [r3, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800340a:	1879      	adds	r1, r7, r1
 800340c:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <RTC_SetDate+0x6c>)
 800340e:	2200      	movs	r2, #0
 8003410:	0018      	movs	r0, r3
 8003412:	f002 fca5 	bl	8005d60 <HAL_RTC_SetDate>
 8003416:	1e03      	subs	r3, r0, #0
 8003418:	d001      	beq.n	800341e <RTC_SetDate+0x62>
	{
		Error_Handler();
 800341a:	f000 f97b 	bl	8003714 <Error_Handler>
	}
	//HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, PROTECTION_KEY);  // backup register
}
 800341e:	46c0      	nop			@ (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b004      	add	sp, #16
 8003424:	bdb0      	pop	{r4, r5, r7, pc}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	20000134 	.word	0x20000134

0800342c <Button_Init>:

void Button_Init(void)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b089      	sub	sp, #36	@ 0x24
 8003430:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003432:	240c      	movs	r4, #12
 8003434:	193b      	adds	r3, r7, r4
 8003436:	0018      	movs	r0, r3
 8003438:	2314      	movs	r3, #20
 800343a:	001a      	movs	r2, r3
 800343c:	2100      	movs	r1, #0
 800343e:	f005 f9c1 	bl	80087c4 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003442:	4b1e      	ldr	r3, [pc, #120]	@ (80034bc <Button_Init+0x90>)
 8003444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003446:	4b1d      	ldr	r3, [pc, #116]	@ (80034bc <Button_Init+0x90>)
 8003448:	2104      	movs	r1, #4
 800344a:	430a      	orrs	r2, r1
 800344c:	635a      	str	r2, [r3, #52]	@ 0x34
 800344e:	4b1b      	ldr	r3, [pc, #108]	@ (80034bc <Button_Init+0x90>)
 8003450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003452:	2204      	movs	r2, #4
 8003454:	4013      	ands	r3, r2
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800345a:	4b18      	ldr	r3, [pc, #96]	@ (80034bc <Button_Init+0x90>)
 800345c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800345e:	4b17      	ldr	r3, [pc, #92]	@ (80034bc <Button_Init+0x90>)
 8003460:	2101      	movs	r1, #1
 8003462:	430a      	orrs	r2, r1
 8003464:	635a      	str	r2, [r3, #52]	@ 0x34
 8003466:	4b15      	ldr	r3, [pc, #84]	@ (80034bc <Button_Init+0x90>)
 8003468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346a:	2201      	movs	r2, #1
 800346c:	4013      	ands	r3, r2
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003472:	4b12      	ldr	r3, [pc, #72]	@ (80034bc <Button_Init+0x90>)
 8003474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003476:	4b11      	ldr	r3, [pc, #68]	@ (80034bc <Button_Init+0x90>)
 8003478:	2102      	movs	r1, #2
 800347a:	430a      	orrs	r2, r1
 800347c:	635a      	str	r2, [r3, #52]	@ 0x34
 800347e:	4b0f      	ldr	r3, [pc, #60]	@ (80034bc <Button_Init+0x90>)
 8003480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003482:	2202      	movs	r2, #2
 8003484:	4013      	ands	r3, r2
 8003486:	603b      	str	r3, [r7, #0]
 8003488:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BTN_PORT, BTN_PIN, GPIO_PIN_RESET);
 800348a:	4b0d      	ldr	r3, [pc, #52]	@ (80034c0 <Button_Init+0x94>)
 800348c:	2200      	movs	r2, #0
 800348e:	2101      	movs	r1, #1
 8003490:	0018      	movs	r0, r3
 8003492:	f001 fc5a 	bl	8004d4a <HAL_GPIO_WritePin>


	GPIO_InitStruct.Pin = BTN_PIN;
 8003496:	193b      	adds	r3, r7, r4
 8003498:	2201      	movs	r2, #1
 800349a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800349c:	193b      	adds	r3, r7, r4
 800349e:	2200      	movs	r2, #0
 80034a0:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034a2:	193b      	adds	r3, r7, r4
 80034a4:	2201      	movs	r2, #1
 80034a6:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(BTN_PORT, &GPIO_InitStruct);
 80034a8:	193b      	adds	r3, r7, r4
 80034aa:	4a05      	ldr	r2, [pc, #20]	@ (80034c0 <Button_Init+0x94>)
 80034ac:	0019      	movs	r1, r3
 80034ae:	0010      	movs	r0, r2
 80034b0:	f001 faca 	bl	8004a48 <HAL_GPIO_Init>
}
 80034b4:	46c0      	nop			@ (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b009      	add	sp, #36	@ 0x24
 80034ba:	bd90      	pop	{r4, r7, pc}
 80034bc:	40021000 	.word	0x40021000
 80034c0:	50000800 	.word	0x50000800

080034c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
	}

	if(htim->Instance == TIM7) {
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a14      	ldr	r2, [pc, #80]	@ (8003524 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d122      	bne.n	800351c <HAL_TIM_PeriodElapsedCallback+0x58>
		if(gpsCheck == 30) {
 80034d6:	4b14      	ldr	r3, [pc, #80]	@ (8003528 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b1e      	cmp	r3, #30
 80034dc:	d118      	bne.n	8003510 <HAL_TIM_PeriodElapsedCallback+0x4c>
			Read_GPS(gps_buff, BUFF_SIZE);
 80034de:	4b13      	ldr	r3, [pc, #76]	@ (800352c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80034e0:	2164      	movs	r1, #100	@ 0x64
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7ff fd44 	bl	8002f70 <Read_GPS>

			if(strstr(gps_buff, "$GNRMC") != NULL){
 80034e8:	4a11      	ldr	r2, [pc, #68]	@ (8003530 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80034ea:	4b10      	ldr	r3, [pc, #64]	@ (800352c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80034ec:	0011      	movs	r1, r2
 80034ee:	0018      	movs	r0, r3
 80034f0:	f005 f9d0 	bl	8008894 <strstr>
 80034f4:	1e03      	subs	r3, r0, #0
 80034f6:	d007      	beq.n	8003508 <HAL_TIM_PeriodElapsedCallback+0x44>
			  printf(gps_buff);
 80034f8:	4b0c      	ldr	r3, [pc, #48]	@ (800352c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80034fa:	0018      	movs	r0, r3
 80034fc:	f7ff f822 	bl	8002544 <printf_>
			  Parse_GPGGA(gps_buff);
 8003500:	4b0a      	ldr	r3, [pc, #40]	@ (800352c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003502:	0018      	movs	r0, r3
 8003504:	f7ff fd88 	bl	8003018 <Parse_GPGGA>
			}

			gpsCheck = 0;
 8003508:	4b07      	ldr	r3, [pc, #28]	@ (8003528 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800350a:	2200      	movs	r2, #0
 800350c:	701a      	strb	r2, [r3, #0]
		} else {
			gpsCheck++;
		}
	}
}
 800350e:	e005      	b.n	800351c <HAL_TIM_PeriodElapsedCallback+0x58>
			gpsCheck++;
 8003510:	4b05      	ldr	r3, [pc, #20]	@ (8003528 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	3301      	adds	r3, #1
 8003516:	b2da      	uxtb	r2, r3
 8003518:	4b03      	ldr	r3, [pc, #12]	@ (8003528 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800351a:	701a      	strb	r2, [r3, #0]
}
 800351c:	46c0      	nop			@ (mov r8, r8)
 800351e:	46bd      	mov	sp, r7
 8003520:	b002      	add	sp, #8
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40001400 	.word	0x40001400
 8003528:	200000be 	.word	0x200000be
 800352c:	200000c4 	.word	0x200000c4
 8003530:	08009680 	.word	0x08009680

08003534 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	if(!inMenu) {
 800353c:	4b06      	ldr	r3, [pc, #24]	@ (8003558 <HAL_RTC_AlarmAEventCallback+0x24>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2201      	movs	r2, #1
 8003542:	4053      	eors	r3, r2
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_RTC_AlarmAEventCallback+0x1a>
		Show_Time();
 800354a:	f7ff faf3 	bl	8002b34 <Show_Time>
	}
}
 800354e:	46c0      	nop			@ (mov r8, r8)
 8003550:	46bd      	mov	sp, r7
 8003552:	b002      	add	sp, #8
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			@ (mov r8, r8)
 8003558:	200000c0 	.word	0x200000c0

0800355c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8003564:	23a0      	movs	r3, #160	@ 0xa0
 8003566:	05db      	lsls	r3, r3, #23
 8003568:	2201      	movs	r2, #1
 800356a:	2140      	movs	r1, #64	@ 0x40
 800356c:	0018      	movs	r0, r3
 800356e:	f001 fbec 	bl	8004d4a <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	for(int i=0; i < 2000; i++);
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	e002      	b.n	800357e <HAL_SPI_TxCpltCallback+0x22>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	3301      	adds	r3, #1
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	23fa      	movs	r3, #250	@ 0xfa
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	429a      	cmp	r2, r3
 8003586:	dbf7      	blt.n	8003578 <HAL_SPI_TxCpltCallback+0x1c>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8003588:	23a0      	movs	r3, #160	@ 0xa0
 800358a:	05db      	lsls	r3, r3, #23
 800358c:	2200      	movs	r2, #0
 800358e:	2140      	movs	r1, #64	@ 0x40
 8003590:	0018      	movs	r0, r3
 8003592:	f001 fbda 	bl	8004d4a <HAL_GPIO_WritePin>
}
 8003596:	46c0      	nop			@ (mov r8, r8)
 8003598:	46bd      	mov	sp, r7
 800359a:	b004      	add	sp, #16
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <process_button_events>:

void process_button_events(void)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
    //static uint32_t debounce_time = 0;
    static uint8_t pending_single_press = 0;

    // Read the button state
    uint8_t current_state = HAL_GPIO_ReadPin(BTN_PORT, BTN_PIN);
 80035a6:	1dfc      	adds	r4, r7, #7
 80035a8:	4b45      	ldr	r3, [pc, #276]	@ (80036c0 <process_button_events+0x120>)
 80035aa:	2101      	movs	r1, #1
 80035ac:	0018      	movs	r0, r3
 80035ae:	f001 fbaf 	bl	8004d10 <HAL_GPIO_ReadPin>
 80035b2:	0003      	movs	r3, r0
 80035b4:	7023      	strb	r3, [r4, #0]

    if (current_state == GPIO_PIN_RESET && button_state == 0) {
 80035b6:	1dfb      	adds	r3, r7, #7
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d122      	bne.n	8003604 <process_button_events+0x64>
 80035be:	4b41      	ldr	r3, [pc, #260]	@ (80036c4 <process_button_events+0x124>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d11e      	bne.n	8003604 <process_button_events+0x64>
        // Button Press Detected
        button_press_time = HAL_GetTick();
 80035c6:	f000 fe15 	bl	80041f4 <HAL_GetTick>
 80035ca:	0002      	movs	r2, r0
 80035cc:	4b3e      	ldr	r3, [pc, #248]	@ (80036c8 <process_button_events+0x128>)
 80035ce:	601a      	str	r2, [r3, #0]
        button_state = 1;
 80035d0:	4b3c      	ldr	r3, [pc, #240]	@ (80036c4 <process_button_events+0x124>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
        if ((button_press_time - last_press_time) < 1000) {
 80035d6:	4b3c      	ldr	r3, [pc, #240]	@ (80036c8 <process_button_events+0x128>)
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4b3c      	ldr	r3, [pc, #240]	@ (80036cc <process_button_events+0x12c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	1ad2      	subs	r2, r2, r3
 80035e0:	23fa      	movs	r3, #250	@ 0xfa
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d206      	bcs.n	80035f6 <process_button_events+0x56>
            press_count++;
 80035e8:	4b39      	ldr	r3, [pc, #228]	@ (80036d0 <process_button_events+0x130>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	3301      	adds	r3, #1
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	4b37      	ldr	r3, [pc, #220]	@ (80036d0 <process_button_events+0x130>)
 80035f2:	701a      	strb	r2, [r3, #0]
 80035f4:	e002      	b.n	80035fc <process_button_events+0x5c>
        } else {
            press_count = 1;
 80035f6:	4b36      	ldr	r3, [pc, #216]	@ (80036d0 <process_button_events+0x130>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	701a      	strb	r2, [r3, #0]
        }
        last_press_time = button_press_time;
 80035fc:	4b32      	ldr	r3, [pc, #200]	@ (80036c8 <process_button_events+0x128>)
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	4b32      	ldr	r3, [pc, #200]	@ (80036cc <process_button_events+0x12c>)
 8003602:	601a      	str	r2, [r3, #0]
    }

    if (current_state == GPIO_PIN_SET && button_state == 1) {
 8003604:	1dfb      	adds	r3, r7, #7
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d127      	bne.n	800365c <process_button_events+0xbc>
 800360c:	4b2d      	ldr	r3, [pc, #180]	@ (80036c4 <process_button_events+0x124>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d123      	bne.n	800365c <process_button_events+0xbc>
        // Button Released
        button_release_time = HAL_GetTick();
 8003614:	f000 fdee 	bl	80041f4 <HAL_GetTick>
 8003618:	0002      	movs	r2, r0
 800361a:	4b2e      	ldr	r3, [pc, #184]	@ (80036d4 <process_button_events+0x134>)
 800361c:	601a      	str	r2, [r3, #0]
        button_state = 0;
 800361e:	4b29      	ldr	r3, [pc, #164]	@ (80036c4 <process_button_events+0x124>)
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]

        if (!long_press_detected) {
 8003624:	4b2c      	ldr	r3, [pc, #176]	@ (80036d8 <process_button_events+0x138>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d114      	bne.n	8003656 <process_button_events+0xb6>
            if (press_count == 1) {
 800362c:	4b28      	ldr	r3, [pc, #160]	@ (80036d0 <process_button_events+0x130>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d103      	bne.n	800363c <process_button_events+0x9c>
                // Mark a pending single press
                pending_single_press = 1;
 8003634:	4b29      	ldr	r3, [pc, #164]	@ (80036dc <process_button_events+0x13c>)
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
 800363a:	e00c      	b.n	8003656 <process_button_events+0xb6>
            } else if (press_count == 2) {
 800363c:	4b24      	ldr	r3, [pc, #144]	@ (80036d0 <process_button_events+0x130>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d108      	bne.n	8003656 <process_button_events+0xb6>
                // Handle double press immediately
                //double_press_event();
            	status = 2;
 8003644:	4b26      	ldr	r3, [pc, #152]	@ (80036e0 <process_button_events+0x140>)
 8003646:	2202      	movs	r2, #2
 8003648:	701a      	strb	r2, [r3, #0]
                press_count = 0;
 800364a:	4b21      	ldr	r3, [pc, #132]	@ (80036d0 <process_button_events+0x130>)
 800364c:	2200      	movs	r2, #0
 800364e:	701a      	strb	r2, [r3, #0]
                pending_single_press = 0; // Clear pending single press
 8003650:	4b22      	ldr	r3, [pc, #136]	@ (80036dc <process_button_events+0x13c>)
 8003652:	2200      	movs	r2, #0
 8003654:	701a      	strb	r2, [r3, #0]
            }
        }
        long_press_detected = 0;
 8003656:	4b20      	ldr	r3, [pc, #128]	@ (80036d8 <process_button_events+0x138>)
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
    }

    // Check for long press
    if (button_state == 1 && (HAL_GetTick() - button_press_time) > 3000 && !long_press_detected) {
 800365c:	4b19      	ldr	r3, [pc, #100]	@ (80036c4 <process_button_events+0x124>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d115      	bne.n	8003690 <process_button_events+0xf0>
 8003664:	f000 fdc6 	bl	80041f4 <HAL_GetTick>
 8003668:	0002      	movs	r2, r0
 800366a:	4b17      	ldr	r3, [pc, #92]	@ (80036c8 <process_button_events+0x128>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	4a1c      	ldr	r2, [pc, #112]	@ (80036e4 <process_button_events+0x144>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d90c      	bls.n	8003690 <process_button_events+0xf0>
 8003676:	4b18      	ldr	r3, [pc, #96]	@ (80036d8 <process_button_events+0x138>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d108      	bne.n	8003690 <process_button_events+0xf0>
        long_press_detected = 1;
 800367e:	4b16      	ldr	r3, [pc, #88]	@ (80036d8 <process_button_events+0x138>)
 8003680:	2201      	movs	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]
        //long_press_event();
        status = 3;
 8003684:	4b16      	ldr	r3, [pc, #88]	@ (80036e0 <process_button_events+0x140>)
 8003686:	2203      	movs	r2, #3
 8003688:	701a      	strb	r2, [r3, #0]
        pending_single_press = 0; // Cancel pending single press
 800368a:	4b14      	ldr	r3, [pc, #80]	@ (80036dc <process_button_events+0x13c>)
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
    }

    // Handle single press after a delay to confirm no double press
    if (pending_single_press && (HAL_GetTick() - last_press_time) > 300) {
 8003690:	4b12      	ldr	r3, [pc, #72]	@ (80036dc <process_button_events+0x13c>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00f      	beq.n	80036b8 <process_button_events+0x118>
 8003698:	f000 fdac 	bl	80041f4 <HAL_GetTick>
 800369c:	0002      	movs	r2, r0
 800369e:	4b0b      	ldr	r3, [pc, #44]	@ (80036cc <process_button_events+0x12c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1ad2      	subs	r2, r2, r3
 80036a4:	2396      	movs	r3, #150	@ 0x96
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d905      	bls.n	80036b8 <process_button_events+0x118>
        //single_press_event();
    	status = 1;
 80036ac:	4b0c      	ldr	r3, [pc, #48]	@ (80036e0 <process_button_events+0x140>)
 80036ae:	2201      	movs	r2, #1
 80036b0:	701a      	strb	r2, [r3, #0]
        pending_single_press = 0; // Clear pending single press
 80036b2:	4b0a      	ldr	r3, [pc, #40]	@ (80036dc <process_button_events+0x13c>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
    }
}
 80036b8:	46c0      	nop			@ (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b003      	add	sp, #12
 80036be:	bd90      	pop	{r4, r7, pc}
 80036c0:	50000800 	.word	0x50000800
 80036c4:	200000bd 	.word	0x200000bd
 80036c8:	200000b0 	.word	0x200000b0
 80036cc:	200000b8 	.word	0x200000b8
 80036d0:	200000bc 	.word	0x200000bc
 80036d4:	200000b4 	.word	0x200000b4
 80036d8:	200000bf 	.word	0x200000bf
 80036dc:	20000130 	.word	0x20000130
 80036e0:	200000ad 	.word	0x200000ad
 80036e4:	00000bb8 	.word	0x00000bb8

080036e8 <_putchar>:


void _putchar(char character)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	0002      	movs	r2, r0
 80036f0:	1dfb      	adds	r3, r7, #7
 80036f2:	701a      	strb	r2, [r3, #0]
	while(!(USART2->ISR & UART_FLAG_TXE));
 80036f4:	46c0      	nop			@ (mov r8, r8)
 80036f6:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <_putchar+0x28>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	2280      	movs	r2, #128	@ 0x80
 80036fc:	4013      	ands	r3, r2
 80036fe:	d0fa      	beq.n	80036f6 <_putchar+0xe>
	USART2->TDR = character & 0xFF;
 8003700:	4b03      	ldr	r3, [pc, #12]	@ (8003710 <_putchar+0x28>)
 8003702:	1dfa      	adds	r2, r7, #7
 8003704:	7812      	ldrb	r2, [r2, #0]
 8003706:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003708:	46c0      	nop			@ (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40004400 	.word	0x40004400

08003714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003718:	b672      	cpsid	i
}
 800371a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800371c:	46c0      	nop			@ (mov r8, r8)
 800371e:	e7fd      	b.n	800371c <Error_Handler+0x8>

08003720 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b090      	sub	sp, #64	@ 0x40
 8003724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003726:	232c      	movs	r3, #44	@ 0x2c
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	0018      	movs	r0, r3
 800372c:	2314      	movs	r3, #20
 800372e:	001a      	movs	r2, r3
 8003730:	2100      	movs	r1, #0
 8003732:	f005 f847 	bl	80087c4 <memset>
  RTC_DateTypeDef sDate = {0};
 8003736:	2328      	movs	r3, #40	@ 0x28
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800373e:	003b      	movs	r3, r7
 8003740:	0018      	movs	r0, r3
 8003742:	2328      	movs	r3, #40	@ 0x28
 8003744:	001a      	movs	r2, r3
 8003746:	2100      	movs	r1, #0
 8003748:	f005 f83c 	bl	80087c4 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800374c:	4b2a      	ldr	r3, [pc, #168]	@ (80037f8 <MX_RTC_Init+0xd8>)
 800374e:	4a2b      	ldr	r2, [pc, #172]	@ (80037fc <MX_RTC_Init+0xdc>)
 8003750:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003752:	4b29      	ldr	r3, [pc, #164]	@ (80037f8 <MX_RTC_Init+0xd8>)
 8003754:	2200      	movs	r2, #0
 8003756:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8003758:	4b27      	ldr	r3, [pc, #156]	@ (80037f8 <MX_RTC_Init+0xd8>)
 800375a:	227f      	movs	r2, #127	@ 0x7f
 800375c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800375e:	4b26      	ldr	r3, [pc, #152]	@ (80037f8 <MX_RTC_Init+0xd8>)
 8003760:	22ff      	movs	r2, #255	@ 0xff
 8003762:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003764:	4b24      	ldr	r3, [pc, #144]	@ (80037f8 <MX_RTC_Init+0xd8>)
 8003766:	2200      	movs	r2, #0
 8003768:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800376a:	4b23      	ldr	r3, [pc, #140]	@ (80037f8 <MX_RTC_Init+0xd8>)
 800376c:	2200      	movs	r2, #0
 800376e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003770:	4b21      	ldr	r3, [pc, #132]	@ (80037f8 <MX_RTC_Init+0xd8>)
 8003772:	2200      	movs	r2, #0
 8003774:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003776:	4b20      	ldr	r3, [pc, #128]	@ (80037f8 <MX_RTC_Init+0xd8>)
 8003778:	2280      	movs	r2, #128	@ 0x80
 800377a:	05d2      	lsls	r2, r2, #23
 800377c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800377e:	4b1e      	ldr	r3, [pc, #120]	@ (80037f8 <MX_RTC_Init+0xd8>)
 8003780:	2200      	movs	r2, #0
 8003782:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003784:	4b1c      	ldr	r3, [pc, #112]	@ (80037f8 <MX_RTC_Init+0xd8>)
 8003786:	0018      	movs	r0, r3
 8003788:	f002 f944 	bl	8005a14 <HAL_RTC_Init>
 800378c:	1e03      	subs	r3, r0, #0
 800378e:	d001      	beq.n	8003794 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8003790:	f7ff ffc0 	bl	8003714 <Error_Handler>
    Error_Handler();
  }*/

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8003794:	003b      	movs	r3, r7
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800379a:	003b      	movs	r3, r7
 800379c:	2200      	movs	r2, #0
 800379e:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 1;
 80037a0:	003b      	movs	r3, r7
 80037a2:	2201      	movs	r2, #1
 80037a4:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80037a6:	003b      	movs	r3, r7
 80037a8:	2200      	movs	r2, #0
 80037aa:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80037ac:	003b      	movs	r3, r7
 80037ae:	2200      	movs	r2, #0
 80037b0:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80037b2:	003b      	movs	r3, r7
 80037b4:	2200      	movs	r2, #0
 80037b6:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 80037b8:	003b      	movs	r3, r7
 80037ba:	4a11      	ldr	r2, [pc, #68]	@ (8003800 <MX_RTC_Init+0xe0>)
 80037bc:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80037be:	003b      	movs	r3, r7
 80037c0:	2200      	movs	r2, #0
 80037c2:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80037c4:	003b      	movs	r3, r7
 80037c6:	2200      	movs	r2, #0
 80037c8:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80037ca:	003b      	movs	r3, r7
 80037cc:	2220      	movs	r2, #32
 80037ce:	2101      	movs	r1, #1
 80037d0:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80037d2:	003b      	movs	r3, r7
 80037d4:	2280      	movs	r2, #128	@ 0x80
 80037d6:	0052      	lsls	r2, r2, #1
 80037d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80037da:	0039      	movs	r1, r7
 80037dc:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <MX_RTC_Init+0xd8>)
 80037de:	2200      	movs	r2, #0
 80037e0:	0018      	movs	r0, r3
 80037e2:	f002 fb9d 	bl	8005f20 <HAL_RTC_SetAlarm_IT>
 80037e6:	1e03      	subs	r3, r0, #0
 80037e8:	d001      	beq.n	80037ee <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80037ea:	f7ff ff93 	bl	8003714 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80037ee:	46c0      	nop			@ (mov r8, r8)
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b010      	add	sp, #64	@ 0x40
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			@ (mov r8, r8)
 80037f8:	20000134 	.word	0x20000134
 80037fc:	40002800 	.word	0x40002800
 8003800:	80808080 	.word	0x80808080

08003804 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003804:	b590      	push	{r4, r7, lr}
 8003806:	b08b      	sub	sp, #44	@ 0x2c
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800380c:	240c      	movs	r4, #12
 800380e:	193b      	adds	r3, r7, r4
 8003810:	0018      	movs	r0, r3
 8003812:	231c      	movs	r3, #28
 8003814:	001a      	movs	r2, r3
 8003816:	2100      	movs	r1, #0
 8003818:	f004 ffd4 	bl	80087c4 <memset>
  if(rtcHandle->Instance==RTC)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a19      	ldr	r2, [pc, #100]	@ (8003888 <HAL_RTC_MspInit+0x84>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d12c      	bne.n	8003880 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003826:	193b      	adds	r3, r7, r4
 8003828:	2280      	movs	r2, #128	@ 0x80
 800382a:	0292      	lsls	r2, r2, #10
 800382c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800382e:	193b      	adds	r3, r7, r4
 8003830:	2280      	movs	r2, #128	@ 0x80
 8003832:	0052      	lsls	r2, r2, #1
 8003834:	619a      	str	r2, [r3, #24]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003836:	193b      	adds	r3, r7, r4
 8003838:	0018      	movs	r0, r3
 800383a:	f001 ffb7 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 800383e:	1e03      	subs	r3, r0, #0
 8003840:	d001      	beq.n	8003846 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003842:	f7ff ff67 	bl	8003714 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003846:	4b11      	ldr	r3, [pc, #68]	@ (800388c <HAL_RTC_MspInit+0x88>)
 8003848:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800384a:	4b10      	ldr	r3, [pc, #64]	@ (800388c <HAL_RTC_MspInit+0x88>)
 800384c:	2180      	movs	r1, #128	@ 0x80
 800384e:	0209      	lsls	r1, r1, #8
 8003850:	430a      	orrs	r2, r1
 8003852:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003854:	4b0d      	ldr	r3, [pc, #52]	@ (800388c <HAL_RTC_MspInit+0x88>)
 8003856:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003858:	4b0c      	ldr	r3, [pc, #48]	@ (800388c <HAL_RTC_MspInit+0x88>)
 800385a:	2180      	movs	r1, #128	@ 0x80
 800385c:	00c9      	lsls	r1, r1, #3
 800385e:	430a      	orrs	r2, r1
 8003860:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003862:	4b0a      	ldr	r3, [pc, #40]	@ (800388c <HAL_RTC_MspInit+0x88>)
 8003864:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003866:	2380      	movs	r3, #128	@ 0x80
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4013      	ands	r3, r2
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	68bb      	ldr	r3, [r7, #8]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8003870:	2200      	movs	r2, #0
 8003872:	2100      	movs	r1, #0
 8003874:	2002      	movs	r0, #2
 8003876:	f000 fd97 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800387a:	2002      	movs	r0, #2
 800387c:	f000 fda9 	bl	80043d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003880:	46c0      	nop			@ (mov r8, r8)
 8003882:	46bd      	mov	sp, r7
 8003884:	b00b      	add	sp, #44	@ 0x2c
 8003886:	bd90      	pop	{r4, r7, pc}
 8003888:	40002800 	.word	0x40002800
 800388c:	40021000 	.word	0x40021000

08003890 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003894:	4b1b      	ldr	r3, [pc, #108]	@ (8003904 <MX_SPI1_Init+0x74>)
 8003896:	4a1c      	ldr	r2, [pc, #112]	@ (8003908 <MX_SPI1_Init+0x78>)
 8003898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800389a:	4b1a      	ldr	r3, [pc, #104]	@ (8003904 <MX_SPI1_Init+0x74>)
 800389c:	2282      	movs	r2, #130	@ 0x82
 800389e:	0052      	lsls	r2, r2, #1
 80038a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038a2:	4b18      	ldr	r3, [pc, #96]	@ (8003904 <MX_SPI1_Init+0x74>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038a8:	4b16      	ldr	r3, [pc, #88]	@ (8003904 <MX_SPI1_Init+0x74>)
 80038aa:	22e0      	movs	r2, #224	@ 0xe0
 80038ac:	00d2      	lsls	r2, r2, #3
 80038ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038b0:	4b14      	ldr	r3, [pc, #80]	@ (8003904 <MX_SPI1_Init+0x74>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038b6:	4b13      	ldr	r3, [pc, #76]	@ (8003904 <MX_SPI1_Init+0x74>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038bc:	4b11      	ldr	r3, [pc, #68]	@ (8003904 <MX_SPI1_Init+0x74>)
 80038be:	2280      	movs	r2, #128	@ 0x80
 80038c0:	0092      	lsls	r2, r2, #2
 80038c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80038c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003904 <MX_SPI1_Init+0x74>)
 80038c6:	2228      	movs	r2, #40	@ 0x28
 80038c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80038ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003904 <MX_SPI1_Init+0x74>)
 80038cc:	2280      	movs	r2, #128	@ 0x80
 80038ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <MX_SPI1_Init+0x74>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003904 <MX_SPI1_Init+0x74>)
 80038d8:	2200      	movs	r2, #0
 80038da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80038dc:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <MX_SPI1_Init+0x74>)
 80038de:	2207      	movs	r2, #7
 80038e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80038e2:	4b08      	ldr	r3, [pc, #32]	@ (8003904 <MX_SPI1_Init+0x74>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80038e8:	4b06      	ldr	r3, [pc, #24]	@ (8003904 <MX_SPI1_Init+0x74>)
 80038ea:	2208      	movs	r2, #8
 80038ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038ee:	4b05      	ldr	r3, [pc, #20]	@ (8003904 <MX_SPI1_Init+0x74>)
 80038f0:	0018      	movs	r0, r3
 80038f2:	f002 fdff 	bl	80064f4 <HAL_SPI_Init>
 80038f6:	1e03      	subs	r3, r0, #0
 80038f8:	d001      	beq.n	80038fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80038fa:	f7ff ff0b 	bl	8003714 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038fe:	46c0      	nop			@ (mov r8, r8)
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000160 	.word	0x20000160
 8003908:	40013000 	.word	0x40013000

0800390c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800390c:	b590      	push	{r4, r7, lr}
 800390e:	b08b      	sub	sp, #44	@ 0x2c
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	2414      	movs	r4, #20
 8003916:	193b      	adds	r3, r7, r4
 8003918:	0018      	movs	r0, r3
 800391a:	2314      	movs	r3, #20
 800391c:	001a      	movs	r2, r3
 800391e:	2100      	movs	r1, #0
 8003920:	f004 ff50 	bl	80087c4 <memset>
  if(spiHandle->Instance==SPI1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a30      	ldr	r2, [pc, #192]	@ (80039ec <HAL_SPI_MspInit+0xe0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d15a      	bne.n	80039e4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800392e:	4b30      	ldr	r3, [pc, #192]	@ (80039f0 <HAL_SPI_MspInit+0xe4>)
 8003930:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003932:	4b2f      	ldr	r3, [pc, #188]	@ (80039f0 <HAL_SPI_MspInit+0xe4>)
 8003934:	2180      	movs	r1, #128	@ 0x80
 8003936:	0149      	lsls	r1, r1, #5
 8003938:	430a      	orrs	r2, r1
 800393a:	641a      	str	r2, [r3, #64]	@ 0x40
 800393c:	4b2c      	ldr	r3, [pc, #176]	@ (80039f0 <HAL_SPI_MspInit+0xe4>)
 800393e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003940:	2380      	movs	r3, #128	@ 0x80
 8003942:	015b      	lsls	r3, r3, #5
 8003944:	4013      	ands	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800394a:	4b29      	ldr	r3, [pc, #164]	@ (80039f0 <HAL_SPI_MspInit+0xe4>)
 800394c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800394e:	4b28      	ldr	r3, [pc, #160]	@ (80039f0 <HAL_SPI_MspInit+0xe4>)
 8003950:	2101      	movs	r1, #1
 8003952:	430a      	orrs	r2, r1
 8003954:	635a      	str	r2, [r3, #52]	@ 0x34
 8003956:	4b26      	ldr	r3, [pc, #152]	@ (80039f0 <HAL_SPI_MspInit+0xe4>)
 8003958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395a:	2201      	movs	r2, #1
 800395c:	4013      	ands	r3, r2
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003962:	0021      	movs	r1, r4
 8003964:	187b      	adds	r3, r7, r1
 8003966:	22a0      	movs	r2, #160	@ 0xa0
 8003968:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396a:	187b      	adds	r3, r7, r1
 800396c:	2202      	movs	r2, #2
 800396e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	187b      	adds	r3, r7, r1
 8003972:	2200      	movs	r2, #0
 8003974:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003976:	187b      	adds	r3, r7, r1
 8003978:	2200      	movs	r2, #0
 800397a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800397c:	187b      	adds	r3, r7, r1
 800397e:	2200      	movs	r2, #0
 8003980:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003982:	187a      	adds	r2, r7, r1
 8003984:	23a0      	movs	r3, #160	@ 0xa0
 8003986:	05db      	lsls	r3, r3, #23
 8003988:	0011      	movs	r1, r2
 800398a:	0018      	movs	r0, r3
 800398c:	f001 f85c 	bl	8004a48 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8003990:	4b18      	ldr	r3, [pc, #96]	@ (80039f4 <HAL_SPI_MspInit+0xe8>)
 8003992:	4a19      	ldr	r2, [pc, #100]	@ (80039f8 <HAL_SPI_MspInit+0xec>)
 8003994:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003996:	4b17      	ldr	r3, [pc, #92]	@ (80039f4 <HAL_SPI_MspInit+0xe8>)
 8003998:	2211      	movs	r2, #17
 800399a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800399c:	4b15      	ldr	r3, [pc, #84]	@ (80039f4 <HAL_SPI_MspInit+0xe8>)
 800399e:	2210      	movs	r2, #16
 80039a0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039a2:	4b14      	ldr	r3, [pc, #80]	@ (80039f4 <HAL_SPI_MspInit+0xe8>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039a8:	4b12      	ldr	r3, [pc, #72]	@ (80039f4 <HAL_SPI_MspInit+0xe8>)
 80039aa:	2280      	movs	r2, #128	@ 0x80
 80039ac:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039ae:	4b11      	ldr	r3, [pc, #68]	@ (80039f4 <HAL_SPI_MspInit+0xe8>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039b4:	4b0f      	ldr	r3, [pc, #60]	@ (80039f4 <HAL_SPI_MspInit+0xe8>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80039ba:	4b0e      	ldr	r3, [pc, #56]	@ (80039f4 <HAL_SPI_MspInit+0xe8>)
 80039bc:	2200      	movs	r2, #0
 80039be:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80039c0:	4b0c      	ldr	r3, [pc, #48]	@ (80039f4 <HAL_SPI_MspInit+0xe8>)
 80039c2:	2280      	movs	r2, #128	@ 0x80
 80039c4:	0192      	lsls	r2, r2, #6
 80039c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80039c8:	4b0a      	ldr	r3, [pc, #40]	@ (80039f4 <HAL_SPI_MspInit+0xe8>)
 80039ca:	0018      	movs	r0, r3
 80039cc:	f000 fd1e 	bl	800440c <HAL_DMA_Init>
 80039d0:	1e03      	subs	r3, r0, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80039d4:	f7ff fe9e 	bl	8003714 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a06      	ldr	r2, [pc, #24]	@ (80039f4 <HAL_SPI_MspInit+0xe8>)
 80039dc:	655a      	str	r2, [r3, #84]	@ 0x54
 80039de:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <HAL_SPI_MspInit+0xe8>)
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80039e4:	46c0      	nop			@ (mov r8, r8)
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b00b      	add	sp, #44	@ 0x2c
 80039ea:	bd90      	pop	{r4, r7, pc}
 80039ec:	40013000 	.word	0x40013000
 80039f0:	40021000 	.word	0x40021000
 80039f4:	200001c4 	.word	0x200001c4
 80039f8:	40020008 	.word	0x40020008

080039fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a02:	4b0f      	ldr	r3, [pc, #60]	@ (8003a40 <HAL_MspInit+0x44>)
 8003a04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a06:	4b0e      	ldr	r3, [pc, #56]	@ (8003a40 <HAL_MspInit+0x44>)
 8003a08:	2101      	movs	r1, #1
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a40 <HAL_MspInit+0x44>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	2201      	movs	r2, #1
 8003a14:	4013      	ands	r3, r2
 8003a16:	607b      	str	r3, [r7, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a1a:	4b09      	ldr	r3, [pc, #36]	@ (8003a40 <HAL_MspInit+0x44>)
 8003a1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a1e:	4b08      	ldr	r3, [pc, #32]	@ (8003a40 <HAL_MspInit+0x44>)
 8003a20:	2180      	movs	r1, #128	@ 0x80
 8003a22:	0549      	lsls	r1, r1, #21
 8003a24:	430a      	orrs	r2, r1
 8003a26:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a28:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_MspInit+0x44>)
 8003a2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a2c:	2380      	movs	r3, #128	@ 0x80
 8003a2e:	055b      	lsls	r3, r3, #21
 8003a30:	4013      	ands	r3, r2
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a36:	46c0      	nop			@ (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b002      	add	sp, #8
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			@ (mov r8, r8)
 8003a40:	40021000 	.word	0x40021000

08003a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a48:	46c0      	nop			@ (mov r8, r8)
 8003a4a:	e7fd      	b.n	8003a48 <NMI_Handler+0x4>

08003a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  printf("hardfault");
 8003a50:	4b05      	ldr	r3, [pc, #20]	@ (8003a68 <HardFault_Handler+0x1c>)
 8003a52:	0018      	movs	r0, r3
 8003a54:	f7fe fd76 	bl	8002544 <printf_>
	  HAL_Delay(1000);
 8003a58:	23fa      	movs	r3, #250	@ 0xfa
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f000 fbd3 	bl	8004208 <HAL_Delay>
	  printf("hardfault");
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	e7f4      	b.n	8003a50 <HardFault_Handler+0x4>
 8003a66:	46c0      	nop			@ (mov r8, r8)
 8003a68:	080096c4 	.word	0x080096c4

08003a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003a70:	46c0      	nop			@ (mov r8, r8)
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a7a:	46c0      	nop			@ (mov r8, r8)
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a84:	f000 fba4 	bl	80041d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a88:	46c0      	nop			@ (mov r8, r8)
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003a94:	4b03      	ldr	r3, [pc, #12]	@ (8003aa4 <RTC_TAMP_IRQHandler+0x14>)
 8003a96:	0018      	movs	r0, r3
 8003a98:	f002 fb82 	bl	80061a0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8003a9c:	46c0      	nop			@ (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			@ (mov r8, r8)
 8003aa4:	20000134 	.word	0x20000134

08003aa8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003aac:	4b03      	ldr	r3, [pc, #12]	@ (8003abc <DMA1_Channel1_IRQHandler+0x14>)
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f000 fe88 	bl	80047c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ab4:	46c0      	nop			@ (mov r8, r8)
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	200001c4 	.word	0x200001c4

08003ac0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ac4:	4b03      	ldr	r3, [pc, #12]	@ (8003ad4 <TIM6_IRQHandler+0x14>)
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f003 f9b6 	bl	8006e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003acc:	46c0      	nop			@ (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	20000224 	.word	0x20000224

08003ad8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003adc:	4b03      	ldr	r3, [pc, #12]	@ (8003aec <TIM7_IRQHandler+0x14>)
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f003 f9aa 	bl	8006e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003ae4:	46c0      	nop			@ (mov r8, r8)
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	46c0      	nop			@ (mov r8, r8)
 8003aec:	20000270 	.word	0x20000270

08003af0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003af4:	4b03      	ldr	r3, [pc, #12]	@ (8003b04 <USART1_IRQHandler+0x14>)
 8003af6:	0018      	movs	r0, r3
 8003af8:	f003 fcc4 	bl	8007484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003afc:	46c0      	nop			@ (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	46c0      	nop			@ (mov r8, r8)
 8003b04:	200002bc 	.word	0x200002bc

08003b08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
  return 1;
 8003b0c:	2301      	movs	r3, #1
}
 8003b0e:	0018      	movs	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <_kill>:

int _kill(int pid, int sig)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b1e:	f004 ff1d 	bl	800895c <__errno>
 8003b22:	0003      	movs	r3, r0
 8003b24:	2216      	movs	r2, #22
 8003b26:	601a      	str	r2, [r3, #0]
  return -1;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	425b      	negs	r3, r3
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b002      	add	sp, #8
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <_exit>:

void _exit (int status)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	425a      	negs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	0011      	movs	r1, r2
 8003b44:	0018      	movs	r0, r3
 8003b46:	f7ff ffe5 	bl	8003b14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	e7fd      	b.n	8003b4a <_exit+0x16>

08003b4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b086      	sub	sp, #24
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e00a      	b.n	8003b76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b60:	e000      	b.n	8003b64 <_read+0x16>
 8003b62:	bf00      	nop
 8003b64:	0001      	movs	r1, r0
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	60ba      	str	r2, [r7, #8]
 8003b6c:	b2ca      	uxtb	r2, r1
 8003b6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	3301      	adds	r3, #1
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	dbf0      	blt.n	8003b60 <_read+0x12>
  }

  return len;
 8003b7e:	687b      	ldr	r3, [r7, #4]
}
 8003b80:	0018      	movs	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b006      	add	sp, #24
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e009      	b.n	8003bae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	60ba      	str	r2, [r7, #8]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	e000      	b.n	8003ba8 <_write+0x20>
 8003ba6:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	3301      	adds	r3, #1
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	dbf1      	blt.n	8003b9a <_write+0x12>
  }
  return len;
 8003bb6:	687b      	ldr	r3, [r7, #4]
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b006      	add	sp, #24
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <_close>:

int _close(int file)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	425b      	negs	r3, r3
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2280      	movs	r2, #128	@ 0x80
 8003be2:	0192      	lsls	r2, r2, #6
 8003be4:	605a      	str	r2, [r3, #4]
  return 0;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	0018      	movs	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	b002      	add	sp, #8
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <_isatty>:

int _isatty(int file)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003bf8:	2301      	movs	r3, #1
}
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b002      	add	sp, #8
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b084      	sub	sp, #16
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	0018      	movs	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b004      	add	sp, #16
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c20:	4a14      	ldr	r2, [pc, #80]	@ (8003c74 <_sbrk+0x5c>)
 8003c22:	4b15      	ldr	r3, [pc, #84]	@ (8003c78 <_sbrk+0x60>)
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c2c:	4b13      	ldr	r3, [pc, #76]	@ (8003c7c <_sbrk+0x64>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c34:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <_sbrk+0x64>)
 8003c36:	4a12      	ldr	r2, [pc, #72]	@ (8003c80 <_sbrk+0x68>)
 8003c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c3a:	4b10      	ldr	r3, [pc, #64]	@ (8003c7c <_sbrk+0x64>)
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	18d3      	adds	r3, r2, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d207      	bcs.n	8003c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c48:	f004 fe88 	bl	800895c <__errno>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	220c      	movs	r2, #12
 8003c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c52:	2301      	movs	r3, #1
 8003c54:	425b      	negs	r3, r3
 8003c56:	e009      	b.n	8003c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c58:	4b08      	ldr	r3, [pc, #32]	@ (8003c7c <_sbrk+0x64>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c5e:	4b07      	ldr	r3, [pc, #28]	@ (8003c7c <_sbrk+0x64>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	18d2      	adds	r2, r2, r3
 8003c66:	4b05      	ldr	r3, [pc, #20]	@ (8003c7c <_sbrk+0x64>)
 8003c68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
}
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b006      	add	sp, #24
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20009000 	.word	0x20009000
 8003c78:	00000600 	.word	0x00000600
 8003c7c:	20000220 	.word	0x20000220
 8003c80:	20000538 	.word	0x20000538

08003c84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c88:	46c0      	nop			@ (mov r8, r8)
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c96:	1d3b      	adds	r3, r7, #4
 8003c98:	0018      	movs	r0, r3
 8003c9a:	230c      	movs	r3, #12
 8003c9c:	001a      	movs	r2, r3
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	f004 fd90 	bl	80087c4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003ca4:	4b15      	ldr	r3, [pc, #84]	@ (8003cfc <MX_TIM6_Init+0x6c>)
 8003ca6:	4a16      	ldr	r2, [pc, #88]	@ (8003d00 <MX_TIM6_Init+0x70>)
 8003ca8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 62500 - 1;
 8003caa:	4b14      	ldr	r3, [pc, #80]	@ (8003cfc <MX_TIM6_Init+0x6c>)
 8003cac:	4a15      	ldr	r2, [pc, #84]	@ (8003d04 <MX_TIM6_Init+0x74>)
 8003cae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cb0:	4b12      	ldr	r3, [pc, #72]	@ (8003cfc <MX_TIM6_Init+0x6c>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 512 - 1;
 8003cb6:	4b11      	ldr	r3, [pc, #68]	@ (8003cfc <MX_TIM6_Init+0x6c>)
 8003cb8:	4a13      	ldr	r2, [pc, #76]	@ (8003d08 <MX_TIM6_Init+0x78>)
 8003cba:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003cfc <MX_TIM6_Init+0x6c>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003cfc <MX_TIM6_Init+0x6c>)
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f002 ffdb 	bl	8006c80 <HAL_TIM_Base_Init>
 8003cca:	1e03      	subs	r3, r0, #0
 8003ccc:	d001      	beq.n	8003cd2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003cce:	f7ff fd21 	bl	8003714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cd2:	1d3b      	adds	r3, r7, #4
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cd8:	1d3b      	adds	r3, r7, #4
 8003cda:	2200      	movs	r2, #0
 8003cdc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003cde:	1d3a      	adds	r2, r7, #4
 8003ce0:	4b06      	ldr	r3, [pc, #24]	@ (8003cfc <MX_TIM6_Init+0x6c>)
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f003 fa53 	bl	8007190 <HAL_TIMEx_MasterConfigSynchronization>
 8003cea:	1e03      	subs	r3, r0, #0
 8003cec:	d001      	beq.n	8003cf2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003cee:	f7ff fd11 	bl	8003714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003cf2:	46c0      	nop			@ (mov r8, r8)
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b004      	add	sp, #16
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	46c0      	nop			@ (mov r8, r8)
 8003cfc:	20000224 	.word	0x20000224
 8003d00:	40001000 	.word	0x40001000
 8003d04:	0000f423 	.word	0x0000f423
 8003d08:	000001ff 	.word	0x000001ff

08003d0c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d12:	1d3b      	adds	r3, r7, #4
 8003d14:	0018      	movs	r0, r3
 8003d16:	230c      	movs	r3, #12
 8003d18:	001a      	movs	r2, r3
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	f004 fd52 	bl	80087c4 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003d20:	4b15      	ldr	r3, [pc, #84]	@ (8003d78 <MX_TIM7_Init+0x6c>)
 8003d22:	4a16      	ldr	r2, [pc, #88]	@ (8003d7c <MX_TIM7_Init+0x70>)
 8003d24:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64000 - 1;
 8003d26:	4b14      	ldr	r3, [pc, #80]	@ (8003d78 <MX_TIM7_Init+0x6c>)
 8003d28:	4a15      	ldr	r2, [pc, #84]	@ (8003d80 <MX_TIM7_Init+0x74>)
 8003d2a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d2c:	4b12      	ldr	r3, [pc, #72]	@ (8003d78 <MX_TIM7_Init+0x6c>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 60000 - 1;
 8003d32:	4b11      	ldr	r3, [pc, #68]	@ (8003d78 <MX_TIM7_Init+0x6c>)
 8003d34:	4a13      	ldr	r2, [pc, #76]	@ (8003d84 <MX_TIM7_Init+0x78>)
 8003d36:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d38:	4b0f      	ldr	r3, [pc, #60]	@ (8003d78 <MX_TIM7_Init+0x6c>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003d78 <MX_TIM7_Init+0x6c>)
 8003d40:	0018      	movs	r0, r3
 8003d42:	f002 ff9d 	bl	8006c80 <HAL_TIM_Base_Init>
 8003d46:	1e03      	subs	r3, r0, #0
 8003d48:	d001      	beq.n	8003d4e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003d4a:	f7ff fce3 	bl	8003714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d54:	1d3b      	adds	r3, r7, #4
 8003d56:	2200      	movs	r2, #0
 8003d58:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003d5a:	1d3a      	adds	r2, r7, #4
 8003d5c:	4b06      	ldr	r3, [pc, #24]	@ (8003d78 <MX_TIM7_Init+0x6c>)
 8003d5e:	0011      	movs	r1, r2
 8003d60:	0018      	movs	r0, r3
 8003d62:	f003 fa15 	bl	8007190 <HAL_TIMEx_MasterConfigSynchronization>
 8003d66:	1e03      	subs	r3, r0, #0
 8003d68:	d001      	beq.n	8003d6e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8003d6a:	f7ff fcd3 	bl	8003714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b004      	add	sp, #16
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	46c0      	nop			@ (mov r8, r8)
 8003d78:	20000270 	.word	0x20000270
 8003d7c:	40001400 	.word	0x40001400
 8003d80:	0000f9ff 	.word	0x0000f9ff
 8003d84:	0000ea5f 	.word	0x0000ea5f

08003d88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a1a      	ldr	r2, [pc, #104]	@ (8003e00 <HAL_TIM_Base_MspInit+0x78>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d114      	bne.n	8003dc4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003e04 <HAL_TIM_Base_MspInit+0x7c>)
 8003d9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d9e:	4b19      	ldr	r3, [pc, #100]	@ (8003e04 <HAL_TIM_Base_MspInit+0x7c>)
 8003da0:	2110      	movs	r1, #16
 8003da2:	430a      	orrs	r2, r1
 8003da4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003da6:	4b17      	ldr	r3, [pc, #92]	@ (8003e04 <HAL_TIM_Base_MspInit+0x7c>)
 8003da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003daa:	2210      	movs	r2, #16
 8003dac:	4013      	ands	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8003db2:	2200      	movs	r2, #0
 8003db4:	2100      	movs	r1, #0
 8003db6:	2011      	movs	r0, #17
 8003db8:	f000 faf6 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003dbc:	2011      	movs	r0, #17
 8003dbe:	f000 fb08 	bl	80043d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003dc2:	e018      	b.n	8003df6 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM7)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8003e08 <HAL_TIM_Base_MspInit+0x80>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d113      	bne.n	8003df6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003dce:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <HAL_TIM_Base_MspInit+0x7c>)
 8003dd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e04 <HAL_TIM_Base_MspInit+0x7c>)
 8003dd4:	2120      	movs	r1, #32
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003dda:	4b0a      	ldr	r3, [pc, #40]	@ (8003e04 <HAL_TIM_Base_MspInit+0x7c>)
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dde:	2220      	movs	r2, #32
 8003de0:	4013      	ands	r3, r2
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003de6:	2200      	movs	r2, #0
 8003de8:	2100      	movs	r1, #0
 8003dea:	2012      	movs	r0, #18
 8003dec:	f000 fadc 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003df0:	2012      	movs	r0, #18
 8003df2:	f000 faee 	bl	80043d2 <HAL_NVIC_EnableIRQ>
}
 8003df6:	46c0      	nop			@ (mov r8, r8)
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b004      	add	sp, #16
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	46c0      	nop			@ (mov r8, r8)
 8003e00:	40001000 	.word	0x40001000
 8003e04:	40021000 	.word	0x40021000
 8003e08:	40001400 	.word	0x40001400

08003e0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003e10:	4b23      	ldr	r3, [pc, #140]	@ (8003ea0 <MX_USART1_UART_Init+0x94>)
 8003e12:	4a24      	ldr	r2, [pc, #144]	@ (8003ea4 <MX_USART1_UART_Init+0x98>)
 8003e14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8003e16:	4b22      	ldr	r3, [pc, #136]	@ (8003ea0 <MX_USART1_UART_Init+0x94>)
 8003e18:	2296      	movs	r2, #150	@ 0x96
 8003e1a:	0212      	lsls	r2, r2, #8
 8003e1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e1e:	4b20      	ldr	r3, [pc, #128]	@ (8003ea0 <MX_USART1_UART_Init+0x94>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e24:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea0 <MX_USART1_UART_Init+0x94>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea0 <MX_USART1_UART_Init+0x94>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea0 <MX_USART1_UART_Init+0x94>)
 8003e32:	220c      	movs	r2, #12
 8003e34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea0 <MX_USART1_UART_Init+0x94>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e3c:	4b18      	ldr	r3, [pc, #96]	@ (8003ea0 <MX_USART1_UART_Init+0x94>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e42:	4b17      	ldr	r3, [pc, #92]	@ (8003ea0 <MX_USART1_UART_Init+0x94>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e48:	4b15      	ldr	r3, [pc, #84]	@ (8003ea0 <MX_USART1_UART_Init+0x94>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e4e:	4b14      	ldr	r3, [pc, #80]	@ (8003ea0 <MX_USART1_UART_Init+0x94>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e54:	4b12      	ldr	r3, [pc, #72]	@ (8003ea0 <MX_USART1_UART_Init+0x94>)
 8003e56:	0018      	movs	r0, r3
 8003e58:	f003 fa1a 	bl	8007290 <HAL_UART_Init>
 8003e5c:	1e03      	subs	r3, r0, #0
 8003e5e:	d001      	beq.n	8003e64 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003e60:	f7ff fc58 	bl	8003714 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea0 <MX_USART1_UART_Init+0x94>)
 8003e66:	2100      	movs	r1, #0
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f004 fabb 	bl	80083e4 <HAL_UARTEx_SetTxFifoThreshold>
 8003e6e:	1e03      	subs	r3, r0, #0
 8003e70:	d001      	beq.n	8003e76 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003e72:	f7ff fc4f 	bl	8003714 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e76:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea0 <MX_USART1_UART_Init+0x94>)
 8003e78:	2100      	movs	r1, #0
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f004 faf2 	bl	8008464 <HAL_UARTEx_SetRxFifoThreshold>
 8003e80:	1e03      	subs	r3, r0, #0
 8003e82:	d001      	beq.n	8003e88 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003e84:	f7ff fc46 	bl	8003714 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003e88:	4b05      	ldr	r3, [pc, #20]	@ (8003ea0 <MX_USART1_UART_Init+0x94>)
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f004 fa70 	bl	8008370 <HAL_UARTEx_DisableFifoMode>
 8003e90:	1e03      	subs	r3, r0, #0
 8003e92:	d001      	beq.n	8003e98 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003e94:	f7ff fc3e 	bl	8003714 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e98:	46c0      	nop			@ (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	200002bc 	.word	0x200002bc
 8003ea4:	40013800 	.word	0x40013800

08003ea8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003eac:	4b23      	ldr	r3, [pc, #140]	@ (8003f3c <MX_USART2_UART_Init+0x94>)
 8003eae:	4a24      	ldr	r2, [pc, #144]	@ (8003f40 <MX_USART2_UART_Init+0x98>)
 8003eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003eb2:	4b22      	ldr	r3, [pc, #136]	@ (8003f3c <MX_USART2_UART_Init+0x94>)
 8003eb4:	22e1      	movs	r2, #225	@ 0xe1
 8003eb6:	0252      	lsls	r2, r2, #9
 8003eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003eba:	4b20      	ldr	r3, [pc, #128]	@ (8003f3c <MX_USART2_UART_Init+0x94>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f3c <MX_USART2_UART_Init+0x94>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f3c <MX_USART2_UART_Init+0x94>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f3c <MX_USART2_UART_Init+0x94>)
 8003ece:	220c      	movs	r2, #12
 8003ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ed2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f3c <MX_USART2_UART_Init+0x94>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ed8:	4b18      	ldr	r3, [pc, #96]	@ (8003f3c <MX_USART2_UART_Init+0x94>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ede:	4b17      	ldr	r3, [pc, #92]	@ (8003f3c <MX_USART2_UART_Init+0x94>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ee4:	4b15      	ldr	r3, [pc, #84]	@ (8003f3c <MX_USART2_UART_Init+0x94>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003eea:	4b14      	ldr	r3, [pc, #80]	@ (8003f3c <MX_USART2_UART_Init+0x94>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ef0:	4b12      	ldr	r3, [pc, #72]	@ (8003f3c <MX_USART2_UART_Init+0x94>)
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f003 f9cc 	bl	8007290 <HAL_UART_Init>
 8003ef8:	1e03      	subs	r3, r0, #0
 8003efa:	d001      	beq.n	8003f00 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003efc:	f7ff fc0a 	bl	8003714 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f00:	4b0e      	ldr	r3, [pc, #56]	@ (8003f3c <MX_USART2_UART_Init+0x94>)
 8003f02:	2100      	movs	r1, #0
 8003f04:	0018      	movs	r0, r3
 8003f06:	f004 fa6d 	bl	80083e4 <HAL_UARTEx_SetTxFifoThreshold>
 8003f0a:	1e03      	subs	r3, r0, #0
 8003f0c:	d001      	beq.n	8003f12 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003f0e:	f7ff fc01 	bl	8003714 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f12:	4b0a      	ldr	r3, [pc, #40]	@ (8003f3c <MX_USART2_UART_Init+0x94>)
 8003f14:	2100      	movs	r1, #0
 8003f16:	0018      	movs	r0, r3
 8003f18:	f004 faa4 	bl	8008464 <HAL_UARTEx_SetRxFifoThreshold>
 8003f1c:	1e03      	subs	r3, r0, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003f20:	f7ff fbf8 	bl	8003714 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003f24:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <MX_USART2_UART_Init+0x94>)
 8003f26:	0018      	movs	r0, r3
 8003f28:	f004 fa22 	bl	8008370 <HAL_UARTEx_DisableFifoMode>
 8003f2c:	1e03      	subs	r3, r0, #0
 8003f2e:	d001      	beq.n	8003f34 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003f30:	f7ff fbf0 	bl	8003714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f34:	46c0      	nop			@ (mov r8, r8)
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			@ (mov r8, r8)
 8003f3c:	20000350 	.word	0x20000350
 8003f40:	40004400 	.word	0x40004400

08003f44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f44:	b590      	push	{r4, r7, lr}
 8003f46:	b093      	sub	sp, #76	@ 0x4c
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f4c:	2334      	movs	r3, #52	@ 0x34
 8003f4e:	18fb      	adds	r3, r7, r3
 8003f50:	0018      	movs	r0, r3
 8003f52:	2314      	movs	r3, #20
 8003f54:	001a      	movs	r2, r3
 8003f56:	2100      	movs	r1, #0
 8003f58:	f004 fc34 	bl	80087c4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f5c:	2418      	movs	r4, #24
 8003f5e:	193b      	adds	r3, r7, r4
 8003f60:	0018      	movs	r0, r3
 8003f62:	231c      	movs	r3, #28
 8003f64:	001a      	movs	r2, r3
 8003f66:	2100      	movs	r1, #0
 8003f68:	f004 fc2c 	bl	80087c4 <memset>
  if(uartHandle->Instance==USART1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a49      	ldr	r2, [pc, #292]	@ (8004098 <HAL_UART_MspInit+0x154>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d146      	bne.n	8004004 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f76:	193b      	adds	r3, r7, r4
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003f7c:	193b      	adds	r3, r7, r4
 8003f7e:	2200      	movs	r2, #0
 8003f80:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f82:	193b      	adds	r3, r7, r4
 8003f84:	0018      	movs	r0, r3
 8003f86:	f001 fc11 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 8003f8a:	1e03      	subs	r3, r0, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003f8e:	f7ff fbc1 	bl	8003714 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f92:	4b42      	ldr	r3, [pc, #264]	@ (800409c <HAL_UART_MspInit+0x158>)
 8003f94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f96:	4b41      	ldr	r3, [pc, #260]	@ (800409c <HAL_UART_MspInit+0x158>)
 8003f98:	2180      	movs	r1, #128	@ 0x80
 8003f9a:	01c9      	lsls	r1, r1, #7
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003fa0:	4b3e      	ldr	r3, [pc, #248]	@ (800409c <HAL_UART_MspInit+0x158>)
 8003fa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fa4:	2380      	movs	r3, #128	@ 0x80
 8003fa6:	01db      	lsls	r3, r3, #7
 8003fa8:	4013      	ands	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fae:	4b3b      	ldr	r3, [pc, #236]	@ (800409c <HAL_UART_MspInit+0x158>)
 8003fb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fb2:	4b3a      	ldr	r3, [pc, #232]	@ (800409c <HAL_UART_MspInit+0x158>)
 8003fb4:	2104      	movs	r1, #4
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fba:	4b38      	ldr	r3, [pc, #224]	@ (800409c <HAL_UART_MspInit+0x158>)
 8003fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003fc6:	2134      	movs	r1, #52	@ 0x34
 8003fc8:	187b      	adds	r3, r7, r1
 8003fca:	2230      	movs	r2, #48	@ 0x30
 8003fcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fce:	187b      	adds	r3, r7, r1
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd4:	187b      	adds	r3, r7, r1
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	2200      	movs	r2, #0
 8003fde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003fe0:	187b      	adds	r3, r7, r1
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fe6:	187b      	adds	r3, r7, r1
 8003fe8:	4a2d      	ldr	r2, [pc, #180]	@ (80040a0 <HAL_UART_MspInit+0x15c>)
 8003fea:	0019      	movs	r1, r3
 8003fec:	0010      	movs	r0, r2
 8003fee:	f000 fd2b 	bl	8004a48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	201b      	movs	r0, #27
 8003ff8:	f000 f9d6 	bl	80043a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ffc:	201b      	movs	r0, #27
 8003ffe:	f000 f9e8 	bl	80043d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004002:	e044      	b.n	800408e <HAL_UART_MspInit+0x14a>
  else if(uartHandle->Instance==USART2)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a26      	ldr	r2, [pc, #152]	@ (80040a4 <HAL_UART_MspInit+0x160>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d13f      	bne.n	800408e <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800400e:	2118      	movs	r1, #24
 8004010:	187b      	adds	r3, r7, r1
 8004012:	2202      	movs	r2, #2
 8004014:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004016:	187b      	adds	r3, r7, r1
 8004018:	2200      	movs	r2, #0
 800401a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800401c:	187b      	adds	r3, r7, r1
 800401e:	0018      	movs	r0, r3
 8004020:	f001 fbc4 	bl	80057ac <HAL_RCCEx_PeriphCLKConfig>
 8004024:	1e03      	subs	r3, r0, #0
 8004026:	d001      	beq.n	800402c <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8004028:	f7ff fb74 	bl	8003714 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800402c:	4b1b      	ldr	r3, [pc, #108]	@ (800409c <HAL_UART_MspInit+0x158>)
 800402e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004030:	4b1a      	ldr	r3, [pc, #104]	@ (800409c <HAL_UART_MspInit+0x158>)
 8004032:	2180      	movs	r1, #128	@ 0x80
 8004034:	0289      	lsls	r1, r1, #10
 8004036:	430a      	orrs	r2, r1
 8004038:	63da      	str	r2, [r3, #60]	@ 0x3c
 800403a:	4b18      	ldr	r3, [pc, #96]	@ (800409c <HAL_UART_MspInit+0x158>)
 800403c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800403e:	2380      	movs	r3, #128	@ 0x80
 8004040:	029b      	lsls	r3, r3, #10
 8004042:	4013      	ands	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
 8004046:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004048:	4b14      	ldr	r3, [pc, #80]	@ (800409c <HAL_UART_MspInit+0x158>)
 800404a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800404c:	4b13      	ldr	r3, [pc, #76]	@ (800409c <HAL_UART_MspInit+0x158>)
 800404e:	2101      	movs	r1, #1
 8004050:	430a      	orrs	r2, r1
 8004052:	635a      	str	r2, [r3, #52]	@ 0x34
 8004054:	4b11      	ldr	r3, [pc, #68]	@ (800409c <HAL_UART_MspInit+0x158>)
 8004056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004058:	2201      	movs	r2, #1
 800405a:	4013      	ands	r3, r2
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004060:	2134      	movs	r1, #52	@ 0x34
 8004062:	187b      	adds	r3, r7, r1
 8004064:	220c      	movs	r2, #12
 8004066:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004068:	187b      	adds	r3, r7, r1
 800406a:	2202      	movs	r2, #2
 800406c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406e:	187b      	adds	r3, r7, r1
 8004070:	2200      	movs	r2, #0
 8004072:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004074:	187b      	adds	r3, r7, r1
 8004076:	2200      	movs	r2, #0
 8004078:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800407a:	187b      	adds	r3, r7, r1
 800407c:	2201      	movs	r2, #1
 800407e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004080:	187a      	adds	r2, r7, r1
 8004082:	23a0      	movs	r3, #160	@ 0xa0
 8004084:	05db      	lsls	r3, r3, #23
 8004086:	0011      	movs	r1, r2
 8004088:	0018      	movs	r0, r3
 800408a:	f000 fcdd 	bl	8004a48 <HAL_GPIO_Init>
}
 800408e:	46c0      	nop			@ (mov r8, r8)
 8004090:	46bd      	mov	sp, r7
 8004092:	b013      	add	sp, #76	@ 0x4c
 8004094:	bd90      	pop	{r4, r7, pc}
 8004096:	46c0      	nop			@ (mov r8, r8)
 8004098:	40013800 	.word	0x40013800
 800409c:	40021000 	.word	0x40021000
 80040a0:	50000800 	.word	0x50000800
 80040a4:	40004400 	.word	0x40004400

080040a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80040a8:	480d      	ldr	r0, [pc, #52]	@ (80040e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80040aa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80040ac:	f7ff fdea 	bl	8003c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040b0:	480c      	ldr	r0, [pc, #48]	@ (80040e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80040b2:	490d      	ldr	r1, [pc, #52]	@ (80040e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040b4:	4a0d      	ldr	r2, [pc, #52]	@ (80040ec <LoopForever+0xe>)
  movs r3, #0
 80040b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040b8:	e002      	b.n	80040c0 <LoopCopyDataInit>

080040ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040be:	3304      	adds	r3, #4

080040c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040c4:	d3f9      	bcc.n	80040ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040c6:	4a0a      	ldr	r2, [pc, #40]	@ (80040f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80040c8:	4c0a      	ldr	r4, [pc, #40]	@ (80040f4 <LoopForever+0x16>)
  movs r3, #0
 80040ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040cc:	e001      	b.n	80040d2 <LoopFillZerobss>

080040ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040d0:	3204      	adds	r2, #4

080040d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040d4:	d3fb      	bcc.n	80040ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80040d6:	f004 fc47 	bl	8008968 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80040da:	f7fe fe5f 	bl	8002d9c <main>

080040de <LoopForever>:

LoopForever:
  b LoopForever
 80040de:	e7fe      	b.n	80040de <LoopForever>
  ldr   r0, =_estack
 80040e0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80040e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040e8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80040ec:	08009a44 	.word	0x08009a44
  ldr r2, =_sbss
 80040f0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80040f4:	20000534 	.word	0x20000534

080040f8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040f8:	e7fe      	b.n	80040f8 <ADC1_IRQHandler>
	...

080040fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004102:	1dfb      	adds	r3, r7, #7
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004108:	4b0b      	ldr	r3, [pc, #44]	@ (8004138 <HAL_Init+0x3c>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	4b0a      	ldr	r3, [pc, #40]	@ (8004138 <HAL_Init+0x3c>)
 800410e:	2180      	movs	r1, #128	@ 0x80
 8004110:	0049      	lsls	r1, r1, #1
 8004112:	430a      	orrs	r2, r1
 8004114:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004116:	2000      	movs	r0, #0
 8004118:	f000 f810 	bl	800413c <HAL_InitTick>
 800411c:	1e03      	subs	r3, r0, #0
 800411e:	d003      	beq.n	8004128 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004120:	1dfb      	adds	r3, r7, #7
 8004122:	2201      	movs	r2, #1
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	e001      	b.n	800412c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004128:	f7ff fc68 	bl	80039fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800412c:	1dfb      	adds	r3, r7, #7
 800412e:	781b      	ldrb	r3, [r3, #0]
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b002      	add	sp, #8
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40022000 	.word	0x40022000

0800413c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800413c:	b590      	push	{r4, r7, lr}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004144:	230f      	movs	r3, #15
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800414c:	4b1d      	ldr	r3, [pc, #116]	@ (80041c4 <HAL_InitTick+0x88>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d02b      	beq.n	80041ac <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004154:	4b1c      	ldr	r3, [pc, #112]	@ (80041c8 <HAL_InitTick+0x8c>)
 8004156:	681c      	ldr	r4, [r3, #0]
 8004158:	4b1a      	ldr	r3, [pc, #104]	@ (80041c4 <HAL_InitTick+0x88>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	0019      	movs	r1, r3
 800415e:	23fa      	movs	r3, #250	@ 0xfa
 8004160:	0098      	lsls	r0, r3, #2
 8004162:	f7fb ffdf 	bl	8000124 <__udivsi3>
 8004166:	0003      	movs	r3, r0
 8004168:	0019      	movs	r1, r3
 800416a:	0020      	movs	r0, r4
 800416c:	f7fb ffda 	bl	8000124 <__udivsi3>
 8004170:	0003      	movs	r3, r0
 8004172:	0018      	movs	r0, r3
 8004174:	f000 f93d 	bl	80043f2 <HAL_SYSTICK_Config>
 8004178:	1e03      	subs	r3, r0, #0
 800417a:	d112      	bne.n	80041a2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b03      	cmp	r3, #3
 8004180:	d80a      	bhi.n	8004198 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	2301      	movs	r3, #1
 8004186:	425b      	negs	r3, r3
 8004188:	2200      	movs	r2, #0
 800418a:	0018      	movs	r0, r3
 800418c:	f000 f90c 	bl	80043a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004190:	4b0e      	ldr	r3, [pc, #56]	@ (80041cc <HAL_InitTick+0x90>)
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	601a      	str	r2, [r3, #0]
 8004196:	e00d      	b.n	80041b4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004198:	230f      	movs	r3, #15
 800419a:	18fb      	adds	r3, r7, r3
 800419c:	2201      	movs	r2, #1
 800419e:	701a      	strb	r2, [r3, #0]
 80041a0:	e008      	b.n	80041b4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80041a2:	230f      	movs	r3, #15
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	2201      	movs	r2, #1
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	e003      	b.n	80041b4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041ac:	230f      	movs	r3, #15
 80041ae:	18fb      	adds	r3, r7, r3
 80041b0:	2201      	movs	r2, #1
 80041b2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80041b4:	230f      	movs	r3, #15
 80041b6:	18fb      	adds	r3, r7, r3
 80041b8:	781b      	ldrb	r3, [r3, #0]
}
 80041ba:	0018      	movs	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	b005      	add	sp, #20
 80041c0:	bd90      	pop	{r4, r7, pc}
 80041c2:	46c0      	nop			@ (mov r8, r8)
 80041c4:	2000000c 	.word	0x2000000c
 80041c8:	20000004 	.word	0x20000004
 80041cc:	20000008 	.word	0x20000008

080041d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041d4:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <HAL_IncTick+0x1c>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	001a      	movs	r2, r3
 80041da:	4b05      	ldr	r3, [pc, #20]	@ (80041f0 <HAL_IncTick+0x20>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	18d2      	adds	r2, r2, r3
 80041e0:	4b03      	ldr	r3, [pc, #12]	@ (80041f0 <HAL_IncTick+0x20>)
 80041e2:	601a      	str	r2, [r3, #0]
}
 80041e4:	46c0      	nop			@ (mov r8, r8)
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	46c0      	nop			@ (mov r8, r8)
 80041ec:	2000000c 	.word	0x2000000c
 80041f0:	200003e4 	.word	0x200003e4

080041f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  return uwTick;
 80041f8:	4b02      	ldr	r3, [pc, #8]	@ (8004204 <HAL_GetTick+0x10>)
 80041fa:	681b      	ldr	r3, [r3, #0]
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	46c0      	nop			@ (mov r8, r8)
 8004204:	200003e4 	.word	0x200003e4

08004208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004210:	f7ff fff0 	bl	80041f4 <HAL_GetTick>
 8004214:	0003      	movs	r3, r0
 8004216:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	3301      	adds	r3, #1
 8004220:	d005      	beq.n	800422e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004222:	4b0a      	ldr	r3, [pc, #40]	@ (800424c <HAL_Delay+0x44>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	001a      	movs	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	189b      	adds	r3, r3, r2
 800422c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800422e:	46c0      	nop			@ (mov r8, r8)
 8004230:	f7ff ffe0 	bl	80041f4 <HAL_GetTick>
 8004234:	0002      	movs	r2, r0
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	429a      	cmp	r2, r3
 800423e:	d8f7      	bhi.n	8004230 <HAL_Delay+0x28>
  {
  }
}
 8004240:	46c0      	nop			@ (mov r8, r8)
 8004242:	46c0      	nop			@ (mov r8, r8)
 8004244:	46bd      	mov	sp, r7
 8004246:	b004      	add	sp, #16
 8004248:	bd80      	pop	{r7, pc}
 800424a:	46c0      	nop			@ (mov r8, r8)
 800424c:	2000000c 	.word	0x2000000c

08004250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	0002      	movs	r2, r0
 8004258:	1dfb      	adds	r3, r7, #7
 800425a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800425c:	1dfb      	adds	r3, r7, #7
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b7f      	cmp	r3, #127	@ 0x7f
 8004262:	d809      	bhi.n	8004278 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004264:	1dfb      	adds	r3, r7, #7
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	001a      	movs	r2, r3
 800426a:	231f      	movs	r3, #31
 800426c:	401a      	ands	r2, r3
 800426e:	4b04      	ldr	r3, [pc, #16]	@ (8004280 <__NVIC_EnableIRQ+0x30>)
 8004270:	2101      	movs	r1, #1
 8004272:	4091      	lsls	r1, r2
 8004274:	000a      	movs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004278:	46c0      	nop			@ (mov r8, r8)
 800427a:	46bd      	mov	sp, r7
 800427c:	b002      	add	sp, #8
 800427e:	bd80      	pop	{r7, pc}
 8004280:	e000e100 	.word	0xe000e100

08004284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004284:	b590      	push	{r4, r7, lr}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	0002      	movs	r2, r0
 800428c:	6039      	str	r1, [r7, #0]
 800428e:	1dfb      	adds	r3, r7, #7
 8004290:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004292:	1dfb      	adds	r3, r7, #7
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b7f      	cmp	r3, #127	@ 0x7f
 8004298:	d828      	bhi.n	80042ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800429a:	4a2f      	ldr	r2, [pc, #188]	@ (8004358 <__NVIC_SetPriority+0xd4>)
 800429c:	1dfb      	adds	r3, r7, #7
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	b25b      	sxtb	r3, r3
 80042a2:	089b      	lsrs	r3, r3, #2
 80042a4:	33c0      	adds	r3, #192	@ 0xc0
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	589b      	ldr	r3, [r3, r2]
 80042aa:	1dfa      	adds	r2, r7, #7
 80042ac:	7812      	ldrb	r2, [r2, #0]
 80042ae:	0011      	movs	r1, r2
 80042b0:	2203      	movs	r2, #3
 80042b2:	400a      	ands	r2, r1
 80042b4:	00d2      	lsls	r2, r2, #3
 80042b6:	21ff      	movs	r1, #255	@ 0xff
 80042b8:	4091      	lsls	r1, r2
 80042ba:	000a      	movs	r2, r1
 80042bc:	43d2      	mvns	r2, r2
 80042be:	401a      	ands	r2, r3
 80042c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	019b      	lsls	r3, r3, #6
 80042c6:	22ff      	movs	r2, #255	@ 0xff
 80042c8:	401a      	ands	r2, r3
 80042ca:	1dfb      	adds	r3, r7, #7
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	0018      	movs	r0, r3
 80042d0:	2303      	movs	r3, #3
 80042d2:	4003      	ands	r3, r0
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042d8:	481f      	ldr	r0, [pc, #124]	@ (8004358 <__NVIC_SetPriority+0xd4>)
 80042da:	1dfb      	adds	r3, r7, #7
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	b25b      	sxtb	r3, r3
 80042e0:	089b      	lsrs	r3, r3, #2
 80042e2:	430a      	orrs	r2, r1
 80042e4:	33c0      	adds	r3, #192	@ 0xc0
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80042ea:	e031      	b.n	8004350 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042ec:	4a1b      	ldr	r2, [pc, #108]	@ (800435c <__NVIC_SetPriority+0xd8>)
 80042ee:	1dfb      	adds	r3, r7, #7
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	0019      	movs	r1, r3
 80042f4:	230f      	movs	r3, #15
 80042f6:	400b      	ands	r3, r1
 80042f8:	3b08      	subs	r3, #8
 80042fa:	089b      	lsrs	r3, r3, #2
 80042fc:	3306      	adds	r3, #6
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	18d3      	adds	r3, r2, r3
 8004302:	3304      	adds	r3, #4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	1dfa      	adds	r2, r7, #7
 8004308:	7812      	ldrb	r2, [r2, #0]
 800430a:	0011      	movs	r1, r2
 800430c:	2203      	movs	r2, #3
 800430e:	400a      	ands	r2, r1
 8004310:	00d2      	lsls	r2, r2, #3
 8004312:	21ff      	movs	r1, #255	@ 0xff
 8004314:	4091      	lsls	r1, r2
 8004316:	000a      	movs	r2, r1
 8004318:	43d2      	mvns	r2, r2
 800431a:	401a      	ands	r2, r3
 800431c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	019b      	lsls	r3, r3, #6
 8004322:	22ff      	movs	r2, #255	@ 0xff
 8004324:	401a      	ands	r2, r3
 8004326:	1dfb      	adds	r3, r7, #7
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	0018      	movs	r0, r3
 800432c:	2303      	movs	r3, #3
 800432e:	4003      	ands	r3, r0
 8004330:	00db      	lsls	r3, r3, #3
 8004332:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004334:	4809      	ldr	r0, [pc, #36]	@ (800435c <__NVIC_SetPriority+0xd8>)
 8004336:	1dfb      	adds	r3, r7, #7
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	001c      	movs	r4, r3
 800433c:	230f      	movs	r3, #15
 800433e:	4023      	ands	r3, r4
 8004340:	3b08      	subs	r3, #8
 8004342:	089b      	lsrs	r3, r3, #2
 8004344:	430a      	orrs	r2, r1
 8004346:	3306      	adds	r3, #6
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	18c3      	adds	r3, r0, r3
 800434c:	3304      	adds	r3, #4
 800434e:	601a      	str	r2, [r3, #0]
}
 8004350:	46c0      	nop			@ (mov r8, r8)
 8004352:	46bd      	mov	sp, r7
 8004354:	b003      	add	sp, #12
 8004356:	bd90      	pop	{r4, r7, pc}
 8004358:	e000e100 	.word	0xe000e100
 800435c:	e000ed00 	.word	0xe000ed00

08004360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	1e5a      	subs	r2, r3, #1
 800436c:	2380      	movs	r3, #128	@ 0x80
 800436e:	045b      	lsls	r3, r3, #17
 8004370:	429a      	cmp	r2, r3
 8004372:	d301      	bcc.n	8004378 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004374:	2301      	movs	r3, #1
 8004376:	e010      	b.n	800439a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004378:	4b0a      	ldr	r3, [pc, #40]	@ (80043a4 <SysTick_Config+0x44>)
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	3a01      	subs	r2, #1
 800437e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004380:	2301      	movs	r3, #1
 8004382:	425b      	negs	r3, r3
 8004384:	2103      	movs	r1, #3
 8004386:	0018      	movs	r0, r3
 8004388:	f7ff ff7c 	bl	8004284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800438c:	4b05      	ldr	r3, [pc, #20]	@ (80043a4 <SysTick_Config+0x44>)
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004392:	4b04      	ldr	r3, [pc, #16]	@ (80043a4 <SysTick_Config+0x44>)
 8004394:	2207      	movs	r2, #7
 8004396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004398:	2300      	movs	r3, #0
}
 800439a:	0018      	movs	r0, r3
 800439c:	46bd      	mov	sp, r7
 800439e:	b002      	add	sp, #8
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	46c0      	nop			@ (mov r8, r8)
 80043a4:	e000e010 	.word	0xe000e010

080043a8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	210f      	movs	r1, #15
 80043b4:	187b      	adds	r3, r7, r1
 80043b6:	1c02      	adds	r2, r0, #0
 80043b8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	187b      	adds	r3, r7, r1
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	b25b      	sxtb	r3, r3
 80043c2:	0011      	movs	r1, r2
 80043c4:	0018      	movs	r0, r3
 80043c6:	f7ff ff5d 	bl	8004284 <__NVIC_SetPriority>
}
 80043ca:	46c0      	nop			@ (mov r8, r8)
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b004      	add	sp, #16
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	0002      	movs	r2, r0
 80043da:	1dfb      	adds	r3, r7, #7
 80043dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043de:	1dfb      	adds	r3, r7, #7
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	b25b      	sxtb	r3, r3
 80043e4:	0018      	movs	r0, r3
 80043e6:	f7ff ff33 	bl	8004250 <__NVIC_EnableIRQ>
}
 80043ea:	46c0      	nop			@ (mov r8, r8)
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b002      	add	sp, #8
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	0018      	movs	r0, r3
 80043fe:	f7ff ffaf 	bl	8004360 <SysTick_Config>
 8004402:	0003      	movs	r3, r0
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b002      	add	sp, #8
 800440a:	bd80      	pop	{r7, pc}

0800440c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e077      	b.n	800450e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a3d      	ldr	r2, [pc, #244]	@ (8004518 <HAL_DMA_Init+0x10c>)
 8004424:	4694      	mov	ip, r2
 8004426:	4463      	add	r3, ip
 8004428:	2114      	movs	r1, #20
 800442a:	0018      	movs	r0, r3
 800442c:	f7fb fe7a 	bl	8000124 <__udivsi3>
 8004430:	0003      	movs	r3, r0
 8004432:	009a      	lsls	r2, r3, #2
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2225      	movs	r2, #37	@ 0x25
 800443c:	2102      	movs	r1, #2
 800443e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4934      	ldr	r1, [pc, #208]	@ (800451c <HAL_DMA_Init+0x110>)
 800444c:	400a      	ands	r2, r1
 800444e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6819      	ldr	r1, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689a      	ldr	r2, [r3, #8]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	431a      	orrs	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	430a      	orrs	r2, r1
 8004484:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	0018      	movs	r0, r3
 800448a:	f000 fa8d 	bl	80049a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689a      	ldr	r2, [r3, #8]
 8004492:	2380      	movs	r3, #128	@ 0x80
 8004494:	01db      	lsls	r3, r3, #7
 8004496:	429a      	cmp	r2, r3
 8004498:	d102      	bne.n	80044a0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a8:	213f      	movs	r1, #63	@ 0x3f
 80044aa:	400a      	ands	r2, r1
 80044ac:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80044b6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d011      	beq.n	80044e4 <HAL_DMA_Init+0xd8>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d80d      	bhi.n	80044e4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	0018      	movs	r0, r3
 80044cc:	f000 fa98 	bl	8004a00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80044e0:	605a      	str	r2, [r3, #4]
 80044e2:	e008      	b.n	80044f6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2225      	movs	r2, #37	@ 0x25
 8004500:	2101      	movs	r1, #1
 8004502:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2224      	movs	r2, #36	@ 0x24
 8004508:	2100      	movs	r1, #0
 800450a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	0018      	movs	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	b002      	add	sp, #8
 8004514:	bd80      	pop	{r7, pc}
 8004516:	46c0      	nop			@ (mov r8, r8)
 8004518:	bffdfff8 	.word	0xbffdfff8
 800451c:	ffff800f 	.word	0xffff800f

08004520 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800452e:	2317      	movs	r3, #23
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2224      	movs	r2, #36	@ 0x24
 800453a:	5c9b      	ldrb	r3, [r3, r2]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_DMA_Start_IT+0x24>
 8004540:	2302      	movs	r3, #2
 8004542:	e06f      	b.n	8004624 <HAL_DMA_Start_IT+0x104>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2224      	movs	r2, #36	@ 0x24
 8004548:	2101      	movs	r1, #1
 800454a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2225      	movs	r2, #37	@ 0x25
 8004550:	5c9b      	ldrb	r3, [r3, r2]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b01      	cmp	r3, #1
 8004556:	d157      	bne.n	8004608 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2225      	movs	r2, #37	@ 0x25
 800455c:	2102      	movs	r1, #2
 800455e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2101      	movs	r1, #1
 8004572:	438a      	bics	r2, r1
 8004574:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f9d3 	bl	8004928 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004586:	2b00      	cmp	r3, #0
 8004588:	d008      	beq.n	800459c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	210e      	movs	r1, #14
 8004596:	430a      	orrs	r2, r1
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	e00f      	b.n	80045bc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2104      	movs	r1, #4
 80045a8:	438a      	bics	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	210a      	movs	r1, #10
 80045b8:	430a      	orrs	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	2380      	movs	r3, #128	@ 0x80
 80045c4:	025b      	lsls	r3, r3, #9
 80045c6:	4013      	ands	r3, r2
 80045c8:	d008      	beq.n	80045dc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045d4:	2180      	movs	r1, #128	@ 0x80
 80045d6:	0049      	lsls	r1, r1, #1
 80045d8:	430a      	orrs	r2, r1
 80045da:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045ee:	2180      	movs	r1, #128	@ 0x80
 80045f0:	0049      	lsls	r1, r1, #1
 80045f2:	430a      	orrs	r2, r1
 80045f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2101      	movs	r1, #1
 8004602:	430a      	orrs	r2, r1
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	e00a      	b.n	800461e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2280      	movs	r2, #128	@ 0x80
 800460c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2224      	movs	r2, #36	@ 0x24
 8004612:	2100      	movs	r1, #0
 8004614:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004616:	2317      	movs	r3, #23
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	2201      	movs	r2, #1
 800461c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800461e:	2317      	movs	r3, #23
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	781b      	ldrb	r3, [r3, #0]
}
 8004624:	0018      	movs	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	b006      	add	sp, #24
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e050      	b.n	80046e0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2225      	movs	r2, #37	@ 0x25
 8004642:	5c9b      	ldrb	r3, [r3, r2]
 8004644:	b2db      	uxtb	r3, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d008      	beq.n	800465c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2204      	movs	r2, #4
 800464e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2224      	movs	r2, #36	@ 0x24
 8004654:	2100      	movs	r1, #0
 8004656:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e041      	b.n	80046e0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	210e      	movs	r1, #14
 8004668:	438a      	bics	r2, r1
 800466a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004676:	491c      	ldr	r1, [pc, #112]	@ (80046e8 <HAL_DMA_Abort+0xbc>)
 8004678:	400a      	ands	r2, r1
 800467a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2101      	movs	r1, #1
 8004688:	438a      	bics	r2, r1
 800468a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800468c:	4b17      	ldr	r3, [pc, #92]	@ (80046ec <HAL_DMA_Abort+0xc0>)
 800468e:	6859      	ldr	r1, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004694:	221c      	movs	r2, #28
 8004696:	4013      	ands	r3, r2
 8004698:	2201      	movs	r2, #1
 800469a:	409a      	lsls	r2, r3
 800469c:	4b13      	ldr	r3, [pc, #76]	@ (80046ec <HAL_DMA_Abort+0xc0>)
 800469e:	430a      	orrs	r2, r1
 80046a0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80046aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00c      	beq.n	80046ce <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046be:	490a      	ldr	r1, [pc, #40]	@ (80046e8 <HAL_DMA_Abort+0xbc>)
 80046c0:	400a      	ands	r2, r1
 80046c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80046cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2225      	movs	r2, #37	@ 0x25
 80046d2:	2101      	movs	r1, #1
 80046d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2224      	movs	r2, #36	@ 0x24
 80046da:	2100      	movs	r1, #0
 80046dc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	0018      	movs	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	b002      	add	sp, #8
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	fffffeff 	.word	0xfffffeff
 80046ec:	40020000 	.word	0x40020000

080046f0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f8:	210f      	movs	r1, #15
 80046fa:	187b      	adds	r3, r7, r1
 80046fc:	2200      	movs	r2, #0
 80046fe:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2225      	movs	r2, #37	@ 0x25
 8004704:	5c9b      	ldrb	r3, [r3, r2]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d006      	beq.n	800471a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2204      	movs	r2, #4
 8004710:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004712:	187b      	adds	r3, r7, r1
 8004714:	2201      	movs	r2, #1
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	e049      	b.n	80047ae <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	210e      	movs	r1, #14
 8004726:	438a      	bics	r2, r1
 8004728:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2101      	movs	r1, #1
 8004736:	438a      	bics	r2, r1
 8004738:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004744:	491d      	ldr	r1, [pc, #116]	@ (80047bc <HAL_DMA_Abort_IT+0xcc>)
 8004746:	400a      	ands	r2, r1
 8004748:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800474a:	4b1d      	ldr	r3, [pc, #116]	@ (80047c0 <HAL_DMA_Abort_IT+0xd0>)
 800474c:	6859      	ldr	r1, [r3, #4]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004752:	221c      	movs	r2, #28
 8004754:	4013      	ands	r3, r2
 8004756:	2201      	movs	r2, #1
 8004758:	409a      	lsls	r2, r3
 800475a:	4b19      	ldr	r3, [pc, #100]	@ (80047c0 <HAL_DMA_Abort_IT+0xd0>)
 800475c:	430a      	orrs	r2, r1
 800475e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004768:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00c      	beq.n	800478c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800477c:	490f      	ldr	r1, [pc, #60]	@ (80047bc <HAL_DMA_Abort_IT+0xcc>)
 800477e:	400a      	ands	r2, r1
 8004780:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800478a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2225      	movs	r2, #37	@ 0x25
 8004790:	2101      	movs	r1, #1
 8004792:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2224      	movs	r2, #36	@ 0x24
 8004798:	2100      	movs	r1, #0
 800479a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d004      	beq.n	80047ae <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	0010      	movs	r0, r2
 80047ac:	4798      	blx	r3
    }
  }
  return status;
 80047ae:	230f      	movs	r3, #15
 80047b0:	18fb      	adds	r3, r7, r3
 80047b2:	781b      	ldrb	r3, [r3, #0]
}
 80047b4:	0018      	movs	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	b004      	add	sp, #16
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	fffffeff 	.word	0xfffffeff
 80047c0:	40020000 	.word	0x40020000

080047c4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80047cc:	4b55      	ldr	r3, [pc, #340]	@ (8004924 <HAL_DMA_IRQHandler+0x160>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047de:	221c      	movs	r2, #28
 80047e0:	4013      	ands	r3, r2
 80047e2:	2204      	movs	r2, #4
 80047e4:	409a      	lsls	r2, r3
 80047e6:	0013      	movs	r3, r2
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	4013      	ands	r3, r2
 80047ec:	d027      	beq.n	800483e <HAL_DMA_IRQHandler+0x7a>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2204      	movs	r2, #4
 80047f2:	4013      	ands	r3, r2
 80047f4:	d023      	beq.n	800483e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2220      	movs	r2, #32
 80047fe:	4013      	ands	r3, r2
 8004800:	d107      	bne.n	8004812 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2104      	movs	r1, #4
 800480e:	438a      	bics	r2, r1
 8004810:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004812:	4b44      	ldr	r3, [pc, #272]	@ (8004924 <HAL_DMA_IRQHandler+0x160>)
 8004814:	6859      	ldr	r1, [r3, #4]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481a:	221c      	movs	r2, #28
 800481c:	4013      	ands	r3, r2
 800481e:	2204      	movs	r2, #4
 8004820:	409a      	lsls	r2, r3
 8004822:	4b40      	ldr	r3, [pc, #256]	@ (8004924 <HAL_DMA_IRQHandler+0x160>)
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482c:	2b00      	cmp	r3, #0
 800482e:	d100      	bne.n	8004832 <HAL_DMA_IRQHandler+0x6e>
 8004830:	e073      	b.n	800491a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	0010      	movs	r0, r2
 800483a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800483c:	e06d      	b.n	800491a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	221c      	movs	r2, #28
 8004844:	4013      	ands	r3, r2
 8004846:	2202      	movs	r2, #2
 8004848:	409a      	lsls	r2, r3
 800484a:	0013      	movs	r3, r2
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4013      	ands	r3, r2
 8004850:	d02e      	beq.n	80048b0 <HAL_DMA_IRQHandler+0xec>
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	2202      	movs	r2, #2
 8004856:	4013      	ands	r3, r2
 8004858:	d02a      	beq.n	80048b0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2220      	movs	r2, #32
 8004862:	4013      	ands	r3, r2
 8004864:	d10b      	bne.n	800487e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	210a      	movs	r1, #10
 8004872:	438a      	bics	r2, r1
 8004874:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2225      	movs	r2, #37	@ 0x25
 800487a:	2101      	movs	r1, #1
 800487c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800487e:	4b29      	ldr	r3, [pc, #164]	@ (8004924 <HAL_DMA_IRQHandler+0x160>)
 8004880:	6859      	ldr	r1, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	221c      	movs	r2, #28
 8004888:	4013      	ands	r3, r2
 800488a:	2202      	movs	r2, #2
 800488c:	409a      	lsls	r2, r3
 800488e:	4b25      	ldr	r3, [pc, #148]	@ (8004924 <HAL_DMA_IRQHandler+0x160>)
 8004890:	430a      	orrs	r2, r1
 8004892:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2224      	movs	r2, #36	@ 0x24
 8004898:	2100      	movs	r1, #0
 800489a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d03a      	beq.n	800491a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	0010      	movs	r0, r2
 80048ac:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80048ae:	e034      	b.n	800491a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b4:	221c      	movs	r2, #28
 80048b6:	4013      	ands	r3, r2
 80048b8:	2208      	movs	r2, #8
 80048ba:	409a      	lsls	r2, r3
 80048bc:	0013      	movs	r3, r2
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	4013      	ands	r3, r2
 80048c2:	d02b      	beq.n	800491c <HAL_DMA_IRQHandler+0x158>
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2208      	movs	r2, #8
 80048c8:	4013      	ands	r3, r2
 80048ca:	d027      	beq.n	800491c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	210e      	movs	r1, #14
 80048d8:	438a      	bics	r2, r1
 80048da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80048dc:	4b11      	ldr	r3, [pc, #68]	@ (8004924 <HAL_DMA_IRQHandler+0x160>)
 80048de:	6859      	ldr	r1, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e4:	221c      	movs	r2, #28
 80048e6:	4013      	ands	r3, r2
 80048e8:	2201      	movs	r2, #1
 80048ea:	409a      	lsls	r2, r3
 80048ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004924 <HAL_DMA_IRQHandler+0x160>)
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2225      	movs	r2, #37	@ 0x25
 80048fc:	2101      	movs	r1, #1
 80048fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2224      	movs	r2, #36	@ 0x24
 8004904:	2100      	movs	r1, #0
 8004906:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800490c:	2b00      	cmp	r3, #0
 800490e:	d005      	beq.n	800491c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	0010      	movs	r0, r2
 8004918:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	46c0      	nop			@ (mov r8, r8)
}
 800491e:	46bd      	mov	sp, r7
 8004920:	b004      	add	sp, #16
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40020000 	.word	0x40020000

08004928 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800493e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004944:	2b00      	cmp	r3, #0
 8004946:	d004      	beq.n	8004952 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004950:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004952:	4b14      	ldr	r3, [pc, #80]	@ (80049a4 <DMA_SetConfig+0x7c>)
 8004954:	6859      	ldr	r1, [r3, #4]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	221c      	movs	r2, #28
 800495c:	4013      	ands	r3, r2
 800495e:	2201      	movs	r2, #1
 8004960:	409a      	lsls	r2, r3
 8004962:	4b10      	ldr	r3, [pc, #64]	@ (80049a4 <DMA_SetConfig+0x7c>)
 8004964:	430a      	orrs	r2, r1
 8004966:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b10      	cmp	r3, #16
 8004976:	d108      	bne.n	800498a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004988:	e007      	b.n	800499a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	60da      	str	r2, [r3, #12]
}
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	b004      	add	sp, #16
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	46c0      	nop			@ (mov r8, r8)
 80049a4:	40020000 	.word	0x40020000

080049a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b4:	089b      	lsrs	r3, r3, #2
 80049b6:	4a10      	ldr	r2, [pc, #64]	@ (80049f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80049b8:	4694      	mov	ip, r2
 80049ba:	4463      	add	r3, ip
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	001a      	movs	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	001a      	movs	r2, r3
 80049ca:	23ff      	movs	r3, #255	@ 0xff
 80049cc:	4013      	ands	r3, r2
 80049ce:	3b08      	subs	r3, #8
 80049d0:	2114      	movs	r1, #20
 80049d2:	0018      	movs	r0, r3
 80049d4:	f7fb fba6 	bl	8000124 <__udivsi3>
 80049d8:	0003      	movs	r3, r0
 80049da:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a07      	ldr	r2, [pc, #28]	@ (80049fc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80049e0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	221f      	movs	r2, #31
 80049e6:	4013      	ands	r3, r2
 80049e8:	2201      	movs	r2, #1
 80049ea:	409a      	lsls	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80049f0:	46c0      	nop			@ (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b004      	add	sp, #16
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	10008200 	.word	0x10008200
 80049fc:	40020880 	.word	0x40020880

08004a00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	223f      	movs	r2, #63	@ 0x3f
 8004a0e:	4013      	ands	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4a0a      	ldr	r2, [pc, #40]	@ (8004a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a16:	4694      	mov	ip, r2
 8004a18:	4463      	add	r3, ip
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	001a      	movs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a07      	ldr	r2, [pc, #28]	@ (8004a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004a26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2201      	movs	r2, #1
 8004a32:	409a      	lsls	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8004a38:	46c0      	nop			@ (mov r8, r8)
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b004      	add	sp, #16
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	1000823f 	.word	0x1000823f
 8004a44:	40020940 	.word	0x40020940

08004a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a52:	2300      	movs	r3, #0
 8004a54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a56:	e147      	b.n	8004ce8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4091      	lsls	r1, r2
 8004a62:	000a      	movs	r2, r1
 8004a64:	4013      	ands	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d100      	bne.n	8004a70 <HAL_GPIO_Init+0x28>
 8004a6e:	e138      	b.n	8004ce2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2203      	movs	r2, #3
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d005      	beq.n	8004a88 <HAL_GPIO_Init+0x40>
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2203      	movs	r2, #3
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d130      	bne.n	8004aea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	2203      	movs	r2, #3
 8004a94:	409a      	lsls	r2, r3
 8004a96:	0013      	movs	r3, r2
 8004a98:	43da      	mvns	r2, r3
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	0013      	movs	r3, r2
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004abe:	2201      	movs	r2, #1
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	409a      	lsls	r2, r3
 8004ac4:	0013      	movs	r3, r2
 8004ac6:	43da      	mvns	r2, r3
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	4013      	ands	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	091b      	lsrs	r3, r3, #4
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	409a      	lsls	r2, r3
 8004adc:	0013      	movs	r3, r2
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2203      	movs	r2, #3
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d017      	beq.n	8004b26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	2203      	movs	r2, #3
 8004b02:	409a      	lsls	r2, r3
 8004b04:	0013      	movs	r3, r2
 8004b06:	43da      	mvns	r2, r3
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	409a      	lsls	r2, r3
 8004b18:	0013      	movs	r3, r2
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d123      	bne.n	8004b7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	08da      	lsrs	r2, r3, #3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	3208      	adds	r2, #8
 8004b3a:	0092      	lsls	r2, r2, #2
 8004b3c:	58d3      	ldr	r3, [r2, r3]
 8004b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2207      	movs	r2, #7
 8004b44:	4013      	ands	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	220f      	movs	r2, #15
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	0013      	movs	r3, r2
 8004b4e:	43da      	mvns	r2, r3
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	4013      	ands	r3, r2
 8004b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2107      	movs	r1, #7
 8004b5e:	400b      	ands	r3, r1
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	409a      	lsls	r2, r3
 8004b64:	0013      	movs	r3, r2
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	08da      	lsrs	r2, r3, #3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3208      	adds	r2, #8
 8004b74:	0092      	lsls	r2, r2, #2
 8004b76:	6939      	ldr	r1, [r7, #16]
 8004b78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	2203      	movs	r2, #3
 8004b86:	409a      	lsls	r2, r3
 8004b88:	0013      	movs	r3, r2
 8004b8a:	43da      	mvns	r2, r3
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	2203      	movs	r2, #3
 8004b98:	401a      	ands	r2, r3
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	0013      	movs	r3, r2
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	23c0      	movs	r3, #192	@ 0xc0
 8004bb4:	029b      	lsls	r3, r3, #10
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d100      	bne.n	8004bbc <HAL_GPIO_Init+0x174>
 8004bba:	e092      	b.n	8004ce2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004bbc:	4a50      	ldr	r2, [pc, #320]	@ (8004d00 <HAL_GPIO_Init+0x2b8>)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	089b      	lsrs	r3, r3, #2
 8004bc2:	3318      	adds	r3, #24
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	589b      	ldr	r3, [r3, r2]
 8004bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2203      	movs	r2, #3
 8004bce:	4013      	ands	r3, r2
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	220f      	movs	r2, #15
 8004bd4:	409a      	lsls	r2, r3
 8004bd6:	0013      	movs	r3, r2
 8004bd8:	43da      	mvns	r2, r3
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4013      	ands	r3, r2
 8004bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	23a0      	movs	r3, #160	@ 0xa0
 8004be4:	05db      	lsls	r3, r3, #23
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d013      	beq.n	8004c12 <HAL_GPIO_Init+0x1ca>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a45      	ldr	r2, [pc, #276]	@ (8004d04 <HAL_GPIO_Init+0x2bc>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d00d      	beq.n	8004c0e <HAL_GPIO_Init+0x1c6>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a44      	ldr	r2, [pc, #272]	@ (8004d08 <HAL_GPIO_Init+0x2c0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d007      	beq.n	8004c0a <HAL_GPIO_Init+0x1c2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a43      	ldr	r2, [pc, #268]	@ (8004d0c <HAL_GPIO_Init+0x2c4>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d101      	bne.n	8004c06 <HAL_GPIO_Init+0x1be>
 8004c02:	2303      	movs	r3, #3
 8004c04:	e006      	b.n	8004c14 <HAL_GPIO_Init+0x1cc>
 8004c06:	2305      	movs	r3, #5
 8004c08:	e004      	b.n	8004c14 <HAL_GPIO_Init+0x1cc>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e002      	b.n	8004c14 <HAL_GPIO_Init+0x1cc>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <HAL_GPIO_Init+0x1cc>
 8004c12:	2300      	movs	r3, #0
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	2103      	movs	r1, #3
 8004c18:	400a      	ands	r2, r1
 8004c1a:	00d2      	lsls	r2, r2, #3
 8004c1c:	4093      	lsls	r3, r2
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004c24:	4936      	ldr	r1, [pc, #216]	@ (8004d00 <HAL_GPIO_Init+0x2b8>)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	089b      	lsrs	r3, r3, #2
 8004c2a:	3318      	adds	r3, #24
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c32:	4b33      	ldr	r3, [pc, #204]	@ (8004d00 <HAL_GPIO_Init+0x2b8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	43da      	mvns	r2, r3
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	2380      	movs	r3, #128	@ 0x80
 8004c48:	035b      	lsls	r3, r3, #13
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d003      	beq.n	8004c56 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c56:	4b2a      	ldr	r3, [pc, #168]	@ (8004d00 <HAL_GPIO_Init+0x2b8>)
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004c5c:	4b28      	ldr	r3, [pc, #160]	@ (8004d00 <HAL_GPIO_Init+0x2b8>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	43da      	mvns	r2, r3
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	2380      	movs	r3, #128	@ 0x80
 8004c72:	039b      	lsls	r3, r3, #14
 8004c74:	4013      	ands	r3, r2
 8004c76:	d003      	beq.n	8004c80 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c80:	4b1f      	ldr	r3, [pc, #124]	@ (8004d00 <HAL_GPIO_Init+0x2b8>)
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004c86:	4a1e      	ldr	r2, [pc, #120]	@ (8004d00 <HAL_GPIO_Init+0x2b8>)
 8004c88:	2384      	movs	r3, #132	@ 0x84
 8004c8a:	58d3      	ldr	r3, [r2, r3]
 8004c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	43da      	mvns	r2, r3
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	4013      	ands	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	2380      	movs	r3, #128	@ 0x80
 8004c9e:	029b      	lsls	r3, r3, #10
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d003      	beq.n	8004cac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cac:	4914      	ldr	r1, [pc, #80]	@ (8004d00 <HAL_GPIO_Init+0x2b8>)
 8004cae:	2284      	movs	r2, #132	@ 0x84
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004cb4:	4a12      	ldr	r2, [pc, #72]	@ (8004d00 <HAL_GPIO_Init+0x2b8>)
 8004cb6:	2380      	movs	r3, #128	@ 0x80
 8004cb8:	58d3      	ldr	r3, [r2, r3]
 8004cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	43da      	mvns	r2, r3
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	2380      	movs	r3, #128	@ 0x80
 8004ccc:	025b      	lsls	r3, r3, #9
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d003      	beq.n	8004cda <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004cda:	4909      	ldr	r1, [pc, #36]	@ (8004d00 <HAL_GPIO_Init+0x2b8>)
 8004cdc:	2280      	movs	r2, #128	@ 0x80
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	40da      	lsrs	r2, r3
 8004cf0:	1e13      	subs	r3, r2, #0
 8004cf2:	d000      	beq.n	8004cf6 <HAL_GPIO_Init+0x2ae>
 8004cf4:	e6b0      	b.n	8004a58 <HAL_GPIO_Init+0x10>
  }
}
 8004cf6:	46c0      	nop			@ (mov r8, r8)
 8004cf8:	46c0      	nop			@ (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b006      	add	sp, #24
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40021800 	.word	0x40021800
 8004d04:	50000400 	.word	0x50000400
 8004d08:	50000800 	.word	0x50000800
 8004d0c:	50000c00 	.word	0x50000c00

08004d10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	000a      	movs	r2, r1
 8004d1a:	1cbb      	adds	r3, r7, #2
 8004d1c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	1cba      	adds	r2, r7, #2
 8004d24:	8812      	ldrh	r2, [r2, #0]
 8004d26:	4013      	ands	r3, r2
 8004d28:	d004      	beq.n	8004d34 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004d2a:	230f      	movs	r3, #15
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	2201      	movs	r2, #1
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	e003      	b.n	8004d3c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d34:	230f      	movs	r3, #15
 8004d36:	18fb      	adds	r3, r7, r3
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004d3c:	230f      	movs	r3, #15
 8004d3e:	18fb      	adds	r3, r7, r3
 8004d40:	781b      	ldrb	r3, [r3, #0]
}
 8004d42:	0018      	movs	r0, r3
 8004d44:	46bd      	mov	sp, r7
 8004d46:	b004      	add	sp, #16
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
 8004d52:	0008      	movs	r0, r1
 8004d54:	0011      	movs	r1, r2
 8004d56:	1cbb      	adds	r3, r7, #2
 8004d58:	1c02      	adds	r2, r0, #0
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	1c7b      	adds	r3, r7, #1
 8004d5e:	1c0a      	adds	r2, r1, #0
 8004d60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d62:	1c7b      	adds	r3, r7, #1
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d004      	beq.n	8004d74 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d6a:	1cbb      	adds	r3, r7, #2
 8004d6c:	881a      	ldrh	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d72:	e003      	b.n	8004d7c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d74:	1cbb      	adds	r3, r7, #2
 8004d76:	881a      	ldrh	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d7c:	46c0      	nop			@ (mov r8, r8)
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	b002      	add	sp, #8
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d88:	4b04      	ldr	r3, [pc, #16]	@ (8004d9c <HAL_PWR_EnableBkUpAccess+0x18>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	4b03      	ldr	r3, [pc, #12]	@ (8004d9c <HAL_PWR_EnableBkUpAccess+0x18>)
 8004d8e:	2180      	movs	r1, #128	@ 0x80
 8004d90:	0049      	lsls	r1, r1, #1
 8004d92:	430a      	orrs	r2, r1
 8004d94:	601a      	str	r2, [r3, #0]
}
 8004d96:	46c0      	nop			@ (mov r8, r8)
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40007000 	.word	0x40007000

08004da0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004da8:	4b19      	ldr	r3, [pc, #100]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a19      	ldr	r2, [pc, #100]	@ (8004e14 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004dae:	4013      	ands	r3, r2
 8004db0:	0019      	movs	r1, r3
 8004db2:	4b17      	ldr	r3, [pc, #92]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	2380      	movs	r3, #128	@ 0x80
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d11f      	bne.n	8004e04 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004dc4:	4b14      	ldr	r3, [pc, #80]	@ (8004e18 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	0013      	movs	r3, r2
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	189b      	adds	r3, r3, r2
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4912      	ldr	r1, [pc, #72]	@ (8004e1c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f7fb f9a6 	bl	8000124 <__udivsi3>
 8004dd8:	0003      	movs	r3, r0
 8004dda:	3301      	adds	r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dde:	e008      	b.n	8004df2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	e001      	b.n	8004df2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e009      	b.n	8004e06 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004df2:	4b07      	ldr	r3, [pc, #28]	@ (8004e10 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004df4:	695a      	ldr	r2, [r3, #20]
 8004df6:	2380      	movs	r3, #128	@ 0x80
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	2380      	movs	r3, #128	@ 0x80
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d0ed      	beq.n	8004de0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	0018      	movs	r0, r3
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	b004      	add	sp, #16
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	46c0      	nop			@ (mov r8, r8)
 8004e10:	40007000 	.word	0x40007000
 8004e14:	fffff9ff 	.word	0xfffff9ff
 8004e18:	20000004 	.word	0x20000004
 8004e1c:	000f4240 	.word	0x000f4240

08004e20 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004e24:	4b03      	ldr	r3, [pc, #12]	@ (8004e34 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	23e0      	movs	r3, #224	@ 0xe0
 8004e2a:	01db      	lsls	r3, r3, #7
 8004e2c:	4013      	ands	r3, r2
}
 8004e2e:	0018      	movs	r0, r3
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40021000 	.word	0x40021000

08004e38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e2f3      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	4013      	ands	r3, r2
 8004e52:	d100      	bne.n	8004e56 <HAL_RCC_OscConfig+0x1e>
 8004e54:	e07c      	b.n	8004f50 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e56:	4bc3      	ldr	r3, [pc, #780]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2238      	movs	r2, #56	@ 0x38
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e60:	4bc0      	ldr	r3, [pc, #768]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	2203      	movs	r2, #3
 8004e66:	4013      	ands	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d102      	bne.n	8004e76 <HAL_RCC_OscConfig+0x3e>
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d002      	beq.n	8004e7c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d10b      	bne.n	8004e94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e7c:	4bb9      	ldr	r3, [pc, #740]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	2380      	movs	r3, #128	@ 0x80
 8004e82:	029b      	lsls	r3, r3, #10
 8004e84:	4013      	ands	r3, r2
 8004e86:	d062      	beq.n	8004f4e <HAL_RCC_OscConfig+0x116>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d15e      	bne.n	8004f4e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e2ce      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	2380      	movs	r3, #128	@ 0x80
 8004e9a:	025b      	lsls	r3, r3, #9
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d107      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x78>
 8004ea0:	4bb0      	ldr	r3, [pc, #704]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	4baf      	ldr	r3, [pc, #700]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004ea6:	2180      	movs	r1, #128	@ 0x80
 8004ea8:	0249      	lsls	r1, r1, #9
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	e020      	b.n	8004ef2 <HAL_RCC_OscConfig+0xba>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685a      	ldr	r2, [r3, #4]
 8004eb4:	23a0      	movs	r3, #160	@ 0xa0
 8004eb6:	02db      	lsls	r3, r3, #11
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d10e      	bne.n	8004eda <HAL_RCC_OscConfig+0xa2>
 8004ebc:	4ba9      	ldr	r3, [pc, #676]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	4ba8      	ldr	r3, [pc, #672]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004ec2:	2180      	movs	r1, #128	@ 0x80
 8004ec4:	02c9      	lsls	r1, r1, #11
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	4ba6      	ldr	r3, [pc, #664]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4ba5      	ldr	r3, [pc, #660]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004ed0:	2180      	movs	r1, #128	@ 0x80
 8004ed2:	0249      	lsls	r1, r1, #9
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	e00b      	b.n	8004ef2 <HAL_RCC_OscConfig+0xba>
 8004eda:	4ba2      	ldr	r3, [pc, #648]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	4ba1      	ldr	r3, [pc, #644]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004ee0:	49a1      	ldr	r1, [pc, #644]	@ (8005168 <HAL_RCC_OscConfig+0x330>)
 8004ee2:	400a      	ands	r2, r1
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	4b9f      	ldr	r3, [pc, #636]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4b9e      	ldr	r3, [pc, #632]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004eec:	499f      	ldr	r1, [pc, #636]	@ (800516c <HAL_RCC_OscConfig+0x334>)
 8004eee:	400a      	ands	r2, r1
 8004ef0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d014      	beq.n	8004f24 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efa:	f7ff f97b 	bl	80041f4 <HAL_GetTick>
 8004efe:	0003      	movs	r3, r0
 8004f00:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f04:	f7ff f976 	bl	80041f4 <HAL_GetTick>
 8004f08:	0002      	movs	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b64      	cmp	r3, #100	@ 0x64
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e28d      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f16:	4b93      	ldr	r3, [pc, #588]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	2380      	movs	r3, #128	@ 0x80
 8004f1c:	029b      	lsls	r3, r3, #10
 8004f1e:	4013      	ands	r3, r2
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0xcc>
 8004f22:	e015      	b.n	8004f50 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f24:	f7ff f966 	bl	80041f4 <HAL_GetTick>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f2e:	f7ff f961 	bl	80041f4 <HAL_GetTick>
 8004f32:	0002      	movs	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b64      	cmp	r3, #100	@ 0x64
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e278      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f40:	4b88      	ldr	r3, [pc, #544]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	2380      	movs	r3, #128	@ 0x80
 8004f46:	029b      	lsls	r3, r3, #10
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d1f0      	bne.n	8004f2e <HAL_RCC_OscConfig+0xf6>
 8004f4c:	e000      	b.n	8004f50 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2202      	movs	r2, #2
 8004f56:	4013      	ands	r3, r2
 8004f58:	d100      	bne.n	8004f5c <HAL_RCC_OscConfig+0x124>
 8004f5a:	e099      	b.n	8005090 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f5c:	4b81      	ldr	r3, [pc, #516]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2238      	movs	r2, #56	@ 0x38
 8004f62:	4013      	ands	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f66:	4b7f      	ldr	r3, [pc, #508]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b10      	cmp	r3, #16
 8004f74:	d102      	bne.n	8004f7c <HAL_RCC_OscConfig+0x144>
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d002      	beq.n	8004f82 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d135      	bne.n	8004fee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f82:	4b78      	ldr	r3, [pc, #480]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	2380      	movs	r3, #128	@ 0x80
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	d005      	beq.n	8004f9a <HAL_RCC_OscConfig+0x162>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e24b      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9a:	4b72      	ldr	r3, [pc, #456]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	4a74      	ldr	r2, [pc, #464]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	0019      	movs	r1, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	021a      	lsls	r2, r3, #8
 8004faa:	4b6e      	ldr	r3, [pc, #440]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004fac:	430a      	orrs	r2, r1
 8004fae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d112      	bne.n	8004fdc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004fb6:	4b6b      	ldr	r3, [pc, #428]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a6e      	ldr	r2, [pc, #440]	@ (8005174 <HAL_RCC_OscConfig+0x33c>)
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	0019      	movs	r1, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	4b67      	ldr	r3, [pc, #412]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004fca:	4b66      	ldr	r3, [pc, #408]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	0adb      	lsrs	r3, r3, #11
 8004fd0:	2207      	movs	r2, #7
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	4a68      	ldr	r2, [pc, #416]	@ (8005178 <HAL_RCC_OscConfig+0x340>)
 8004fd6:	40da      	lsrs	r2, r3
 8004fd8:	4b68      	ldr	r3, [pc, #416]	@ (800517c <HAL_RCC_OscConfig+0x344>)
 8004fda:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fdc:	4b68      	ldr	r3, [pc, #416]	@ (8005180 <HAL_RCC_OscConfig+0x348>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	0018      	movs	r0, r3
 8004fe2:	f7ff f8ab 	bl	800413c <HAL_InitTick>
 8004fe6:	1e03      	subs	r3, r0, #0
 8004fe8:	d051      	beq.n	800508e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e221      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d030      	beq.n	8005058 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a5e      	ldr	r2, [pc, #376]	@ (8005174 <HAL_RCC_OscConfig+0x33c>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	0019      	movs	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691a      	ldr	r2, [r3, #16]
 8005004:	4b57      	ldr	r3, [pc, #348]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8005006:	430a      	orrs	r2, r1
 8005008:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800500a:	4b56      	ldr	r3, [pc, #344]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4b55      	ldr	r3, [pc, #340]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8005010:	2180      	movs	r1, #128	@ 0x80
 8005012:	0049      	lsls	r1, r1, #1
 8005014:	430a      	orrs	r2, r1
 8005016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005018:	f7ff f8ec 	bl	80041f4 <HAL_GetTick>
 800501c:	0003      	movs	r3, r0
 800501e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005022:	f7ff f8e7 	bl	80041f4 <HAL_GetTick>
 8005026:	0002      	movs	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e1fe      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005034:	4b4b      	ldr	r3, [pc, #300]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	2380      	movs	r3, #128	@ 0x80
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	4013      	ands	r3, r2
 800503e:	d0f0      	beq.n	8005022 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005040:	4b48      	ldr	r3, [pc, #288]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4a4a      	ldr	r2, [pc, #296]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8005046:	4013      	ands	r3, r2
 8005048:	0019      	movs	r1, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	021a      	lsls	r2, r3, #8
 8005050:	4b44      	ldr	r3, [pc, #272]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
 8005056:	e01b      	b.n	8005090 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005058:	4b42      	ldr	r3, [pc, #264]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	4b41      	ldr	r3, [pc, #260]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 800505e:	4949      	ldr	r1, [pc, #292]	@ (8005184 <HAL_RCC_OscConfig+0x34c>)
 8005060:	400a      	ands	r2, r1
 8005062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7ff f8c6 	bl	80041f4 <HAL_GetTick>
 8005068:	0003      	movs	r3, r0
 800506a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800506e:	f7ff f8c1 	bl	80041f4 <HAL_GetTick>
 8005072:	0002      	movs	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e1d8      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005080:	4b38      	ldr	r3, [pc, #224]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	2380      	movs	r3, #128	@ 0x80
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	4013      	ands	r3, r2
 800508a:	d1f0      	bne.n	800506e <HAL_RCC_OscConfig+0x236>
 800508c:	e000      	b.n	8005090 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800508e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2208      	movs	r2, #8
 8005096:	4013      	ands	r3, r2
 8005098:	d047      	beq.n	800512a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800509a:	4b32      	ldr	r3, [pc, #200]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	2238      	movs	r2, #56	@ 0x38
 80050a0:	4013      	ands	r3, r2
 80050a2:	2b18      	cmp	r3, #24
 80050a4:	d10a      	bne.n	80050bc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80050a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 80050a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050aa:	2202      	movs	r2, #2
 80050ac:	4013      	ands	r3, r2
 80050ae:	d03c      	beq.n	800512a <HAL_RCC_OscConfig+0x2f2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d138      	bne.n	800512a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e1ba      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d019      	beq.n	80050f8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80050c4:	4b27      	ldr	r3, [pc, #156]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 80050c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80050c8:	4b26      	ldr	r3, [pc, #152]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 80050ca:	2101      	movs	r1, #1
 80050cc:	430a      	orrs	r2, r1
 80050ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d0:	f7ff f890 	bl	80041f4 <HAL_GetTick>
 80050d4:	0003      	movs	r3, r0
 80050d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050da:	f7ff f88b 	bl	80041f4 <HAL_GetTick>
 80050de:	0002      	movs	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e1a2      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 80050ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050f0:	2202      	movs	r2, #2
 80050f2:	4013      	ands	r3, r2
 80050f4:	d0f1      	beq.n	80050da <HAL_RCC_OscConfig+0x2a2>
 80050f6:	e018      	b.n	800512a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80050f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 80050fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80050fc:	4b19      	ldr	r3, [pc, #100]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 80050fe:	2101      	movs	r1, #1
 8005100:	438a      	bics	r2, r1
 8005102:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005104:	f7ff f876 	bl	80041f4 <HAL_GetTick>
 8005108:	0003      	movs	r3, r0
 800510a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800510e:	f7ff f871 	bl	80041f4 <HAL_GetTick>
 8005112:	0002      	movs	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e188      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005120:	4b10      	ldr	r3, [pc, #64]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8005122:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005124:	2202      	movs	r2, #2
 8005126:	4013      	ands	r3, r2
 8005128:	d1f1      	bne.n	800510e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2204      	movs	r2, #4
 8005130:	4013      	ands	r3, r2
 8005132:	d100      	bne.n	8005136 <HAL_RCC_OscConfig+0x2fe>
 8005134:	e0c6      	b.n	80052c4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005136:	231f      	movs	r3, #31
 8005138:	18fb      	adds	r3, r7, r3
 800513a:	2200      	movs	r2, #0
 800513c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800513e:	4b09      	ldr	r3, [pc, #36]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2238      	movs	r2, #56	@ 0x38
 8005144:	4013      	ands	r3, r2
 8005146:	2b20      	cmp	r3, #32
 8005148:	d11e      	bne.n	8005188 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800514a:	4b06      	ldr	r3, [pc, #24]	@ (8005164 <HAL_RCC_OscConfig+0x32c>)
 800514c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800514e:	2202      	movs	r2, #2
 8005150:	4013      	ands	r3, r2
 8005152:	d100      	bne.n	8005156 <HAL_RCC_OscConfig+0x31e>
 8005154:	e0b6      	b.n	80052c4 <HAL_RCC_OscConfig+0x48c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d000      	beq.n	8005160 <HAL_RCC_OscConfig+0x328>
 800515e:	e0b1      	b.n	80052c4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e166      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
 8005164:	40021000 	.word	0x40021000
 8005168:	fffeffff 	.word	0xfffeffff
 800516c:	fffbffff 	.word	0xfffbffff
 8005170:	ffff80ff 	.word	0xffff80ff
 8005174:	ffffc7ff 	.word	0xffffc7ff
 8005178:	00f42400 	.word	0x00f42400
 800517c:	20000004 	.word	0x20000004
 8005180:	20000008 	.word	0x20000008
 8005184:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005188:	4bac      	ldr	r3, [pc, #688]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 800518a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800518c:	2380      	movs	r3, #128	@ 0x80
 800518e:	055b      	lsls	r3, r3, #21
 8005190:	4013      	ands	r3, r2
 8005192:	d101      	bne.n	8005198 <HAL_RCC_OscConfig+0x360>
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <HAL_RCC_OscConfig+0x362>
 8005198:	2300      	movs	r3, #0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d011      	beq.n	80051c2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800519e:	4ba7      	ldr	r3, [pc, #668]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 80051a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051a2:	4ba6      	ldr	r3, [pc, #664]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 80051a4:	2180      	movs	r1, #128	@ 0x80
 80051a6:	0549      	lsls	r1, r1, #21
 80051a8:	430a      	orrs	r2, r1
 80051aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80051ac:	4ba3      	ldr	r3, [pc, #652]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 80051ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051b0:	2380      	movs	r3, #128	@ 0x80
 80051b2:	055b      	lsls	r3, r3, #21
 80051b4:	4013      	ands	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80051ba:	231f      	movs	r3, #31
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	2201      	movs	r2, #1
 80051c0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051c2:	4b9f      	ldr	r3, [pc, #636]	@ (8005440 <HAL_RCC_OscConfig+0x608>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	2380      	movs	r3, #128	@ 0x80
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	4013      	ands	r3, r2
 80051cc:	d11a      	bne.n	8005204 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051ce:	4b9c      	ldr	r3, [pc, #624]	@ (8005440 <HAL_RCC_OscConfig+0x608>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	4b9b      	ldr	r3, [pc, #620]	@ (8005440 <HAL_RCC_OscConfig+0x608>)
 80051d4:	2180      	movs	r1, #128	@ 0x80
 80051d6:	0049      	lsls	r1, r1, #1
 80051d8:	430a      	orrs	r2, r1
 80051da:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80051dc:	f7ff f80a 	bl	80041f4 <HAL_GetTick>
 80051e0:	0003      	movs	r3, r0
 80051e2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e6:	f7ff f805 	bl	80041f4 <HAL_GetTick>
 80051ea:	0002      	movs	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e11c      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051f8:	4b91      	ldr	r3, [pc, #580]	@ (8005440 <HAL_RCC_OscConfig+0x608>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	2380      	movs	r3, #128	@ 0x80
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	4013      	ands	r3, r2
 8005202:	d0f0      	beq.n	80051e6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d106      	bne.n	800521a <HAL_RCC_OscConfig+0x3e2>
 800520c:	4b8b      	ldr	r3, [pc, #556]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 800520e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005210:	4b8a      	ldr	r3, [pc, #552]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 8005212:	2101      	movs	r1, #1
 8005214:	430a      	orrs	r2, r1
 8005216:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005218:	e01c      	b.n	8005254 <HAL_RCC_OscConfig+0x41c>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	2b05      	cmp	r3, #5
 8005220:	d10c      	bne.n	800523c <HAL_RCC_OscConfig+0x404>
 8005222:	4b86      	ldr	r3, [pc, #536]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 8005224:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005226:	4b85      	ldr	r3, [pc, #532]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 8005228:	2104      	movs	r1, #4
 800522a:	430a      	orrs	r2, r1
 800522c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800522e:	4b83      	ldr	r3, [pc, #524]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 8005230:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005232:	4b82      	ldr	r3, [pc, #520]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 8005234:	2101      	movs	r1, #1
 8005236:	430a      	orrs	r2, r1
 8005238:	65da      	str	r2, [r3, #92]	@ 0x5c
 800523a:	e00b      	b.n	8005254 <HAL_RCC_OscConfig+0x41c>
 800523c:	4b7f      	ldr	r3, [pc, #508]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 800523e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005240:	4b7e      	ldr	r3, [pc, #504]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 8005242:	2101      	movs	r1, #1
 8005244:	438a      	bics	r2, r1
 8005246:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005248:	4b7c      	ldr	r3, [pc, #496]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 800524a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800524c:	4b7b      	ldr	r3, [pc, #492]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 800524e:	2104      	movs	r1, #4
 8005250:	438a      	bics	r2, r1
 8005252:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d014      	beq.n	8005286 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525c:	f7fe ffca 	bl	80041f4 <HAL_GetTick>
 8005260:	0003      	movs	r3, r0
 8005262:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005264:	e009      	b.n	800527a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005266:	f7fe ffc5 	bl	80041f4 <HAL_GetTick>
 800526a:	0002      	movs	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	4a74      	ldr	r2, [pc, #464]	@ (8005444 <HAL_RCC_OscConfig+0x60c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e0db      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800527a:	4b70      	ldr	r3, [pc, #448]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 800527c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800527e:	2202      	movs	r2, #2
 8005280:	4013      	ands	r3, r2
 8005282:	d0f0      	beq.n	8005266 <HAL_RCC_OscConfig+0x42e>
 8005284:	e013      	b.n	80052ae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005286:	f7fe ffb5 	bl	80041f4 <HAL_GetTick>
 800528a:	0003      	movs	r3, r0
 800528c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800528e:	e009      	b.n	80052a4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005290:	f7fe ffb0 	bl	80041f4 <HAL_GetTick>
 8005294:	0002      	movs	r2, r0
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	4a6a      	ldr	r2, [pc, #424]	@ (8005444 <HAL_RCC_OscConfig+0x60c>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e0c6      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052a4:	4b65      	ldr	r3, [pc, #404]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 80052a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052a8:	2202      	movs	r2, #2
 80052aa:	4013      	ands	r3, r2
 80052ac:	d1f0      	bne.n	8005290 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80052ae:	231f      	movs	r3, #31
 80052b0:	18fb      	adds	r3, r7, r3
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d105      	bne.n	80052c4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80052b8:	4b60      	ldr	r3, [pc, #384]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 80052ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052bc:	4b5f      	ldr	r3, [pc, #380]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 80052be:	4962      	ldr	r1, [pc, #392]	@ (8005448 <HAL_RCC_OscConfig+0x610>)
 80052c0:	400a      	ands	r2, r1
 80052c2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d100      	bne.n	80052ce <HAL_RCC_OscConfig+0x496>
 80052cc:	e0b0      	b.n	8005430 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052ce:	4b5b      	ldr	r3, [pc, #364]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2238      	movs	r2, #56	@ 0x38
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b10      	cmp	r3, #16
 80052d8:	d100      	bne.n	80052dc <HAL_RCC_OscConfig+0x4a4>
 80052da:	e078      	b.n	80053ce <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d153      	bne.n	800538c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e4:	4b55      	ldr	r3, [pc, #340]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	4b54      	ldr	r3, [pc, #336]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 80052ea:	4958      	ldr	r1, [pc, #352]	@ (800544c <HAL_RCC_OscConfig+0x614>)
 80052ec:	400a      	ands	r2, r1
 80052ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f0:	f7fe ff80 	bl	80041f4 <HAL_GetTick>
 80052f4:	0003      	movs	r3, r0
 80052f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052fa:	f7fe ff7b 	bl	80041f4 <HAL_GetTick>
 80052fe:	0002      	movs	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e092      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800530c:	4b4b      	ldr	r3, [pc, #300]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	2380      	movs	r3, #128	@ 0x80
 8005312:	049b      	lsls	r3, r3, #18
 8005314:	4013      	ands	r3, r2
 8005316:	d1f0      	bne.n	80052fa <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005318:	4b48      	ldr	r3, [pc, #288]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4a4c      	ldr	r2, [pc, #304]	@ (8005450 <HAL_RCC_OscConfig+0x618>)
 800531e:	4013      	ands	r3, r2
 8005320:	0019      	movs	r1, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1a      	ldr	r2, [r3, #32]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532a:	431a      	orrs	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005330:	021b      	lsls	r3, r3, #8
 8005332:	431a      	orrs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005338:	431a      	orrs	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533e:	431a      	orrs	r2, r3
 8005340:	4b3e      	ldr	r3, [pc, #248]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 8005342:	430a      	orrs	r2, r1
 8005344:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005346:	4b3d      	ldr	r3, [pc, #244]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	4b3c      	ldr	r3, [pc, #240]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 800534c:	2180      	movs	r1, #128	@ 0x80
 800534e:	0449      	lsls	r1, r1, #17
 8005350:	430a      	orrs	r2, r1
 8005352:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005354:	4b39      	ldr	r3, [pc, #228]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 8005356:	68da      	ldr	r2, [r3, #12]
 8005358:	4b38      	ldr	r3, [pc, #224]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 800535a:	2180      	movs	r1, #128	@ 0x80
 800535c:	0549      	lsls	r1, r1, #21
 800535e:	430a      	orrs	r2, r1
 8005360:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005362:	f7fe ff47 	bl	80041f4 <HAL_GetTick>
 8005366:	0003      	movs	r3, r0
 8005368:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800536c:	f7fe ff42 	bl	80041f4 <HAL_GetTick>
 8005370:	0002      	movs	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e059      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800537e:	4b2f      	ldr	r3, [pc, #188]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	2380      	movs	r3, #128	@ 0x80
 8005384:	049b      	lsls	r3, r3, #18
 8005386:	4013      	ands	r3, r2
 8005388:	d0f0      	beq.n	800536c <HAL_RCC_OscConfig+0x534>
 800538a:	e051      	b.n	8005430 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800538c:	4b2b      	ldr	r3, [pc, #172]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4b2a      	ldr	r3, [pc, #168]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 8005392:	492e      	ldr	r1, [pc, #184]	@ (800544c <HAL_RCC_OscConfig+0x614>)
 8005394:	400a      	ands	r2, r1
 8005396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005398:	f7fe ff2c 	bl	80041f4 <HAL_GetTick>
 800539c:	0003      	movs	r3, r0
 800539e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a2:	f7fe ff27 	bl	80041f4 <HAL_GetTick>
 80053a6:	0002      	movs	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e03e      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b4:	4b21      	ldr	r3, [pc, #132]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	2380      	movs	r3, #128	@ 0x80
 80053ba:	049b      	lsls	r3, r3, #18
 80053bc:	4013      	ands	r3, r2
 80053be:	d1f0      	bne.n	80053a2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80053c0:	4b1e      	ldr	r3, [pc, #120]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	4b1d      	ldr	r3, [pc, #116]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 80053c6:	4923      	ldr	r1, [pc, #140]	@ (8005454 <HAL_RCC_OscConfig+0x61c>)
 80053c8:	400a      	ands	r2, r1
 80053ca:	60da      	str	r2, [r3, #12]
 80053cc:	e030      	b.n	8005430 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e02b      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80053da:	4b18      	ldr	r3, [pc, #96]	@ (800543c <HAL_RCC_OscConfig+0x604>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2203      	movs	r2, #3
 80053e4:	401a      	ands	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d11e      	bne.n	800542c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	2270      	movs	r2, #112	@ 0x70
 80053f2:	401a      	ands	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d117      	bne.n	800542c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	23fe      	movs	r3, #254	@ 0xfe
 8005400:	01db      	lsls	r3, r3, #7
 8005402:	401a      	ands	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005408:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800540a:	429a      	cmp	r2, r3
 800540c:	d10e      	bne.n	800542c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	23f8      	movs	r3, #248	@ 0xf8
 8005412:	039b      	lsls	r3, r3, #14
 8005414:	401a      	ands	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800541a:	429a      	cmp	r2, r3
 800541c:	d106      	bne.n	800542c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	0f5b      	lsrs	r3, r3, #29
 8005422:	075a      	lsls	r2, r3, #29
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005428:	429a      	cmp	r2, r3
 800542a:	d001      	beq.n	8005430 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e000      	b.n	8005432 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	0018      	movs	r0, r3
 8005434:	46bd      	mov	sp, r7
 8005436:	b008      	add	sp, #32
 8005438:	bd80      	pop	{r7, pc}
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	40021000 	.word	0x40021000
 8005440:	40007000 	.word	0x40007000
 8005444:	00001388 	.word	0x00001388
 8005448:	efffffff 	.word	0xefffffff
 800544c:	feffffff 	.word	0xfeffffff
 8005450:	1fc1808c 	.word	0x1fc1808c
 8005454:	effefffc 	.word	0xeffefffc

08005458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e0e9      	b.n	8005640 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800546c:	4b76      	ldr	r3, [pc, #472]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2207      	movs	r2, #7
 8005472:	4013      	ands	r3, r2
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d91e      	bls.n	80054b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547a:	4b73      	ldr	r3, [pc, #460]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2207      	movs	r2, #7
 8005480:	4393      	bics	r3, r2
 8005482:	0019      	movs	r1, r3
 8005484:	4b70      	ldr	r3, [pc, #448]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800548c:	f7fe feb2 	bl	80041f4 <HAL_GetTick>
 8005490:	0003      	movs	r3, r0
 8005492:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005494:	e009      	b.n	80054aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005496:	f7fe fead 	bl	80041f4 <HAL_GetTick>
 800549a:	0002      	movs	r2, r0
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	4a6a      	ldr	r2, [pc, #424]	@ (800564c <HAL_RCC_ClockConfig+0x1f4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e0ca      	b.n	8005640 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80054aa:	4b67      	ldr	r3, [pc, #412]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2207      	movs	r2, #7
 80054b0:	4013      	ands	r3, r2
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d1ee      	bne.n	8005496 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2202      	movs	r2, #2
 80054be:	4013      	ands	r3, r2
 80054c0:	d015      	beq.n	80054ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2204      	movs	r2, #4
 80054c8:	4013      	ands	r3, r2
 80054ca:	d006      	beq.n	80054da <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80054cc:	4b60      	ldr	r3, [pc, #384]	@ (8005650 <HAL_RCC_ClockConfig+0x1f8>)
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	4b5f      	ldr	r3, [pc, #380]	@ (8005650 <HAL_RCC_ClockConfig+0x1f8>)
 80054d2:	21e0      	movs	r1, #224	@ 0xe0
 80054d4:	01c9      	lsls	r1, r1, #7
 80054d6:	430a      	orrs	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054da:	4b5d      	ldr	r3, [pc, #372]	@ (8005650 <HAL_RCC_ClockConfig+0x1f8>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	4a5d      	ldr	r2, [pc, #372]	@ (8005654 <HAL_RCC_ClockConfig+0x1fc>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	0019      	movs	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	4b59      	ldr	r3, [pc, #356]	@ (8005650 <HAL_RCC_ClockConfig+0x1f8>)
 80054ea:	430a      	orrs	r2, r1
 80054ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2201      	movs	r2, #1
 80054f4:	4013      	ands	r3, r2
 80054f6:	d057      	beq.n	80055a8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d107      	bne.n	8005510 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005500:	4b53      	ldr	r3, [pc, #332]	@ (8005650 <HAL_RCC_ClockConfig+0x1f8>)
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	2380      	movs	r3, #128	@ 0x80
 8005506:	029b      	lsls	r3, r3, #10
 8005508:	4013      	ands	r3, r2
 800550a:	d12b      	bne.n	8005564 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e097      	b.n	8005640 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	2b02      	cmp	r3, #2
 8005516:	d107      	bne.n	8005528 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005518:	4b4d      	ldr	r3, [pc, #308]	@ (8005650 <HAL_RCC_ClockConfig+0x1f8>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	2380      	movs	r3, #128	@ 0x80
 800551e:	049b      	lsls	r3, r3, #18
 8005520:	4013      	ands	r3, r2
 8005522:	d11f      	bne.n	8005564 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e08b      	b.n	8005640 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d107      	bne.n	8005540 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005530:	4b47      	ldr	r3, [pc, #284]	@ (8005650 <HAL_RCC_ClockConfig+0x1f8>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	2380      	movs	r3, #128	@ 0x80
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	4013      	ands	r3, r2
 800553a:	d113      	bne.n	8005564 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e07f      	b.n	8005640 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	2b03      	cmp	r3, #3
 8005546:	d106      	bne.n	8005556 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005548:	4b41      	ldr	r3, [pc, #260]	@ (8005650 <HAL_RCC_ClockConfig+0x1f8>)
 800554a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800554c:	2202      	movs	r2, #2
 800554e:	4013      	ands	r3, r2
 8005550:	d108      	bne.n	8005564 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e074      	b.n	8005640 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005556:	4b3e      	ldr	r3, [pc, #248]	@ (8005650 <HAL_RCC_ClockConfig+0x1f8>)
 8005558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800555a:	2202      	movs	r2, #2
 800555c:	4013      	ands	r3, r2
 800555e:	d101      	bne.n	8005564 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e06d      	b.n	8005640 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005564:	4b3a      	ldr	r3, [pc, #232]	@ (8005650 <HAL_RCC_ClockConfig+0x1f8>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2207      	movs	r2, #7
 800556a:	4393      	bics	r3, r2
 800556c:	0019      	movs	r1, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	4b37      	ldr	r3, [pc, #220]	@ (8005650 <HAL_RCC_ClockConfig+0x1f8>)
 8005574:	430a      	orrs	r2, r1
 8005576:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005578:	f7fe fe3c 	bl	80041f4 <HAL_GetTick>
 800557c:	0003      	movs	r3, r0
 800557e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005580:	e009      	b.n	8005596 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005582:	f7fe fe37 	bl	80041f4 <HAL_GetTick>
 8005586:	0002      	movs	r2, r0
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	4a2f      	ldr	r2, [pc, #188]	@ (800564c <HAL_RCC_ClockConfig+0x1f4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e054      	b.n	8005640 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005596:	4b2e      	ldr	r3, [pc, #184]	@ (8005650 <HAL_RCC_ClockConfig+0x1f8>)
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2238      	movs	r2, #56	@ 0x38
 800559c:	401a      	ands	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d1ec      	bne.n	8005582 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055a8:	4b27      	ldr	r3, [pc, #156]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2207      	movs	r2, #7
 80055ae:	4013      	ands	r3, r2
 80055b0:	683a      	ldr	r2, [r7, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d21e      	bcs.n	80055f4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b6:	4b24      	ldr	r3, [pc, #144]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2207      	movs	r2, #7
 80055bc:	4393      	bics	r3, r2
 80055be:	0019      	movs	r1, r3
 80055c0:	4b21      	ldr	r3, [pc, #132]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055c8:	f7fe fe14 	bl	80041f4 <HAL_GetTick>
 80055cc:	0003      	movs	r3, r0
 80055ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80055d0:	e009      	b.n	80055e6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055d2:	f7fe fe0f 	bl	80041f4 <HAL_GetTick>
 80055d6:	0002      	movs	r2, r0
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	4a1b      	ldr	r2, [pc, #108]	@ (800564c <HAL_RCC_ClockConfig+0x1f4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e02c      	b.n	8005640 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80055e6:	4b18      	ldr	r3, [pc, #96]	@ (8005648 <HAL_RCC_ClockConfig+0x1f0>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2207      	movs	r2, #7
 80055ec:	4013      	ands	r3, r2
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d1ee      	bne.n	80055d2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2204      	movs	r2, #4
 80055fa:	4013      	ands	r3, r2
 80055fc:	d009      	beq.n	8005612 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80055fe:	4b14      	ldr	r3, [pc, #80]	@ (8005650 <HAL_RCC_ClockConfig+0x1f8>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	4a15      	ldr	r2, [pc, #84]	@ (8005658 <HAL_RCC_ClockConfig+0x200>)
 8005604:	4013      	ands	r3, r2
 8005606:	0019      	movs	r1, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	4b10      	ldr	r3, [pc, #64]	@ (8005650 <HAL_RCC_ClockConfig+0x1f8>)
 800560e:	430a      	orrs	r2, r1
 8005610:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005612:	f000 f829 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8005616:	0001      	movs	r1, r0
 8005618:	4b0d      	ldr	r3, [pc, #52]	@ (8005650 <HAL_RCC_ClockConfig+0x1f8>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	0a1b      	lsrs	r3, r3, #8
 800561e:	220f      	movs	r2, #15
 8005620:	401a      	ands	r2, r3
 8005622:	4b0e      	ldr	r3, [pc, #56]	@ (800565c <HAL_RCC_ClockConfig+0x204>)
 8005624:	0092      	lsls	r2, r2, #2
 8005626:	58d3      	ldr	r3, [r2, r3]
 8005628:	221f      	movs	r2, #31
 800562a:	4013      	ands	r3, r2
 800562c:	000a      	movs	r2, r1
 800562e:	40da      	lsrs	r2, r3
 8005630:	4b0b      	ldr	r3, [pc, #44]	@ (8005660 <HAL_RCC_ClockConfig+0x208>)
 8005632:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005634:	4b0b      	ldr	r3, [pc, #44]	@ (8005664 <HAL_RCC_ClockConfig+0x20c>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	0018      	movs	r0, r3
 800563a:	f7fe fd7f 	bl	800413c <HAL_InitTick>
 800563e:	0003      	movs	r3, r0
}
 8005640:	0018      	movs	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	b004      	add	sp, #16
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40022000 	.word	0x40022000
 800564c:	00001388 	.word	0x00001388
 8005650:	40021000 	.word	0x40021000
 8005654:	fffff0ff 	.word	0xfffff0ff
 8005658:	ffff8fff 	.word	0xffff8fff
 800565c:	080098d4 	.word	0x080098d4
 8005660:	20000004 	.word	0x20000004
 8005664:	20000008 	.word	0x20000008

08005668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800566e:	4b3c      	ldr	r3, [pc, #240]	@ (8005760 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	2238      	movs	r2, #56	@ 0x38
 8005674:	4013      	ands	r3, r2
 8005676:	d10f      	bne.n	8005698 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005678:	4b39      	ldr	r3, [pc, #228]	@ (8005760 <HAL_RCC_GetSysClockFreq+0xf8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	0adb      	lsrs	r3, r3, #11
 800567e:	2207      	movs	r2, #7
 8005680:	4013      	ands	r3, r2
 8005682:	2201      	movs	r2, #1
 8005684:	409a      	lsls	r2, r3
 8005686:	0013      	movs	r3, r2
 8005688:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800568a:	6839      	ldr	r1, [r7, #0]
 800568c:	4835      	ldr	r0, [pc, #212]	@ (8005764 <HAL_RCC_GetSysClockFreq+0xfc>)
 800568e:	f7fa fd49 	bl	8000124 <__udivsi3>
 8005692:	0003      	movs	r3, r0
 8005694:	613b      	str	r3, [r7, #16]
 8005696:	e05d      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005698:	4b31      	ldr	r3, [pc, #196]	@ (8005760 <HAL_RCC_GetSysClockFreq+0xf8>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	2238      	movs	r2, #56	@ 0x38
 800569e:	4013      	ands	r3, r2
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d102      	bne.n	80056aa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80056a4:	4b30      	ldr	r3, [pc, #192]	@ (8005768 <HAL_RCC_GetSysClockFreq+0x100>)
 80056a6:	613b      	str	r3, [r7, #16]
 80056a8:	e054      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056aa:	4b2d      	ldr	r3, [pc, #180]	@ (8005760 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2238      	movs	r2, #56	@ 0x38
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d138      	bne.n	8005728 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80056b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005760 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	2203      	movs	r2, #3
 80056bc:	4013      	ands	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056c0:	4b27      	ldr	r3, [pc, #156]	@ (8005760 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	091b      	lsrs	r3, r3, #4
 80056c6:	2207      	movs	r2, #7
 80056c8:	4013      	ands	r3, r2
 80056ca:	3301      	adds	r3, #1
 80056cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d10d      	bne.n	80056f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	4824      	ldr	r0, [pc, #144]	@ (8005768 <HAL_RCC_GetSysClockFreq+0x100>)
 80056d8:	f7fa fd24 	bl	8000124 <__udivsi3>
 80056dc:	0003      	movs	r3, r0
 80056de:	0019      	movs	r1, r3
 80056e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005760 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	0a1b      	lsrs	r3, r3, #8
 80056e6:	227f      	movs	r2, #127	@ 0x7f
 80056e8:	4013      	ands	r3, r2
 80056ea:	434b      	muls	r3, r1
 80056ec:	617b      	str	r3, [r7, #20]
        break;
 80056ee:	e00d      	b.n	800570c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	481c      	ldr	r0, [pc, #112]	@ (8005764 <HAL_RCC_GetSysClockFreq+0xfc>)
 80056f4:	f7fa fd16 	bl	8000124 <__udivsi3>
 80056f8:	0003      	movs	r3, r0
 80056fa:	0019      	movs	r1, r3
 80056fc:	4b18      	ldr	r3, [pc, #96]	@ (8005760 <HAL_RCC_GetSysClockFreq+0xf8>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	0a1b      	lsrs	r3, r3, #8
 8005702:	227f      	movs	r2, #127	@ 0x7f
 8005704:	4013      	ands	r3, r2
 8005706:	434b      	muls	r3, r1
 8005708:	617b      	str	r3, [r7, #20]
        break;
 800570a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800570c:	4b14      	ldr	r3, [pc, #80]	@ (8005760 <HAL_RCC_GetSysClockFreq+0xf8>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	0f5b      	lsrs	r3, r3, #29
 8005712:	2207      	movs	r2, #7
 8005714:	4013      	ands	r3, r2
 8005716:	3301      	adds	r3, #1
 8005718:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	6978      	ldr	r0, [r7, #20]
 800571e:	f7fa fd01 	bl	8000124 <__udivsi3>
 8005722:	0003      	movs	r3, r0
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	e015      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005728:	4b0d      	ldr	r3, [pc, #52]	@ (8005760 <HAL_RCC_GetSysClockFreq+0xf8>)
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	2238      	movs	r2, #56	@ 0x38
 800572e:	4013      	ands	r3, r2
 8005730:	2b20      	cmp	r3, #32
 8005732:	d103      	bne.n	800573c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005734:	2380      	movs	r3, #128	@ 0x80
 8005736:	021b      	lsls	r3, r3, #8
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	e00b      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800573c:	4b08      	ldr	r3, [pc, #32]	@ (8005760 <HAL_RCC_GetSysClockFreq+0xf8>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2238      	movs	r2, #56	@ 0x38
 8005742:	4013      	ands	r3, r2
 8005744:	2b18      	cmp	r3, #24
 8005746:	d103      	bne.n	8005750 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005748:	23fa      	movs	r3, #250	@ 0xfa
 800574a:	01db      	lsls	r3, r3, #7
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	e001      	b.n	8005754 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005754:	693b      	ldr	r3, [r7, #16]
}
 8005756:	0018      	movs	r0, r3
 8005758:	46bd      	mov	sp, r7
 800575a:	b006      	add	sp, #24
 800575c:	bd80      	pop	{r7, pc}
 800575e:	46c0      	nop			@ (mov r8, r8)
 8005760:	40021000 	.word	0x40021000
 8005764:	00f42400 	.word	0x00f42400
 8005768:	007a1200 	.word	0x007a1200

0800576c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005770:	4b02      	ldr	r3, [pc, #8]	@ (800577c <HAL_RCC_GetHCLKFreq+0x10>)
 8005772:	681b      	ldr	r3, [r3, #0]
}
 8005774:	0018      	movs	r0, r3
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	46c0      	nop			@ (mov r8, r8)
 800577c:	20000004 	.word	0x20000004

08005780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005780:	b5b0      	push	{r4, r5, r7, lr}
 8005782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005784:	f7ff fff2 	bl	800576c <HAL_RCC_GetHCLKFreq>
 8005788:	0004      	movs	r4, r0
 800578a:	f7ff fb49 	bl	8004e20 <LL_RCC_GetAPB1Prescaler>
 800578e:	0003      	movs	r3, r0
 8005790:	0b1a      	lsrs	r2, r3, #12
 8005792:	4b05      	ldr	r3, [pc, #20]	@ (80057a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005794:	0092      	lsls	r2, r2, #2
 8005796:	58d3      	ldr	r3, [r2, r3]
 8005798:	221f      	movs	r2, #31
 800579a:	4013      	ands	r3, r2
 800579c:	40dc      	lsrs	r4, r3
 800579e:	0023      	movs	r3, r4
}
 80057a0:	0018      	movs	r0, r3
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bdb0      	pop	{r4, r5, r7, pc}
 80057a6:	46c0      	nop			@ (mov r8, r8)
 80057a8:	08009914 	.word	0x08009914

080057ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80057b4:	2313      	movs	r3, #19
 80057b6:	18fb      	adds	r3, r7, r3
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057bc:	2312      	movs	r3, #18
 80057be:	18fb      	adds	r3, r7, r3
 80057c0:	2200      	movs	r2, #0
 80057c2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	2380      	movs	r3, #128	@ 0x80
 80057ca:	029b      	lsls	r3, r3, #10
 80057cc:	4013      	ands	r3, r2
 80057ce:	d100      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80057d0:	e0a3      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057d2:	2011      	movs	r0, #17
 80057d4:	183b      	adds	r3, r7, r0
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057da:	4b86      	ldr	r3, [pc, #536]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057de:	2380      	movs	r3, #128	@ 0x80
 80057e0:	055b      	lsls	r3, r3, #21
 80057e2:	4013      	ands	r3, r2
 80057e4:	d110      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057e6:	4b83      	ldr	r3, [pc, #524]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057ea:	4b82      	ldr	r3, [pc, #520]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057ec:	2180      	movs	r1, #128	@ 0x80
 80057ee:	0549      	lsls	r1, r1, #21
 80057f0:	430a      	orrs	r2, r1
 80057f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80057f4:	4b7f      	ldr	r3, [pc, #508]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80057f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057f8:	2380      	movs	r3, #128	@ 0x80
 80057fa:	055b      	lsls	r3, r3, #21
 80057fc:	4013      	ands	r3, r2
 80057fe:	60bb      	str	r3, [r7, #8]
 8005800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005802:	183b      	adds	r3, r7, r0
 8005804:	2201      	movs	r2, #1
 8005806:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005808:	4b7b      	ldr	r3, [pc, #492]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	4b7a      	ldr	r3, [pc, #488]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800580e:	2180      	movs	r1, #128	@ 0x80
 8005810:	0049      	lsls	r1, r1, #1
 8005812:	430a      	orrs	r2, r1
 8005814:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005816:	f7fe fced 	bl	80041f4 <HAL_GetTick>
 800581a:	0003      	movs	r3, r0
 800581c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800581e:	e00b      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005820:	f7fe fce8 	bl	80041f4 <HAL_GetTick>
 8005824:	0002      	movs	r2, r0
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d904      	bls.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800582e:	2313      	movs	r3, #19
 8005830:	18fb      	adds	r3, r7, r3
 8005832:	2203      	movs	r2, #3
 8005834:	701a      	strb	r2, [r3, #0]
        break;
 8005836:	e005      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005838:	4b6f      	ldr	r3, [pc, #444]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	2380      	movs	r3, #128	@ 0x80
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	4013      	ands	r3, r2
 8005842:	d0ed      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005844:	2313      	movs	r3, #19
 8005846:	18fb      	adds	r3, r7, r3
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d154      	bne.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800584e:	4b69      	ldr	r3, [pc, #420]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005850:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005852:	23c0      	movs	r3, #192	@ 0xc0
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4013      	ands	r3, r2
 8005858:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d019      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	429a      	cmp	r2, r3
 8005868:	d014      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800586a:	4b62      	ldr	r3, [pc, #392]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800586c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800586e:	4a63      	ldr	r2, [pc, #396]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005870:	4013      	ands	r3, r2
 8005872:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005874:	4b5f      	ldr	r3, [pc, #380]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005876:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005878:	4b5e      	ldr	r3, [pc, #376]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800587a:	2180      	movs	r1, #128	@ 0x80
 800587c:	0249      	lsls	r1, r1, #9
 800587e:	430a      	orrs	r2, r1
 8005880:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005882:	4b5c      	ldr	r3, [pc, #368]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005884:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005886:	4b5b      	ldr	r3, [pc, #364]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005888:	495d      	ldr	r1, [pc, #372]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800588a:	400a      	ands	r2, r1
 800588c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800588e:	4b59      	ldr	r3, [pc, #356]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2201      	movs	r2, #1
 8005898:	4013      	ands	r3, r2
 800589a:	d016      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589c:	f7fe fcaa 	bl	80041f4 <HAL_GetTick>
 80058a0:	0003      	movs	r3, r0
 80058a2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a4:	e00c      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a6:	f7fe fca5 	bl	80041f4 <HAL_GetTick>
 80058aa:	0002      	movs	r2, r0
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	4a54      	ldr	r2, [pc, #336]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d904      	bls.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80058b6:	2313      	movs	r3, #19
 80058b8:	18fb      	adds	r3, r7, r3
 80058ba:	2203      	movs	r2, #3
 80058bc:	701a      	strb	r2, [r3, #0]
            break;
 80058be:	e004      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058c0:	4b4c      	ldr	r3, [pc, #304]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80058c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c4:	2202      	movs	r2, #2
 80058c6:	4013      	ands	r3, r2
 80058c8:	d0ed      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80058ca:	2313      	movs	r3, #19
 80058cc:	18fb      	adds	r3, r7, r3
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10a      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058d4:	4b47      	ldr	r3, [pc, #284]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80058d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d8:	4a48      	ldr	r2, [pc, #288]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80058da:	4013      	ands	r3, r2
 80058dc:	0019      	movs	r1, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	4b44      	ldr	r3, [pc, #272]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80058e4:	430a      	orrs	r2, r1
 80058e6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80058e8:	e00c      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058ea:	2312      	movs	r3, #18
 80058ec:	18fb      	adds	r3, r7, r3
 80058ee:	2213      	movs	r2, #19
 80058f0:	18ba      	adds	r2, r7, r2
 80058f2:	7812      	ldrb	r2, [r2, #0]
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	e005      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f8:	2312      	movs	r3, #18
 80058fa:	18fb      	adds	r3, r7, r3
 80058fc:	2213      	movs	r2, #19
 80058fe:	18ba      	adds	r2, r7, r2
 8005900:	7812      	ldrb	r2, [r2, #0]
 8005902:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005904:	2311      	movs	r3, #17
 8005906:	18fb      	adds	r3, r7, r3
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d105      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800590e:	4b39      	ldr	r3, [pc, #228]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005910:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005912:	4b38      	ldr	r3, [pc, #224]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005914:	493c      	ldr	r1, [pc, #240]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005916:	400a      	ands	r2, r1
 8005918:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2201      	movs	r2, #1
 8005920:	4013      	ands	r3, r2
 8005922:	d009      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005924:	4b33      	ldr	r3, [pc, #204]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005928:	2203      	movs	r2, #3
 800592a:	4393      	bics	r3, r2
 800592c:	0019      	movs	r1, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	4b30      	ldr	r3, [pc, #192]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005934:	430a      	orrs	r2, r1
 8005936:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2202      	movs	r2, #2
 800593e:	4013      	ands	r3, r2
 8005940:	d009      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005942:	4b2c      	ldr	r3, [pc, #176]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005946:	220c      	movs	r2, #12
 8005948:	4393      	bics	r3, r2
 800594a:	0019      	movs	r1, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689a      	ldr	r2, [r3, #8]
 8005950:	4b28      	ldr	r3, [pc, #160]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005952:	430a      	orrs	r2, r1
 8005954:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2220      	movs	r2, #32
 800595c:	4013      	ands	r3, r2
 800595e:	d009      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005960:	4b24      	ldr	r3, [pc, #144]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005964:	4a29      	ldr	r2, [pc, #164]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005966:	4013      	ands	r3, r2
 8005968:	0019      	movs	r1, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68da      	ldr	r2, [r3, #12]
 800596e:	4b21      	ldr	r3, [pc, #132]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005970:	430a      	orrs	r2, r1
 8005972:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	2380      	movs	r3, #128	@ 0x80
 800597a:	01db      	lsls	r3, r3, #7
 800597c:	4013      	ands	r3, r2
 800597e:	d015      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005980:	4b1c      	ldr	r3, [pc, #112]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	0899      	lsrs	r1, r3, #2
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	695a      	ldr	r2, [r3, #20]
 800598c:	4b19      	ldr	r3, [pc, #100]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800598e:	430a      	orrs	r2, r1
 8005990:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	695a      	ldr	r2, [r3, #20]
 8005996:	2380      	movs	r3, #128	@ 0x80
 8005998:	05db      	lsls	r3, r3, #23
 800599a:	429a      	cmp	r2, r3
 800599c:	d106      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800599e:	4b15      	ldr	r3, [pc, #84]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80059a0:	68da      	ldr	r2, [r3, #12]
 80059a2:	4b14      	ldr	r3, [pc, #80]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80059a4:	2180      	movs	r1, #128	@ 0x80
 80059a6:	0249      	lsls	r1, r1, #9
 80059a8:	430a      	orrs	r2, r1
 80059aa:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	2380      	movs	r3, #128	@ 0x80
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	4013      	ands	r3, r2
 80059b6:	d016      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80059b8:	4b0e      	ldr	r3, [pc, #56]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80059ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059bc:	4a14      	ldr	r2, [pc, #80]	@ (8005a10 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059be:	4013      	ands	r3, r2
 80059c0:	0019      	movs	r1, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691a      	ldr	r2, [r3, #16]
 80059c6:	4b0b      	ldr	r3, [pc, #44]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80059c8:	430a      	orrs	r2, r1
 80059ca:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	2380      	movs	r3, #128	@ 0x80
 80059d2:	01db      	lsls	r3, r3, #7
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d106      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80059d8:	4b06      	ldr	r3, [pc, #24]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	4b05      	ldr	r3, [pc, #20]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80059de:	2180      	movs	r1, #128	@ 0x80
 80059e0:	0249      	lsls	r1, r1, #9
 80059e2:	430a      	orrs	r2, r1
 80059e4:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80059e6:	2312      	movs	r3, #18
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	781b      	ldrb	r3, [r3, #0]
}
 80059ec:	0018      	movs	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	b006      	add	sp, #24
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	40021000 	.word	0x40021000
 80059f8:	40007000 	.word	0x40007000
 80059fc:	fffffcff 	.word	0xfffffcff
 8005a00:	fffeffff 	.word	0xfffeffff
 8005a04:	00001388 	.word	0x00001388
 8005a08:	efffffff 	.word	0xefffffff
 8005a0c:	ffffcfff 	.word	0xffffcfff
 8005a10:	ffff3fff 	.word	0xffff3fff

08005a14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005a14:	b5b0      	push	{r4, r5, r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a1c:	230f      	movs	r3, #15
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	2201      	movs	r2, #1
 8005a22:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d100      	bne.n	8005a2c <HAL_RTC_Init+0x18>
 8005a2a:	e08c      	b.n	8005b46 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2229      	movs	r2, #41	@ 0x29
 8005a30:	5c9b      	ldrb	r3, [r3, r2]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10b      	bne.n	8005a50 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2228      	movs	r2, #40	@ 0x28
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2288      	movs	r2, #136	@ 0x88
 8005a44:	0212      	lsls	r2, r2, #8
 8005a46:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	f7fd feda 	bl	8003804 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2229      	movs	r2, #41	@ 0x29
 8005a54:	2102      	movs	r1, #2
 8005a56:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	2210      	movs	r2, #16
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d062      	beq.n	8005b2c <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	22ca      	movs	r2, #202	@ 0xca
 8005a6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2253      	movs	r2, #83	@ 0x53
 8005a74:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005a76:	250f      	movs	r5, #15
 8005a78:	197c      	adds	r4, r7, r5
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	f000 fbf3 	bl	8006268 <RTC_EnterInitMode>
 8005a82:	0003      	movs	r3, r0
 8005a84:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8005a86:	0028      	movs	r0, r5
 8005a88:	183b      	adds	r3, r7, r0
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d12c      	bne.n	8005aea <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	492e      	ldr	r1, [pc, #184]	@ (8005b54 <HAL_RTC_Init+0x140>)
 8005a9c:	400a      	ands	r2, r1
 8005a9e:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6999      	ldr	r1, [r3, #24]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6912      	ldr	r2, [r2, #16]
 8005ac6:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6919      	ldr	r1, [r3, #16]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	041a      	lsls	r2, r3, #16
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8005adc:	183c      	adds	r4, r7, r0
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f000 fc03 	bl	80062ec <RTC_ExitInitMode>
 8005ae6:	0003      	movs	r3, r0
 8005ae8:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8005aea:	230f      	movs	r3, #15
 8005aec:	18fb      	adds	r3, r7, r3
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d116      	bne.n	8005b22 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	699a      	ldr	r2, [r3, #24]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	00d2      	lsls	r2, r2, #3
 8005b00:	08d2      	lsrs	r2, r2, #3
 8005b02:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6999      	ldr	r1, [r3, #24]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	22ff      	movs	r2, #255	@ 0xff
 8005b28:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b2a:	e003      	b.n	8005b34 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005b2c:	230f      	movs	r3, #15
 8005b2e:	18fb      	adds	r3, r7, r3
 8005b30:	2200      	movs	r2, #0
 8005b32:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8005b34:	230f      	movs	r3, #15
 8005b36:	18fb      	adds	r3, r7, r3
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d103      	bne.n	8005b46 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2229      	movs	r2, #41	@ 0x29
 8005b42:	2101      	movs	r1, #1
 8005b44:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8005b46:	230f      	movs	r3, #15
 8005b48:	18fb      	adds	r3, r7, r3
 8005b4a:	781b      	ldrb	r3, [r3, #0]
}
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	b004      	add	sp, #16
 8005b52:	bdb0      	pop	{r4, r5, r7, pc}
 8005b54:	fb8fffbf 	.word	0xfb8fffbf

08005b58 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005b58:	b5b0      	push	{r4, r5, r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2228      	movs	r2, #40	@ 0x28
 8005b68:	5c9b      	ldrb	r3, [r3, r2]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d101      	bne.n	8005b72 <HAL_RTC_SetTime+0x1a>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	e092      	b.n	8005c98 <HAL_RTC_SetTime+0x140>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2228      	movs	r2, #40	@ 0x28
 8005b76:	2101      	movs	r1, #1
 8005b78:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2229      	movs	r2, #41	@ 0x29
 8005b7e:	2102      	movs	r1, #2
 8005b80:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	22ca      	movs	r2, #202	@ 0xca
 8005b88:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2253      	movs	r2, #83	@ 0x53
 8005b90:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b92:	2513      	movs	r5, #19
 8005b94:	197c      	adds	r4, r7, r5
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f000 fb65 	bl	8006268 <RTC_EnterInitMode>
 8005b9e:	0003      	movs	r3, r0
 8005ba0:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005ba2:	197b      	adds	r3, r7, r5
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d162      	bne.n	8005c70 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d125      	bne.n	8005bfc <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	2240      	movs	r2, #64	@ 0x40
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d102      	bne.n	8005bc2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f000 fbd4 	bl	8006374 <RTC_ByteToBcd2>
 8005bcc:	0003      	movs	r3, r0
 8005bce:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	f000 fbcd 	bl	8006374 <RTC_ByteToBcd2>
 8005bda:	0003      	movs	r3, r0
 8005bdc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bde:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	789b      	ldrb	r3, [r3, #2]
 8005be4:	0018      	movs	r0, r3
 8005be6:	f000 fbc5 	bl	8006374 <RTC_ByteToBcd2>
 8005bea:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005bec:	0022      	movs	r2, r4
 8005bee:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	78db      	ldrb	r3, [r3, #3]
 8005bf4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	e017      	b.n	8005c2c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	2240      	movs	r2, #64	@ 0x40
 8005c04:	4013      	ands	r3, r2
 8005c06:	d102      	bne.n	8005c0e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c1a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005c20:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	78db      	ldrb	r3, [r3, #3]
 8005c26:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	491b      	ldr	r1, [pc, #108]	@ (8005ca0 <HAL_RTC_SetTime+0x148>)
 8005c34:	400a      	ands	r2, r1
 8005c36:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4918      	ldr	r1, [pc, #96]	@ (8005ca4 <HAL_RTC_SetTime+0x14c>)
 8005c44:	400a      	ands	r2, r1
 8005c46:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6999      	ldr	r1, [r3, #24]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	431a      	orrs	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c60:	2313      	movs	r3, #19
 8005c62:	18fc      	adds	r4, r7, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	0018      	movs	r0, r3
 8005c68:	f000 fb40 	bl	80062ec <RTC_ExitInitMode>
 8005c6c:	0003      	movs	r3, r0
 8005c6e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	22ff      	movs	r2, #255	@ 0xff
 8005c76:	625a      	str	r2, [r3, #36]	@ 0x24
  
  if (status == HAL_OK)
 8005c78:	2313      	movs	r3, #19
 8005c7a:	18fb      	adds	r3, r7, r3
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d103      	bne.n	8005c8a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2229      	movs	r2, #41	@ 0x29
 8005c86:	2101      	movs	r1, #1
 8005c88:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2228      	movs	r2, #40	@ 0x28
 8005c8e:	2100      	movs	r1, #0
 8005c90:	5499      	strb	r1, [r3, r2]

  return status;
 8005c92:	2313      	movs	r3, #19
 8005c94:	18fb      	adds	r3, r7, r3
 8005c96:	781b      	ldrb	r3, [r3, #0]
}
 8005c98:	0018      	movs	r0, r3
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	b006      	add	sp, #24
 8005c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8005ca0:	007f7f7f 	.word	0x007f7f7f
 8005ca4:	fffbffff 	.word	0xfffbffff

08005ca8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689a      	ldr	r2, [r3, #8]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	045b      	lsls	r3, r3, #17
 8005cc6:	0c5a      	lsrs	r2, r3, #17
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a22      	ldr	r2, [pc, #136]	@ (8005d5c <HAL_RTC_GetTime+0xb4>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	0c1b      	lsrs	r3, r3, #16
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	223f      	movs	r2, #63	@ 0x3f
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	0a1b      	lsrs	r3, r3, #8
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	227f      	movs	r2, #127	@ 0x7f
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	227f      	movs	r2, #127	@ 0x7f
 8005cfe:	4013      	ands	r3, r2
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	0d9b      	lsrs	r3, r3, #22
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	4013      	ands	r3, r2
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d11a      	bne.n	8005d52 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	0018      	movs	r0, r3
 8005d22:	f000 fb4f 	bl	80063c4 <RTC_Bcd2ToByte>
 8005d26:	0003      	movs	r3, r0
 8005d28:	001a      	movs	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	785b      	ldrb	r3, [r3, #1]
 8005d32:	0018      	movs	r0, r3
 8005d34:	f000 fb46 	bl	80063c4 <RTC_Bcd2ToByte>
 8005d38:	0003      	movs	r3, r0
 8005d3a:	001a      	movs	r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	789b      	ldrb	r3, [r3, #2]
 8005d44:	0018      	movs	r0, r3
 8005d46:	f000 fb3d 	bl	80063c4 <RTC_Bcd2ToByte>
 8005d4a:	0003      	movs	r3, r0
 8005d4c:	001a      	movs	r2, r3
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	0018      	movs	r0, r3
 8005d56:	46bd      	mov	sp, r7
 8005d58:	b006      	add	sp, #24
 8005d5a:	bd80      	pop	{r7, pc}
 8005d5c:	007f7f7f 	.word	0x007f7f7f

08005d60 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d60:	b5b0      	push	{r4, r5, r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2228      	movs	r2, #40	@ 0x28
 8005d70:	5c9b      	ldrb	r3, [r3, r2]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_RTC_SetDate+0x1a>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e07e      	b.n	8005e78 <HAL_RTC_SetDate+0x118>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2228      	movs	r2, #40	@ 0x28
 8005d7e:	2101      	movs	r1, #1
 8005d80:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2229      	movs	r2, #41	@ 0x29
 8005d86:	2102      	movs	r1, #2
 8005d88:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d10e      	bne.n	8005dae <HAL_RTC_SetDate+0x4e>
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	001a      	movs	r2, r3
 8005d96:	2310      	movs	r3, #16
 8005d98:	4013      	ands	r3, r2
 8005d9a:	d008      	beq.n	8005dae <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	785b      	ldrb	r3, [r3, #1]
 8005da0:	2210      	movs	r2, #16
 8005da2:	4393      	bics	r3, r2
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	330a      	adds	r3, #10
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d11c      	bne.n	8005dee <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	78db      	ldrb	r3, [r3, #3]
 8005db8:	0018      	movs	r0, r3
 8005dba:	f000 fadb 	bl	8006374 <RTC_ByteToBcd2>
 8005dbe:	0003      	movs	r3, r0
 8005dc0:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	785b      	ldrb	r3, [r3, #1]
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f000 fad4 	bl	8006374 <RTC_ByteToBcd2>
 8005dcc:	0003      	movs	r3, r0
 8005dce:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005dd0:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	789b      	ldrb	r3, [r3, #2]
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f000 facc 	bl	8006374 <RTC_ByteToBcd2>
 8005ddc:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005dde:	0022      	movs	r2, r4
 8005de0:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005de8:	4313      	orrs	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	e00e      	b.n	8005e0c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	78db      	ldrb	r3, [r3, #3]
 8005df2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005dfa:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005e00:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	22ca      	movs	r2, #202	@ 0xca
 8005e12:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2253      	movs	r2, #83	@ 0x53
 8005e1a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005e1c:	2513      	movs	r5, #19
 8005e1e:	197c      	adds	r4, r7, r5
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	0018      	movs	r0, r3
 8005e24:	f000 fa20 	bl	8006268 <RTC_EnterInitMode>
 8005e28:	0003      	movs	r3, r0
 8005e2a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8005e2c:	0028      	movs	r0, r5
 8005e2e:	183b      	adds	r3, r7, r0
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10c      	bne.n	8005e50 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4910      	ldr	r1, [pc, #64]	@ (8005e80 <HAL_RTC_SetDate+0x120>)
 8005e3e:	400a      	ands	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005e42:	183c      	adds	r4, r7, r0
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	0018      	movs	r0, r3
 8005e48:	f000 fa50 	bl	80062ec <RTC_ExitInitMode>
 8005e4c:	0003      	movs	r3, r0
 8005e4e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	22ff      	movs	r2, #255	@ 0xff
 8005e56:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005e58:	2313      	movs	r3, #19
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2229      	movs	r2, #41	@ 0x29
 8005e66:	2101      	movs	r1, #1
 8005e68:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2228      	movs	r2, #40	@ 0x28
 8005e6e:	2100      	movs	r1, #0
 8005e70:	5499      	strb	r1, [r3, r2]

  return status;
 8005e72:	2313      	movs	r3, #19
 8005e74:	18fb      	adds	r3, r7, r3
 8005e76:	781b      	ldrb	r3, [r3, #0]
}
 8005e78:	0018      	movs	r0, r3
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	b006      	add	sp, #24
 8005e7e:	bdb0      	pop	{r4, r5, r7, pc}
 8005e80:	00ffff3f 	.word	0x00ffff3f

08005e84 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	4a21      	ldr	r2, [pc, #132]	@ (8005f1c <HAL_RTC_GetDate+0x98>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	0c1b      	lsrs	r3, r3, #16
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	0a1b      	lsrs	r3, r3, #8
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	221f      	movs	r2, #31
 8005eae:	4013      	ands	r3, r2
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	223f      	movs	r2, #63	@ 0x3f
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	0b5b      	lsrs	r3, r3, #13
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2207      	movs	r2, #7
 8005ecc:	4013      	ands	r3, r2
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d11a      	bne.n	8005f10 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	78db      	ldrb	r3, [r3, #3]
 8005ede:	0018      	movs	r0, r3
 8005ee0:	f000 fa70 	bl	80063c4 <RTC_Bcd2ToByte>
 8005ee4:	0003      	movs	r3, r0
 8005ee6:	001a      	movs	r2, r3
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	785b      	ldrb	r3, [r3, #1]
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f000 fa67 	bl	80063c4 <RTC_Bcd2ToByte>
 8005ef6:	0003      	movs	r3, r0
 8005ef8:	001a      	movs	r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	789b      	ldrb	r3, [r3, #2]
 8005f02:	0018      	movs	r0, r3
 8005f04:	f000 fa5e 	bl	80063c4 <RTC_Bcd2ToByte>
 8005f08:	0003      	movs	r3, r0
 8005f0a:	001a      	movs	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	0018      	movs	r0, r3
 8005f14:	46bd      	mov	sp, r7
 8005f16:	b006      	add	sp, #24
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	46c0      	nop			@ (mov r8, r8)
 8005f1c:	00ffff3f 	.word	0x00ffff3f

08005f20 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005f20:	b590      	push	{r4, r7, lr}
 8005f22:	b089      	sub	sp, #36	@ 0x24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2228      	movs	r2, #40	@ 0x28
 8005f30:	5c9b      	ldrb	r3, [r3, r2]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_RTC_SetAlarm_IT+0x1a>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e127      	b.n	800618a <HAL_RTC_SetAlarm_IT+0x26a>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2228      	movs	r2, #40	@ 0x28
 8005f3e:	2101      	movs	r1, #1
 8005f40:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2229      	movs	r2, #41	@ 0x29
 8005f46:	2102      	movs	r1, #2
 8005f48:	5499      	strb	r1, [r3, r2]

  if(Format == RTC_FORMAT_BIN)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d136      	bne.n	8005fbe <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	2240      	movs	r2, #64	@ 0x40
 8005f58:	4013      	ands	r3, r2
 8005f5a:	d102      	bne.n	8005f62 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	0018      	movs	r0, r3
 8005f68:	f000 fa04 	bl	8006374 <RTC_ByteToBcd2>
 8005f6c:	0003      	movs	r3, r0
 8005f6e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	0018      	movs	r0, r3
 8005f76:	f000 f9fd 	bl	8006374 <RTC_ByteToBcd2>
 8005f7a:	0003      	movs	r3, r0
 8005f7c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005f7e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	789b      	ldrb	r3, [r3, #2]
 8005f84:	0018      	movs	r0, r3
 8005f86:	f000 f9f5 	bl	8006374 <RTC_ByteToBcd2>
 8005f8a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005f8c:	0022      	movs	r2, r4
 8005f8e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	78db      	ldrb	r3, [r3, #3]
 8005f94:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005f96:	431a      	orrs	r2, r3
 8005f98:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	5c9b      	ldrb	r3, [r3, r2]
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	f000 f9e7 	bl	8006374 <RTC_ByteToBcd2>
 8005fa6:	0003      	movs	r3, r0
 8005fa8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005faa:	0022      	movs	r2, r4
 8005fac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005fb2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	61fb      	str	r3, [r7, #28]
 8005fbc:	e022      	b.n	8006004 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	2240      	movs	r2, #64	@ 0x40
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	d102      	bne.n	8005fd0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	785b      	ldrb	r3, [r3, #1]
 8005fda:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005fdc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005fe2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	78db      	ldrb	r3, [r3, #3]
 8005fe8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005fea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2120      	movs	r1, #32
 8005ff0:	5c5b      	ldrb	r3, [r3, r1]
 8005ff2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005ff4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005ffa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006000:	4313      	orrs	r3, r2
 8006002:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	4313      	orrs	r3, r2
 800600e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	22ca      	movs	r2, #202	@ 0xca
 8006016:	625a      	str	r2, [r3, #36]	@ 0x24
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2253      	movs	r2, #83	@ 0x53
 800601e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006024:	2380      	movs	r3, #128	@ 0x80
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	429a      	cmp	r2, r3
 800602a:	d14c      	bne.n	80060c6 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699a      	ldr	r2, [r3, #24]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4957      	ldr	r1, [pc, #348]	@ (8006194 <HAL_RTC_SetAlarm_IT+0x274>)
 8006038:	400a      	ands	r2, r1
 800603a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2101      	movs	r1, #1
 8006048:	430a      	orrs	r2, r1
 800604a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 800604c:	f7fe f8d2 	bl	80041f4 <HAL_GetTick>
 8006050:	0003      	movs	r3, r0
 8006052:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006054:	e016      	b.n	8006084 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006056:	f7fe f8cd 	bl	80041f4 <HAL_GetTick>
 800605a:	0002      	movs	r2, r0
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	1ad2      	subs	r2, r2, r3
 8006060:	23fa      	movs	r3, #250	@ 0xfa
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	429a      	cmp	r2, r3
 8006066:	d90d      	bls.n	8006084 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	22ff      	movs	r2, #255	@ 0xff
 800606e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2229      	movs	r2, #41	@ 0x29
 8006074:	2103      	movs	r1, #3
 8006076:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2228      	movs	r2, #40	@ 0x28
 800607c:	2100      	movs	r1, #0
 800607e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e082      	b.n	800618a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	2201      	movs	r2, #1
 800608c:	4013      	ands	r3, r2
 800608e:	d0e2      	beq.n	8006056 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699a      	ldr	r2, [r3, #24]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2180      	movs	r1, #128	@ 0x80
 80060ac:	0049      	lsls	r1, r1, #1
 80060ae:	430a      	orrs	r2, r1
 80060b0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	699a      	ldr	r2, [r3, #24]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2180      	movs	r1, #128	@ 0x80
 80060be:	0149      	lsls	r1, r1, #5
 80060c0:	430a      	orrs	r2, r1
 80060c2:	619a      	str	r2, [r3, #24]
 80060c4:	e04b      	b.n	800615e <HAL_RTC_SetAlarm_IT+0x23e>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	699a      	ldr	r2, [r3, #24]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4931      	ldr	r1, [pc, #196]	@ (8006198 <HAL_RTC_SetAlarm_IT+0x278>)
 80060d2:	400a      	ands	r2, r1
 80060d4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2102      	movs	r1, #2
 80060e2:	430a      	orrs	r2, r1
 80060e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80060e6:	f7fe f885 	bl	80041f4 <HAL_GetTick>
 80060ea:	0003      	movs	r3, r0
 80060ec:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80060ee:	e016      	b.n	800611e <HAL_RTC_SetAlarm_IT+0x1fe>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80060f0:	f7fe f880 	bl	80041f4 <HAL_GetTick>
 80060f4:	0002      	movs	r2, r0
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	1ad2      	subs	r2, r2, r3
 80060fa:	23fa      	movs	r3, #250	@ 0xfa
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	429a      	cmp	r2, r3
 8006100:	d90d      	bls.n	800611e <HAL_RTC_SetAlarm_IT+0x1fe>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	22ff      	movs	r2, #255	@ 0xff
 8006108:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2229      	movs	r2, #41	@ 0x29
 800610e:	2103      	movs	r1, #3
 8006110:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2228      	movs	r2, #40	@ 0x28
 8006116:	2100      	movs	r1, #0
 8006118:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e035      	b.n	800618a <HAL_RTC_SetAlarm_IT+0x26a>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	2202      	movs	r2, #2
 8006126:	4013      	ands	r3, r2
 8006128:	d0e2      	beq.n	80060f0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69fa      	ldr	r2, [r7, #28]
 8006130:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699a      	ldr	r2, [r3, #24]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2180      	movs	r1, #128	@ 0x80
 8006146:	0089      	lsls	r1, r1, #2
 8006148:	430a      	orrs	r2, r1
 800614a:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2180      	movs	r1, #128	@ 0x80
 8006158:	0189      	lsls	r1, r1, #6
 800615a:	430a      	orrs	r2, r1
 800615c:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800615e:	4a0f      	ldr	r2, [pc, #60]	@ (800619c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006160:	2380      	movs	r3, #128	@ 0x80
 8006162:	58d3      	ldr	r3, [r2, r3]
 8006164:	490d      	ldr	r1, [pc, #52]	@ (800619c <HAL_RTC_SetAlarm_IT+0x27c>)
 8006166:	2280      	movs	r2, #128	@ 0x80
 8006168:	0312      	lsls	r2, r2, #12
 800616a:	4313      	orrs	r3, r2
 800616c:	2280      	movs	r2, #128	@ 0x80
 800616e:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	22ff      	movs	r2, #255	@ 0xff
 8006176:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2229      	movs	r2, #41	@ 0x29
 800617c:	2101      	movs	r1, #1
 800617e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2228      	movs	r2, #40	@ 0x28
 8006184:	2100      	movs	r1, #0
 8006186:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	0018      	movs	r0, r3
 800618c:	46bd      	mov	sp, r7
 800618e:	b009      	add	sp, #36	@ 0x24
 8006190:	bd90      	pop	{r4, r7, pc}
 8006192:	46c0      	nop			@ (mov r8, r8)
 8006194:	fffffeff 	.word	0xfffffeff
 8006198:	fffffdff 	.word	0xfffffdff
 800619c:	40021800 	.word	0x40021800

080061a0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	699a      	ldr	r2, [r3, #24]
 80061ae:	2380      	movs	r3, #128	@ 0x80
 80061b0:	015b      	lsls	r3, r3, #5
 80061b2:	4013      	ands	r3, r2
 80061b4:	d011      	beq.n	80061da <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061bc:	2201      	movs	r2, #1
 80061be:	4013      	ands	r3, r2
 80061c0:	d00b      	beq.n	80061da <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2101      	movs	r1, #1
 80061ce:	430a      	orrs	r2, r1
 80061d0:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	0018      	movs	r0, r3
 80061d6:	f7fd f9ad 	bl	8003534 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	699a      	ldr	r2, [r3, #24]
 80061e0:	2380      	movs	r3, #128	@ 0x80
 80061e2:	019b      	lsls	r3, r3, #6
 80061e4:	4013      	ands	r3, r2
 80061e6:	d011      	beq.n	800620c <HAL_RTC_AlarmIRQHandler+0x6c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ee:	2202      	movs	r2, #2
 80061f0:	4013      	ands	r3, r2
 80061f2:	d00b      	beq.n	800620c <HAL_RTC_AlarmIRQHandler+0x6c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_CLEAR_ALRBF);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2102      	movs	r1, #2
 8006200:	430a      	orrs	r2, r1
 8006202:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmBEventCallback(hrtc);
#else
      /* AlarmB callback */
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	0018      	movs	r0, r3
 8006208:	f000 f933 	bl	8006472 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2229      	movs	r2, #41	@ 0x29
 8006210:	2101      	movs	r1, #1
 8006212:	5499      	strb	r1, [r3, r2]
}
 8006214:	46c0      	nop			@ (mov r8, r8)
 8006216:	46bd      	mov	sp, r7
 8006218:	b002      	add	sp, #8
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a0e      	ldr	r2, [pc, #56]	@ (8006264 <HAL_RTC_WaitForSynchro+0x48>)
 800622a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800622c:	f7fd ffe2 	bl	80041f4 <HAL_GetTick>
 8006230:	0003      	movs	r3, r0
 8006232:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8006234:	e00a      	b.n	800624c <HAL_RTC_WaitForSynchro+0x30>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006236:	f7fd ffdd 	bl	80041f4 <HAL_GetTick>
 800623a:	0002      	movs	r2, r0
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	1ad2      	subs	r2, r2, r3
 8006240:	23fa      	movs	r3, #250	@ 0xfa
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	429a      	cmp	r2, r3
 8006246:	d901      	bls.n	800624c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e006      	b.n	800625a <HAL_RTC_WaitForSynchro+0x3e>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	4013      	ands	r3, r2
 8006256:	d0ee      	beq.n	8006236 <HAL_RTC_WaitForSynchro+0x1a>
    }
  }

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	0018      	movs	r0, r3
 800625c:	46bd      	mov	sp, r7
 800625e:	b004      	add	sp, #16
 8006260:	bd80      	pop	{r7, pc}
 8006262:	46c0      	nop			@ (mov r8, r8)
 8006264:	0001005f 	.word	0x0001005f

08006268 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8006270:	230f      	movs	r3, #15
 8006272:	18fb      	adds	r3, r7, r3
 8006274:	2200      	movs	r2, #0
 8006276:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	2240      	movs	r2, #64	@ 0x40
 8006280:	4013      	ands	r3, r2
 8006282:	d12c      	bne.n	80062de <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2180      	movs	r1, #128	@ 0x80
 8006290:	430a      	orrs	r2, r1
 8006292:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006294:	f7fd ffae 	bl	80041f4 <HAL_GetTick>
 8006298:	0003      	movs	r3, r0
 800629a:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800629c:	e014      	b.n	80062c8 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800629e:	f7fd ffa9 	bl	80041f4 <HAL_GetTick>
 80062a2:	0002      	movs	r2, r0
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	1ad2      	subs	r2, r2, r3
 80062a8:	200f      	movs	r0, #15
 80062aa:	183b      	adds	r3, r7, r0
 80062ac:	1839      	adds	r1, r7, r0
 80062ae:	7809      	ldrb	r1, [r1, #0]
 80062b0:	7019      	strb	r1, [r3, #0]
 80062b2:	23fa      	movs	r3, #250	@ 0xfa
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d906      	bls.n	80062c8 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80062ba:	183b      	adds	r3, r7, r0
 80062bc:	2203      	movs	r2, #3
 80062be:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2229      	movs	r2, #41	@ 0x29
 80062c4:	2103      	movs	r1, #3
 80062c6:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	2240      	movs	r2, #64	@ 0x40
 80062d0:	4013      	ands	r3, r2
 80062d2:	d104      	bne.n	80062de <RTC_EnterInitMode+0x76>
 80062d4:	230f      	movs	r3, #15
 80062d6:	18fb      	adds	r3, r7, r3
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d1df      	bne.n	800629e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80062de:	230f      	movs	r3, #15
 80062e0:	18fb      	adds	r3, r7, r3
 80062e2:	781b      	ldrb	r3, [r3, #0]
}
 80062e4:	0018      	movs	r0, r3
 80062e6:	46bd      	mov	sp, r7
 80062e8:	b004      	add	sp, #16
 80062ea:	bd80      	pop	{r7, pc}

080062ec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80062ec:	b590      	push	{r4, r7, lr}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f4:	240f      	movs	r4, #15
 80062f6:	193b      	adds	r3, r7, r4
 80062f8:	2200      	movs	r2, #0
 80062fa:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80062fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006370 <RTC_ExitInitMode+0x84>)
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	4b1b      	ldr	r3, [pc, #108]	@ (8006370 <RTC_ExitInitMode+0x84>)
 8006302:	2180      	movs	r1, #128	@ 0x80
 8006304:	438a      	bics	r2, r1
 8006306:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006308:	4b19      	ldr	r3, [pc, #100]	@ (8006370 <RTC_ExitInitMode+0x84>)
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	2220      	movs	r2, #32
 800630e:	4013      	ands	r3, r2
 8006310:	d10d      	bne.n	800632e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	0018      	movs	r0, r3
 8006316:	f7ff ff81 	bl	800621c <HAL_RTC_WaitForSynchro>
 800631a:	1e03      	subs	r3, r0, #0
 800631c:	d021      	beq.n	8006362 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2229      	movs	r2, #41	@ 0x29
 8006322:	2103      	movs	r1, #3
 8006324:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8006326:	193b      	adds	r3, r7, r4
 8006328:	2203      	movs	r2, #3
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	e019      	b.n	8006362 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800632e:	4b10      	ldr	r3, [pc, #64]	@ (8006370 <RTC_ExitInitMode+0x84>)
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	4b0f      	ldr	r3, [pc, #60]	@ (8006370 <RTC_ExitInitMode+0x84>)
 8006334:	2120      	movs	r1, #32
 8006336:	438a      	bics	r2, r1
 8006338:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	0018      	movs	r0, r3
 800633e:	f7ff ff6d 	bl	800621c <HAL_RTC_WaitForSynchro>
 8006342:	1e03      	subs	r3, r0, #0
 8006344:	d007      	beq.n	8006356 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2229      	movs	r2, #41	@ 0x29
 800634a:	2103      	movs	r1, #3
 800634c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800634e:	230f      	movs	r3, #15
 8006350:	18fb      	adds	r3, r7, r3
 8006352:	2203      	movs	r2, #3
 8006354:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006356:	4b06      	ldr	r3, [pc, #24]	@ (8006370 <RTC_ExitInitMode+0x84>)
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	4b05      	ldr	r3, [pc, #20]	@ (8006370 <RTC_ExitInitMode+0x84>)
 800635c:	2120      	movs	r1, #32
 800635e:	430a      	orrs	r2, r1
 8006360:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006362:	230f      	movs	r3, #15
 8006364:	18fb      	adds	r3, r7, r3
 8006366:	781b      	ldrb	r3, [r3, #0]
}
 8006368:	0018      	movs	r0, r3
 800636a:	46bd      	mov	sp, r7
 800636c:	b005      	add	sp, #20
 800636e:	bd90      	pop	{r4, r7, pc}
 8006370:	40002800 	.word	0x40002800

08006374 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	0002      	movs	r2, r0
 800637c:	1dfb      	adds	r3, r7, #7
 800637e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006384:	230b      	movs	r3, #11
 8006386:	18fb      	adds	r3, r7, r3
 8006388:	1dfa      	adds	r2, r7, #7
 800638a:	7812      	ldrb	r2, [r2, #0]
 800638c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800638e:	e008      	b.n	80063a2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3301      	adds	r3, #1
 8006394:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006396:	220b      	movs	r2, #11
 8006398:	18bb      	adds	r3, r7, r2
 800639a:	18ba      	adds	r2, r7, r2
 800639c:	7812      	ldrb	r2, [r2, #0]
 800639e:	3a0a      	subs	r2, #10
 80063a0:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80063a2:	210b      	movs	r1, #11
 80063a4:	187b      	adds	r3, r7, r1
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b09      	cmp	r3, #9
 80063aa:	d8f1      	bhi.n	8006390 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	187b      	adds	r3, r7, r1
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	b2db      	uxtb	r3, r3
}
 80063bc:	0018      	movs	r0, r3
 80063be:	46bd      	mov	sp, r7
 80063c0:	b004      	add	sp, #16
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	0002      	movs	r2, r0
 80063cc:	1dfb      	adds	r3, r7, #7
 80063ce:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80063d0:	1dfb      	adds	r3, r7, #7
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	091b      	lsrs	r3, r3, #4
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	001a      	movs	r2, r3
 80063da:	0013      	movs	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	189b      	adds	r3, r3, r2
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	1dfb      	adds	r3, r7, #7
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	210f      	movs	r1, #15
 80063ee:	400b      	ands	r3, r1
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	18d3      	adds	r3, r2, r3
 80063f4:	b2db      	uxtb	r3, r3
}
 80063f6:	0018      	movs	r0, r3
 80063f8:	46bd      	mov	sp, r7
 80063fa:	b004      	add	sp, #16
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_RTC_DST_Add1Hour>:
  *         without going through the initialization procedure.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_DST_Add1Hour(RTC_HandleTypeDef *hrtc)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b082      	sub	sp, #8
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	22ca      	movs	r2, #202	@ 0xca
 800640c:	625a      	str	r2, [r3, #36]	@ 0x24
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2253      	movs	r2, #83	@ 0x53
 8006414:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(hrtc->Instance->CR, RTC_CR_ADD1H);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	699a      	ldr	r2, [r3, #24]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2180      	movs	r1, #128	@ 0x80
 8006422:	0249      	lsls	r1, r1, #9
 8006424:	430a      	orrs	r2, r1
 8006426:	619a      	str	r2, [r3, #24]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	22ff      	movs	r2, #255	@ 0xff
 800642e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006430:	46c0      	nop			@ (mov r8, r8)
 8006432:	46bd      	mov	sp, r7
 8006434:	b002      	add	sp, #8
 8006436:	bd80      	pop	{r7, pc}

08006438 <HAL_RTC_DST_Sub1Hour>:
  *         single operation without going through the initialization procedure.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_DST_Sub1Hour(RTC_HandleTypeDef *hrtc)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	22ca      	movs	r2, #202	@ 0xca
 8006446:	625a      	str	r2, [r3, #36]	@ 0x24
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2253      	movs	r2, #83	@ 0x53
 800644e:	625a      	str	r2, [r3, #36]	@ 0x24
  SET_BIT(hrtc->Instance->CR, RTC_CR_SUB1H);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2180      	movs	r1, #128	@ 0x80
 800645c:	0289      	lsls	r1, r1, #10
 800645e:	430a      	orrs	r2, r1
 8006460:	619a      	str	r2, [r3, #24]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	22ff      	movs	r2, #255	@ 0xff
 8006468:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800646a:	46c0      	nop			@ (mov r8, r8)
 800646c:	46bd      	mov	sp, r7
 800646e:	b002      	add	sp, #8
 8006470:	bd80      	pop	{r7, pc}

08006472 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800647a:	46c0      	nop			@ (mov r8, r8)
 800647c:	46bd      	mov	sp, r7
 800647e:	b002      	add	sp, #8
 8006480:	bd80      	pop	{r7, pc}

08006482 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b086      	sub	sp, #24
 8006486:	af00      	add	r7, sp, #0
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	001a      	movs	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	18d3      	adds	r3, r2, r3
 800649a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	3301      	adds	r3, #1
 80064a0:	33ff      	adds	r3, #255	@ 0xff
 80064a2:	613b      	str	r3, [r7, #16]
  tmp += (BackupRegister * 4U);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	18d3      	adds	r3, r2, r3
 80064ac:	613b      	str	r3, [r7, #16]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	601a      	str	r2, [r3, #0]
}
 80064b4:	46c0      	nop			@ (mov r8, r8)
 80064b6:	46bd      	mov	sp, r7
 80064b8:	b006      	add	sp, #24
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 4
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp ;
  /* Process TAMP instance pointer */
  TAMP_TypeDef *tamp = (TAMP_TypeDef *)((uint32_t)hrtc->Instance + hrtc->TampOffset);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	001a      	movs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	18d3      	adds	r3, r2, r3
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(tamp->BKP0R);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	3301      	adds	r3, #1
 80064d8:	33ff      	adds	r3, #255	@ 0xff
 80064da:	60bb      	str	r3, [r7, #8]
  tmp += (BackupRegister * 4U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	68ba      	ldr	r2, [r7, #8]
 80064e2:	18d3      	adds	r3, r2, r3
 80064e4:	60bb      	str	r3, [r7, #8]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	681b      	ldr	r3, [r3, #0]
}
 80064ea:	0018      	movs	r0, r3
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b004      	add	sp, #16
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d101      	bne.n	8006506 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	e0a8      	b.n	8006658 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650a:	2b00      	cmp	r3, #0
 800650c:	d109      	bne.n	8006522 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685a      	ldr	r2, [r3, #4]
 8006512:	2382      	movs	r3, #130	@ 0x82
 8006514:	005b      	lsls	r3, r3, #1
 8006516:	429a      	cmp	r2, r3
 8006518:	d009      	beq.n	800652e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	61da      	str	r2, [r3, #28]
 8006520:	e005      	b.n	800652e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	225d      	movs	r2, #93	@ 0x5d
 8006538:	5c9b      	ldrb	r3, [r3, r2]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d107      	bne.n	8006550 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	225c      	movs	r2, #92	@ 0x5c
 8006544:	2100      	movs	r1, #0
 8006546:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	0018      	movs	r0, r3
 800654c:	f7fd f9de 	bl	800390c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	225d      	movs	r2, #93	@ 0x5d
 8006554:	2102      	movs	r1, #2
 8006556:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2140      	movs	r1, #64	@ 0x40
 8006564:	438a      	bics	r2, r1
 8006566:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	23e0      	movs	r3, #224	@ 0xe0
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	429a      	cmp	r2, r3
 8006572:	d902      	bls.n	800657a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006574:	2300      	movs	r3, #0
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	e002      	b.n	8006580 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800657a:	2380      	movs	r3, #128	@ 0x80
 800657c:	015b      	lsls	r3, r3, #5
 800657e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68da      	ldr	r2, [r3, #12]
 8006584:	23f0      	movs	r3, #240	@ 0xf0
 8006586:	011b      	lsls	r3, r3, #4
 8006588:	429a      	cmp	r2, r3
 800658a:	d008      	beq.n	800659e <HAL_SPI_Init+0xaa>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68da      	ldr	r2, [r3, #12]
 8006590:	23e0      	movs	r3, #224	@ 0xe0
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	429a      	cmp	r2, r3
 8006596:	d002      	beq.n	800659e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	2382      	movs	r3, #130	@ 0x82
 80065a4:	005b      	lsls	r3, r3, #1
 80065a6:	401a      	ands	r2, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6899      	ldr	r1, [r3, #8]
 80065ac:	2384      	movs	r3, #132	@ 0x84
 80065ae:	021b      	lsls	r3, r3, #8
 80065b0:	400b      	ands	r3, r1
 80065b2:	431a      	orrs	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	2102      	movs	r1, #2
 80065ba:	400b      	ands	r3, r1
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	2101      	movs	r1, #1
 80065c4:	400b      	ands	r3, r1
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6999      	ldr	r1, [r3, #24]
 80065cc:	2380      	movs	r3, #128	@ 0x80
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	400b      	ands	r3, r1
 80065d2:	431a      	orrs	r2, r3
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	69db      	ldr	r3, [r3, #28]
 80065d8:	2138      	movs	r1, #56	@ 0x38
 80065da:	400b      	ands	r3, r1
 80065dc:	431a      	orrs	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	2180      	movs	r1, #128	@ 0x80
 80065e4:	400b      	ands	r3, r1
 80065e6:	431a      	orrs	r2, r3
 80065e8:	0011      	movs	r1, r2
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065ee:	2380      	movs	r3, #128	@ 0x80
 80065f0:	019b      	lsls	r3, r3, #6
 80065f2:	401a      	ands	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	0c1b      	lsrs	r3, r3, #16
 8006602:	2204      	movs	r2, #4
 8006604:	401a      	ands	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660a:	2110      	movs	r1, #16
 800660c:	400b      	ands	r3, r1
 800660e:	431a      	orrs	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006614:	2108      	movs	r1, #8
 8006616:	400b      	ands	r3, r1
 8006618:	431a      	orrs	r2, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68d9      	ldr	r1, [r3, #12]
 800661e:	23f0      	movs	r3, #240	@ 0xf0
 8006620:	011b      	lsls	r3, r3, #4
 8006622:	400b      	ands	r3, r1
 8006624:	431a      	orrs	r2, r3
 8006626:	0011      	movs	r1, r2
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	2380      	movs	r3, #128	@ 0x80
 800662c:	015b      	lsls	r3, r3, #5
 800662e:	401a      	ands	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	69da      	ldr	r2, [r3, #28]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4907      	ldr	r1, [pc, #28]	@ (8006660 <HAL_SPI_Init+0x16c>)
 8006644:	400a      	ands	r2, r1
 8006646:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	225d      	movs	r2, #93	@ 0x5d
 8006652:	2101      	movs	r1, #1
 8006654:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	0018      	movs	r0, r3
 800665a:	46bd      	mov	sp, r7
 800665c:	b004      	add	sp, #16
 800665e:	bd80      	pop	{r7, pc}
 8006660:	fffff7ff 	.word	0xfffff7ff

08006664 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	1dbb      	adds	r3, r7, #6
 8006670:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006672:	2317      	movs	r3, #23
 8006674:	18fb      	adds	r3, r7, r3
 8006676:	2200      	movs	r2, #0
 8006678:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	225c      	movs	r2, #92	@ 0x5c
 800667e:	5c9b      	ldrb	r3, [r3, r2]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_SPI_Transmit_DMA+0x24>
 8006684:	2302      	movs	r3, #2
 8006686:	e0e3      	b.n	8006850 <HAL_SPI_Transmit_DMA+0x1ec>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	225c      	movs	r2, #92	@ 0x5c
 800668c:	2101      	movs	r1, #1
 800668e:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	225d      	movs	r2, #93	@ 0x5d
 8006694:	5c9b      	ldrb	r3, [r3, r2]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b01      	cmp	r3, #1
 800669a:	d004      	beq.n	80066a6 <HAL_SPI_Transmit_DMA+0x42>
  {
    errorcode = HAL_BUSY;
 800669c:	2317      	movs	r3, #23
 800669e:	18fb      	adds	r3, r7, r3
 80066a0:	2202      	movs	r2, #2
 80066a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80066a4:	e0cd      	b.n	8006842 <HAL_SPI_Transmit_DMA+0x1de>
  }

  if ((pData == NULL) || (Size == 0U))
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <HAL_SPI_Transmit_DMA+0x50>
 80066ac:	1dbb      	adds	r3, r7, #6
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d104      	bne.n	80066be <HAL_SPI_Transmit_DMA+0x5a>
  {
    errorcode = HAL_ERROR;
 80066b4:	2317      	movs	r3, #23
 80066b6:	18fb      	adds	r3, r7, r3
 80066b8:	2201      	movs	r2, #1
 80066ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80066bc:	e0c1      	b.n	8006842 <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	225d      	movs	r2, #93	@ 0x5d
 80066c2:	2103      	movs	r1, #3
 80066c4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	1dba      	adds	r2, r7, #6
 80066d6:	8812      	ldrh	r2, [r2, #0]
 80066d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	1dba      	adds	r2, r7, #6
 80066de:	8812      	ldrh	r2, [r2, #0]
 80066e0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2244      	movs	r2, #68	@ 0x44
 80066f8:	2100      	movs	r1, #0
 80066fa:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2246      	movs	r2, #70	@ 0x46
 8006700:	2100      	movs	r1, #0
 8006702:	5299      	strh	r1, [r3, r2]

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	2380      	movs	r3, #128	@ 0x80
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	429a      	cmp	r2, r3
 800670e:	d110      	bne.n	8006732 <HAL_SPI_Transmit_DMA+0xce>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2140      	movs	r1, #64	@ 0x40
 800671c:	438a      	bics	r2, r1
 800671e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2180      	movs	r1, #128	@ 0x80
 800672c:	01c9      	lsls	r1, r1, #7
 800672e:	430a      	orrs	r2, r1
 8006730:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006736:	4a48      	ldr	r2, [pc, #288]	@ (8006858 <HAL_SPI_Transmit_DMA+0x1f4>)
 8006738:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800673e:	4a47      	ldr	r2, [pc, #284]	@ (800685c <HAL_SPI_Transmit_DMA+0x1f8>)
 8006740:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006746:	4a46      	ldr	r2, [pc, #280]	@ (8006860 <HAL_SPI_Transmit_DMA+0x1fc>)
 8006748:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800674e:	2200      	movs	r2, #0
 8006750:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4941      	ldr	r1, [pc, #260]	@ (8006864 <HAL_SPI_Transmit_DMA+0x200>)
 800675e:	400a      	ands	r2, r1
 8006760:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	23e0      	movs	r3, #224	@ 0xe0
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	429a      	cmp	r2, r3
 800676c:	d82f      	bhi.n	80067ce <HAL_SPI_Transmit_DMA+0x16a>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006772:	699a      	ldr	r2, [r3, #24]
 8006774:	2380      	movs	r3, #128	@ 0x80
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	429a      	cmp	r2, r3
 800677a:	d128      	bne.n	80067ce <HAL_SPI_Transmit_DMA+0x16a>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006780:	b29b      	uxth	r3, r3
 8006782:	001a      	movs	r2, r3
 8006784:	2301      	movs	r3, #1
 8006786:	4013      	ands	r3, r2
 8006788:	d10f      	bne.n	80067aa <HAL_SPI_Transmit_DMA+0x146>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4933      	ldr	r1, [pc, #204]	@ (8006864 <HAL_SPI_Transmit_DMA+0x200>)
 8006796:	400a      	ands	r2, r1
 8006798:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800679e:	b29b      	uxth	r3, r3
 80067a0:	085b      	lsrs	r3, r3, #1
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80067a8:	e011      	b.n	80067ce <HAL_SPI_Transmit_DMA+0x16a>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2180      	movs	r1, #128	@ 0x80
 80067b6:	01c9      	lsls	r1, r1, #7
 80067b8:	430a      	orrs	r2, r1
 80067ba:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	085b      	lsrs	r3, r3, #1
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	3301      	adds	r3, #1
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d6:	0019      	movs	r1, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	330c      	adds	r3, #12
 80067de:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067e4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80067e6:	f7fd fe9b 	bl	8004520 <HAL_DMA_Start_IT>
 80067ea:	1e03      	subs	r3, r0, #0
 80067ec:	d00a      	beq.n	8006804 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067f2:	2210      	movs	r2, #16
 80067f4:	431a      	orrs	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80067fa:	2317      	movs	r3, #23
 80067fc:	18fb      	adds	r3, r7, r3
 80067fe:	2201      	movs	r2, #1
 8006800:	701a      	strb	r2, [r3, #0]

    goto error;
 8006802:	e01e      	b.n	8006842 <HAL_SPI_Transmit_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2240      	movs	r2, #64	@ 0x40
 800680c:	4013      	ands	r3, r2
 800680e:	2b40      	cmp	r3, #64	@ 0x40
 8006810:	d007      	beq.n	8006822 <HAL_SPI_Transmit_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2140      	movs	r1, #64	@ 0x40
 800681e:	430a      	orrs	r2, r1
 8006820:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2120      	movs	r1, #32
 800682e:	430a      	orrs	r2, r1
 8006830:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2102      	movs	r1, #2
 800683e:	430a      	orrs	r2, r1
 8006840:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	225c      	movs	r2, #92	@ 0x5c
 8006846:	2100      	movs	r1, #0
 8006848:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800684a:	2317      	movs	r3, #23
 800684c:	18fb      	adds	r3, r7, r3
 800684e:	781b      	ldrb	r3, [r3, #0]
}
 8006850:	0018      	movs	r0, r3
 8006852:	46bd      	mov	sp, r7
 8006854:	b006      	add	sp, #24
 8006856:	bd80      	pop	{r7, pc}
 8006858:	08006935 	.word	0x08006935
 800685c:	08006889 	.word	0x08006889
 8006860:	08006953 	.word	0x08006953
 8006864:	ffffbfff 	.word	0xffffbfff

08006868 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006870:	46c0      	nop			@ (mov r8, r8)
 8006872:	46bd      	mov	sp, r7
 8006874:	b002      	add	sp, #8
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006880:	46c0      	nop			@ (mov r8, r8)
 8006882:	46bd      	mov	sp, r7
 8006884:	b002      	add	sp, #8
 8006886:	bd80      	pop	{r7, pc}

08006888 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006894:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006896:	f7fd fcad 	bl	80041f4 <HAL_GetTick>
 800689a:	0003      	movs	r3, r0
 800689c:	613b      	str	r3, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2220      	movs	r2, #32
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b20      	cmp	r3, #32
 80068aa:	d03c      	beq.n	8006926 <SPI_DMATransmitCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	685a      	ldr	r2, [r3, #4]
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2120      	movs	r1, #32
 80068b8:	438a      	bics	r2, r1
 80068ba:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2102      	movs	r1, #2
 80068c8:	438a      	bics	r2, r1
 80068ca:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2164      	movs	r1, #100	@ 0x64
 80068d2:	0018      	movs	r0, r3
 80068d4:	f000 f98e 	bl	8006bf4 <SPI_EndRxTxTransaction>
 80068d8:	1e03      	subs	r3, r0, #0
 80068da:	d005      	beq.n	80068e8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068e0:	2220      	movs	r2, #32
 80068e2:	431a      	orrs	r2, r3
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10a      	bne.n	8006906 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068f0:	2300      	movs	r3, #0
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2200      	movs	r2, #0
 800690a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	225d      	movs	r2, #93	@ 0x5d
 8006910:	2101      	movs	r1, #1
 8006912:	5499      	strb	r1, [r3, r2]

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006918:	2b00      	cmp	r3, #0
 800691a:	d004      	beq.n	8006926 <SPI_DMATransmitCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	0018      	movs	r0, r3
 8006920:	f7ff ffaa 	bl	8006878 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006924:	e003      	b.n	800692e <SPI_DMATransmitCplt+0xa6>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	0018      	movs	r0, r3
 800692a:	f7fc fe17 	bl	800355c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800692e:	46bd      	mov	sp, r7
 8006930:	b006      	add	sp, #24
 8006932:	bd80      	pop	{r7, pc}

08006934 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006940:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	0018      	movs	r0, r3
 8006946:	f7ff ff8f 	bl	8006868 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800694a:	46c0      	nop			@ (mov r8, r8)
 800694c:	46bd      	mov	sp, r7
 800694e:	b004      	add	sp, #16
 8006950:	bd80      	pop	{r7, pc}

08006952 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2103      	movs	r1, #3
 800696c:	438a      	bics	r2, r1
 800696e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006974:	2210      	movs	r2, #16
 8006976:	431a      	orrs	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	225d      	movs	r2, #93	@ 0x5d
 8006980:	2101      	movs	r1, #1
 8006982:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	0018      	movs	r0, r3
 8006988:	f7ff ff76 	bl	8006878 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800698c:	46c0      	nop			@ (mov r8, r8)
 800698e:	46bd      	mov	sp, r7
 8006990:	b004      	add	sp, #16
 8006992:	bd80      	pop	{r7, pc}

08006994 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b088      	sub	sp, #32
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	603b      	str	r3, [r7, #0]
 80069a0:	1dfb      	adds	r3, r7, #7
 80069a2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069a4:	f7fd fc26 	bl	80041f4 <HAL_GetTick>
 80069a8:	0002      	movs	r2, r0
 80069aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ac:	1a9b      	subs	r3, r3, r2
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	18d3      	adds	r3, r2, r3
 80069b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069b4:	f7fd fc1e 	bl	80041f4 <HAL_GetTick>
 80069b8:	0003      	movs	r3, r0
 80069ba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069bc:	4b3a      	ldr	r3, [pc, #232]	@ (8006aa8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	015b      	lsls	r3, r3, #5
 80069c2:	0d1b      	lsrs	r3, r3, #20
 80069c4:	69fa      	ldr	r2, [r7, #28]
 80069c6:	4353      	muls	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069ca:	e058      	b.n	8006a7e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	3301      	adds	r3, #1
 80069d0:	d055      	beq.n	8006a7e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069d2:	f7fd fc0f 	bl	80041f4 <HAL_GetTick>
 80069d6:	0002      	movs	r2, r0
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	69fa      	ldr	r2, [r7, #28]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d902      	bls.n	80069e8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d142      	bne.n	8006a6e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	21e0      	movs	r1, #224	@ 0xe0
 80069f4:	438a      	bics	r2, r1
 80069f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	2382      	movs	r3, #130	@ 0x82
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d113      	bne.n	8006a2c <SPI_WaitFlagStateUntilTimeout+0x98>
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	2380      	movs	r3, #128	@ 0x80
 8006a0a:	021b      	lsls	r3, r3, #8
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d005      	beq.n	8006a1c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	689a      	ldr	r2, [r3, #8]
 8006a14:	2380      	movs	r3, #128	@ 0x80
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d107      	bne.n	8006a2c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2140      	movs	r1, #64	@ 0x40
 8006a28:	438a      	bics	r2, r1
 8006a2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a30:	2380      	movs	r3, #128	@ 0x80
 8006a32:	019b      	lsls	r3, r3, #6
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d110      	bne.n	8006a5a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	491a      	ldr	r1, [pc, #104]	@ (8006aac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006a44:	400a      	ands	r2, r1
 8006a46:	601a      	str	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2180      	movs	r1, #128	@ 0x80
 8006a54:	0189      	lsls	r1, r1, #6
 8006a56:	430a      	orrs	r2, r1
 8006a58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	225d      	movs	r2, #93	@ 0x5d
 8006a5e:	2101      	movs	r1, #1
 8006a60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	225c      	movs	r2, #92	@ 0x5c
 8006a66:	2100      	movs	r1, #0
 8006a68:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e017      	b.n	8006a9e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	4013      	ands	r3, r2
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	425a      	negs	r2, r3
 8006a8e:	4153      	adcs	r3, r2
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	001a      	movs	r2, r3
 8006a94:	1dfb      	adds	r3, r7, #7
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d197      	bne.n	80069cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	b008      	add	sp, #32
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	46c0      	nop			@ (mov r8, r8)
 8006aa8:	20000004 	.word	0x20000004
 8006aac:	ffffdfff 	.word	0xffffdfff

08006ab0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b08a      	sub	sp, #40	@ 0x28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
 8006abc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006abe:	2317      	movs	r3, #23
 8006ac0:	18fb      	adds	r3, r7, r3
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ac6:	f7fd fb95 	bl	80041f4 <HAL_GetTick>
 8006aca:	0002      	movs	r2, r0
 8006acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	18d3      	adds	r3, r2, r3
 8006ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006ad6:	f7fd fb8d 	bl	80041f4 <HAL_GetTick>
 8006ada:	0003      	movs	r3, r0
 8006adc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	330c      	adds	r3, #12
 8006ae4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006ae6:	4b41      	ldr	r3, [pc, #260]	@ (8006bec <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	0013      	movs	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	189b      	adds	r3, r3, r2
 8006af0:	00da      	lsls	r2, r3, #3
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	0d1b      	lsrs	r3, r3, #20
 8006af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af8:	4353      	muls	r3, r2
 8006afa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006afc:	e068      	b.n	8006bd0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	23c0      	movs	r3, #192	@ 0xc0
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d10a      	bne.n	8006b1e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d107      	bne.n	8006b1e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	2117      	movs	r1, #23
 8006b16:	187b      	adds	r3, r7, r1
 8006b18:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006b1a:	187b      	adds	r3, r7, r1
 8006b1c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	3301      	adds	r3, #1
 8006b22:	d055      	beq.n	8006bd0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b24:	f7fd fb66 	bl	80041f4 <HAL_GetTick>
 8006b28:	0002      	movs	r2, r0
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d902      	bls.n	8006b3a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d142      	bne.n	8006bc0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	21e0      	movs	r1, #224	@ 0xe0
 8006b46:	438a      	bics	r2, r1
 8006b48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	2382      	movs	r3, #130	@ 0x82
 8006b50:	005b      	lsls	r3, r3, #1
 8006b52:	429a      	cmp	r2, r3
 8006b54:	d113      	bne.n	8006b7e <SPI_WaitFifoStateUntilTimeout+0xce>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	689a      	ldr	r2, [r3, #8]
 8006b5a:	2380      	movs	r3, #128	@ 0x80
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d005      	beq.n	8006b6e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	2380      	movs	r3, #128	@ 0x80
 8006b68:	00db      	lsls	r3, r3, #3
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d107      	bne.n	8006b7e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2140      	movs	r1, #64	@ 0x40
 8006b7a:	438a      	bics	r2, r1
 8006b7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006b82:	2380      	movs	r3, #128	@ 0x80
 8006b84:	019b      	lsls	r3, r3, #6
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d110      	bne.n	8006bac <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4916      	ldr	r1, [pc, #88]	@ (8006bf0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006b96:	400a      	ands	r2, r1
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2180      	movs	r1, #128	@ 0x80
 8006ba6:	0189      	lsls	r1, r1, #6
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	225d      	movs	r2, #93	@ 0x5d
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	225c      	movs	r2, #92	@ 0x5c
 8006bb8:	2100      	movs	r1, #0
 8006bba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e010      	b.n	8006be2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	4013      	ands	r3, r2
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d18e      	bne.n	8006afe <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	0018      	movs	r0, r3
 8006be4:	46bd      	mov	sp, r7
 8006be6:	b00a      	add	sp, #40	@ 0x28
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	46c0      	nop			@ (mov r8, r8)
 8006bec:	20000004 	.word	0x20000004
 8006bf0:	ffffdfff 	.word	0xffffdfff

08006bf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	23c0      	movs	r3, #192	@ 0xc0
 8006c04:	0159      	lsls	r1, r3, #5
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	0013      	movs	r3, r2
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f7ff ff4e 	bl	8006ab0 <SPI_WaitFifoStateUntilTimeout>
 8006c14:	1e03      	subs	r3, r0, #0
 8006c16:	d007      	beq.n	8006c28 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e027      	b.n	8006c78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	0013      	movs	r3, r2
 8006c32:	2200      	movs	r2, #0
 8006c34:	2180      	movs	r1, #128	@ 0x80
 8006c36:	f7ff fead 	bl	8006994 <SPI_WaitFlagStateUntilTimeout>
 8006c3a:	1e03      	subs	r3, r0, #0
 8006c3c:	d007      	beq.n	8006c4e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c42:	2220      	movs	r2, #32
 8006c44:	431a      	orrs	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e014      	b.n	8006c78 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	23c0      	movs	r3, #192	@ 0xc0
 8006c52:	00d9      	lsls	r1, r3, #3
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	0013      	movs	r3, r2
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f7ff ff27 	bl	8006ab0 <SPI_WaitFifoStateUntilTimeout>
 8006c62:	1e03      	subs	r3, r0, #0
 8006c64:	d007      	beq.n	8006c76 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	431a      	orrs	r2, r3
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e000      	b.n	8006c78 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	0018      	movs	r0, r3
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	b004      	add	sp, #16
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e04a      	b.n	8006d28 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	223d      	movs	r2, #61	@ 0x3d
 8006c96:	5c9b      	ldrb	r3, [r3, r2]
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d107      	bne.n	8006cae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	223c      	movs	r2, #60	@ 0x3c
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f7fd f86d 	bl	8003d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	223d      	movs	r2, #61	@ 0x3d
 8006cb2:	2102      	movs	r1, #2
 8006cb4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	3304      	adds	r3, #4
 8006cbe:	0019      	movs	r1, r3
 8006cc0:	0010      	movs	r0, r2
 8006cc2:	f000 f9e1 	bl	8007088 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2248      	movs	r2, #72	@ 0x48
 8006cca:	2101      	movs	r1, #1
 8006ccc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	223e      	movs	r2, #62	@ 0x3e
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	5499      	strb	r1, [r3, r2]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	223f      	movs	r2, #63	@ 0x3f
 8006cda:	2101      	movs	r1, #1
 8006cdc:	5499      	strb	r1, [r3, r2]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2240      	movs	r2, #64	@ 0x40
 8006ce2:	2101      	movs	r1, #1
 8006ce4:	5499      	strb	r1, [r3, r2]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2241      	movs	r2, #65	@ 0x41
 8006cea:	2101      	movs	r1, #1
 8006cec:	5499      	strb	r1, [r3, r2]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2242      	movs	r2, #66	@ 0x42
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	5499      	strb	r1, [r3, r2]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2243      	movs	r2, #67	@ 0x43
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2244      	movs	r2, #68	@ 0x44
 8006d02:	2101      	movs	r1, #1
 8006d04:	5499      	strb	r1, [r3, r2]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2245      	movs	r2, #69	@ 0x45
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	5499      	strb	r1, [r3, r2]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2246      	movs	r2, #70	@ 0x46
 8006d12:	2101      	movs	r1, #1
 8006d14:	5499      	strb	r1, [r3, r2]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2247      	movs	r2, #71	@ 0x47
 8006d1a:	2101      	movs	r1, #1
 8006d1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	223d      	movs	r2, #61	@ 0x3d
 8006d22:	2101      	movs	r1, #1
 8006d24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	0018      	movs	r0, r3
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	b002      	add	sp, #8
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	223d      	movs	r2, #61	@ 0x3d
 8006d3c:	5c9b      	ldrb	r3, [r3, r2]
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d001      	beq.n	8006d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e03c      	b.n	8006dc2 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	223d      	movs	r2, #61	@ 0x3d
 8006d4c:	2102      	movs	r1, #2
 8006d4e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2101      	movs	r1, #1
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a19      	ldr	r2, [pc, #100]	@ (8006dcc <HAL_TIM_Base_Start_IT+0x9c>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d009      	beq.n	8006d7e <HAL_TIM_Base_Start_IT+0x4e>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a18      	ldr	r2, [pc, #96]	@ (8006dd0 <HAL_TIM_Base_Start_IT+0xa0>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d004      	beq.n	8006d7e <HAL_TIM_Base_Start_IT+0x4e>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a16      	ldr	r2, [pc, #88]	@ (8006dd4 <HAL_TIM_Base_Start_IT+0xa4>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d116      	bne.n	8006dac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	4a14      	ldr	r2, [pc, #80]	@ (8006dd8 <HAL_TIM_Base_Start_IT+0xa8>)
 8006d86:	4013      	ands	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2b06      	cmp	r3, #6
 8006d8e:	d016      	beq.n	8006dbe <HAL_TIM_Base_Start_IT+0x8e>
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	2380      	movs	r3, #128	@ 0x80
 8006d94:	025b      	lsls	r3, r3, #9
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d011      	beq.n	8006dbe <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2101      	movs	r1, #1
 8006da6:	430a      	orrs	r2, r1
 8006da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006daa:	e008      	b.n	8006dbe <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2101      	movs	r1, #1
 8006db8:	430a      	orrs	r2, r1
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	e000      	b.n	8006dc0 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dbe:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	b004      	add	sp, #16
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	46c0      	nop			@ (mov r8, r8)
 8006dcc:	40012c00 	.word	0x40012c00
 8006dd0:	40000400 	.word	0x40000400
 8006dd4:	40014000 	.word	0x40014000
 8006dd8:	00010007 	.word	0x00010007

08006ddc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2101      	movs	r1, #1
 8006df0:	438a      	bics	r2, r1
 8006df2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	4a0d      	ldr	r2, [pc, #52]	@ (8006e30 <HAL_TIM_Base_Stop_IT+0x54>)
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d10d      	bne.n	8006e1c <HAL_TIM_Base_Stop_IT+0x40>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	4a0b      	ldr	r2, [pc, #44]	@ (8006e34 <HAL_TIM_Base_Stop_IT+0x58>)
 8006e08:	4013      	ands	r3, r2
 8006e0a:	d107      	bne.n	8006e1c <HAL_TIM_Base_Stop_IT+0x40>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2101      	movs	r1, #1
 8006e18:	438a      	bics	r2, r1
 8006e1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	223d      	movs	r2, #61	@ 0x3d
 8006e20:	2101      	movs	r1, #1
 8006e22:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	0018      	movs	r0, r3
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	b002      	add	sp, #8
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	46c0      	nop			@ (mov r8, r8)
 8006e30:	00001111 	.word	0x00001111
 8006e34:	00000444 	.word	0x00000444

08006e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	2202      	movs	r2, #2
 8006e54:	4013      	ands	r3, r2
 8006e56:	d021      	beq.n	8006e9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	d01d      	beq.n	8006e9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2203      	movs	r2, #3
 8006e66:	4252      	negs	r2, r2
 8006e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	2203      	movs	r2, #3
 8006e78:	4013      	ands	r3, r2
 8006e7a:	d004      	beq.n	8006e86 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f000 f8ea 	bl	8007058 <HAL_TIM_IC_CaptureCallback>
 8006e84:	e007      	b.n	8006e96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	0018      	movs	r0, r3
 8006e8a:	f000 f8dd 	bl	8007048 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	0018      	movs	r0, r3
 8006e92:	f000 f8e9 	bl	8007068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2204      	movs	r2, #4
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	d022      	beq.n	8006eea <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2204      	movs	r2, #4
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	d01e      	beq.n	8006eea <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2205      	movs	r2, #5
 8006eb2:	4252      	negs	r2, r2
 8006eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699a      	ldr	r2, [r3, #24]
 8006ec2:	23c0      	movs	r3, #192	@ 0xc0
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	d004      	beq.n	8006ed4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	0018      	movs	r0, r3
 8006ece:	f000 f8c3 	bl	8007058 <HAL_TIM_IC_CaptureCallback>
 8006ed2:	e007      	b.n	8006ee4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	0018      	movs	r0, r3
 8006ed8:	f000 f8b6 	bl	8007048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	0018      	movs	r0, r3
 8006ee0:	f000 f8c2 	bl	8007068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	2208      	movs	r2, #8
 8006eee:	4013      	ands	r3, r2
 8006ef0:	d021      	beq.n	8006f36 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2208      	movs	r2, #8
 8006ef6:	4013      	ands	r3, r2
 8006ef8:	d01d      	beq.n	8006f36 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2209      	movs	r2, #9
 8006f00:	4252      	negs	r2, r2
 8006f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2204      	movs	r2, #4
 8006f08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	2203      	movs	r2, #3
 8006f12:	4013      	ands	r3, r2
 8006f14:	d004      	beq.n	8006f20 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f000 f89d 	bl	8007058 <HAL_TIM_IC_CaptureCallback>
 8006f1e:	e007      	b.n	8006f30 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	0018      	movs	r0, r3
 8006f24:	f000 f890 	bl	8007048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	0018      	movs	r0, r3
 8006f2c:	f000 f89c 	bl	8007068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2210      	movs	r2, #16
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	d022      	beq.n	8006f84 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2210      	movs	r2, #16
 8006f42:	4013      	ands	r3, r2
 8006f44:	d01e      	beq.n	8006f84 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2211      	movs	r2, #17
 8006f4c:	4252      	negs	r2, r2
 8006f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2208      	movs	r2, #8
 8006f54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69da      	ldr	r2, [r3, #28]
 8006f5c:	23c0      	movs	r3, #192	@ 0xc0
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4013      	ands	r3, r2
 8006f62:	d004      	beq.n	8006f6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	0018      	movs	r0, r3
 8006f68:	f000 f876 	bl	8007058 <HAL_TIM_IC_CaptureCallback>
 8006f6c:	e007      	b.n	8006f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	0018      	movs	r0, r3
 8006f72:	f000 f869 	bl	8007048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f000 f875 	bl	8007068 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2201      	movs	r2, #1
 8006f88:	4013      	ands	r3, r2
 8006f8a:	d00c      	beq.n	8006fa6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	4013      	ands	r3, r2
 8006f92:	d008      	beq.n	8006fa6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2202      	movs	r2, #2
 8006f9a:	4252      	negs	r2, r2
 8006f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f7fc fa8f 	bl	80034c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2280      	movs	r2, #128	@ 0x80
 8006faa:	4013      	ands	r3, r2
 8006fac:	d104      	bne.n	8006fb8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	2380      	movs	r3, #128	@ 0x80
 8006fb2:	019b      	lsls	r3, r3, #6
 8006fb4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006fb6:	d00b      	beq.n	8006fd0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2280      	movs	r2, #128	@ 0x80
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	d007      	beq.n	8006fd0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8007040 <HAL_TIM_IRQHandler+0x208>)
 8006fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	0018      	movs	r0, r3
 8006fcc:	f000 f950 	bl	8007270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006fd0:	68ba      	ldr	r2, [r7, #8]
 8006fd2:	2380      	movs	r3, #128	@ 0x80
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	d00b      	beq.n	8006ff2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2280      	movs	r2, #128	@ 0x80
 8006fde:	4013      	ands	r3, r2
 8006fe0:	d007      	beq.n	8006ff2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a17      	ldr	r2, [pc, #92]	@ (8007044 <HAL_TIM_IRQHandler+0x20c>)
 8006fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	0018      	movs	r0, r3
 8006fee:	f000 f947 	bl	8007280 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	2240      	movs	r2, #64	@ 0x40
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	d00c      	beq.n	8007014 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2240      	movs	r2, #64	@ 0x40
 8006ffe:	4013      	ands	r3, r2
 8007000:	d008      	beq.n	8007014 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2241      	movs	r2, #65	@ 0x41
 8007008:	4252      	negs	r2, r2
 800700a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	0018      	movs	r0, r3
 8007010:	f000 f832 	bl	8007078 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2220      	movs	r2, #32
 8007018:	4013      	ands	r3, r2
 800701a:	d00c      	beq.n	8007036 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2220      	movs	r2, #32
 8007020:	4013      	ands	r3, r2
 8007022:	d008      	beq.n	8007036 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2221      	movs	r2, #33	@ 0x21
 800702a:	4252      	negs	r2, r2
 800702c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	0018      	movs	r0, r3
 8007032:	f000 f915 	bl	8007260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007036:	46c0      	nop			@ (mov r8, r8)
 8007038:	46bd      	mov	sp, r7
 800703a:	b004      	add	sp, #16
 800703c:	bd80      	pop	{r7, pc}
 800703e:	46c0      	nop			@ (mov r8, r8)
 8007040:	ffffdf7f 	.word	0xffffdf7f
 8007044:	fffffeff 	.word	0xfffffeff

08007048 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007050:	46c0      	nop			@ (mov r8, r8)
 8007052:	46bd      	mov	sp, r7
 8007054:	b002      	add	sp, #8
 8007056:	bd80      	pop	{r7, pc}

08007058 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007060:	46c0      	nop			@ (mov r8, r8)
 8007062:	46bd      	mov	sp, r7
 8007064:	b002      	add	sp, #8
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007070:	46c0      	nop			@ (mov r8, r8)
 8007072:	46bd      	mov	sp, r7
 8007074:	b002      	add	sp, #8
 8007076:	bd80      	pop	{r7, pc}

08007078 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007080:	46c0      	nop			@ (mov r8, r8)
 8007082:	46bd      	mov	sp, r7
 8007084:	b002      	add	sp, #8
 8007086:	bd80      	pop	{r7, pc}

08007088 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a36      	ldr	r2, [pc, #216]	@ (8007174 <TIM_Base_SetConfig+0xec>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d003      	beq.n	80070a8 <TIM_Base_SetConfig+0x20>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a35      	ldr	r2, [pc, #212]	@ (8007178 <TIM_Base_SetConfig+0xf0>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d108      	bne.n	80070ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2270      	movs	r2, #112	@ 0x70
 80070ac:	4393      	bics	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a2d      	ldr	r2, [pc, #180]	@ (8007174 <TIM_Base_SetConfig+0xec>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d013      	beq.n	80070ea <TIM_Base_SetConfig+0x62>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a2c      	ldr	r2, [pc, #176]	@ (8007178 <TIM_Base_SetConfig+0xf0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00f      	beq.n	80070ea <TIM_Base_SetConfig+0x62>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a2b      	ldr	r2, [pc, #172]	@ (800717c <TIM_Base_SetConfig+0xf4>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00b      	beq.n	80070ea <TIM_Base_SetConfig+0x62>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a2a      	ldr	r2, [pc, #168]	@ (8007180 <TIM_Base_SetConfig+0xf8>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d007      	beq.n	80070ea <TIM_Base_SetConfig+0x62>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a29      	ldr	r2, [pc, #164]	@ (8007184 <TIM_Base_SetConfig+0xfc>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d003      	beq.n	80070ea <TIM_Base_SetConfig+0x62>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a28      	ldr	r2, [pc, #160]	@ (8007188 <TIM_Base_SetConfig+0x100>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d108      	bne.n	80070fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	4a27      	ldr	r2, [pc, #156]	@ (800718c <TIM_Base_SetConfig+0x104>)
 80070ee:	4013      	ands	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2280      	movs	r2, #128	@ 0x80
 8007100:	4393      	bics	r3, r2
 8007102:	001a      	movs	r2, r3
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	695b      	ldr	r3, [r3, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	68fa      	ldr	r2, [r7, #12]
 8007110:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	689a      	ldr	r2, [r3, #8]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a13      	ldr	r2, [pc, #76]	@ (8007174 <TIM_Base_SetConfig+0xec>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d00b      	beq.n	8007142 <TIM_Base_SetConfig+0xba>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a14      	ldr	r2, [pc, #80]	@ (8007180 <TIM_Base_SetConfig+0xf8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d007      	beq.n	8007142 <TIM_Base_SetConfig+0xba>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a13      	ldr	r2, [pc, #76]	@ (8007184 <TIM_Base_SetConfig+0xfc>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d003      	beq.n	8007142 <TIM_Base_SetConfig+0xba>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a12      	ldr	r2, [pc, #72]	@ (8007188 <TIM_Base_SetConfig+0x100>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d103      	bne.n	800714a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	691a      	ldr	r2, [r3, #16]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2201      	movs	r2, #1
 800714e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	2201      	movs	r2, #1
 8007156:	4013      	ands	r3, r2
 8007158:	2b01      	cmp	r3, #1
 800715a:	d106      	bne.n	800716a <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	2201      	movs	r2, #1
 8007162:	4393      	bics	r3, r2
 8007164:	001a      	movs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	611a      	str	r2, [r3, #16]
  }
}
 800716a:	46c0      	nop			@ (mov r8, r8)
 800716c:	46bd      	mov	sp, r7
 800716e:	b004      	add	sp, #16
 8007170:	bd80      	pop	{r7, pc}
 8007172:	46c0      	nop			@ (mov r8, r8)
 8007174:	40012c00 	.word	0x40012c00
 8007178:	40000400 	.word	0x40000400
 800717c:	40002000 	.word	0x40002000
 8007180:	40014000 	.word	0x40014000
 8007184:	40014400 	.word	0x40014400
 8007188:	40014800 	.word	0x40014800
 800718c:	fffffcff 	.word	0xfffffcff

08007190 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	223c      	movs	r2, #60	@ 0x3c
 800719e:	5c9b      	ldrb	r3, [r3, r2]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d101      	bne.n	80071a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e04f      	b.n	8007248 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	223c      	movs	r2, #60	@ 0x3c
 80071ac:	2101      	movs	r1, #1
 80071ae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	223d      	movs	r2, #61	@ 0x3d
 80071b4:	2102      	movs	r1, #2
 80071b6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a20      	ldr	r2, [pc, #128]	@ (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d108      	bne.n	80071e4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	4a1f      	ldr	r2, [pc, #124]	@ (8007254 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80071d6:	4013      	ands	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2270      	movs	r2, #112	@ 0x70
 80071e8:	4393      	bics	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a13      	ldr	r2, [pc, #76]	@ (8007250 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d009      	beq.n	800721c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a12      	ldr	r2, [pc, #72]	@ (8007258 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d004      	beq.n	800721c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a11      	ldr	r2, [pc, #68]	@ (800725c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d10c      	bne.n	8007236 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2280      	movs	r2, #128	@ 0x80
 8007220:	4393      	bics	r3, r2
 8007222:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	4313      	orrs	r3, r2
 800722c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	223d      	movs	r2, #61	@ 0x3d
 800723a:	2101      	movs	r1, #1
 800723c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	223c      	movs	r2, #60	@ 0x3c
 8007242:	2100      	movs	r1, #0
 8007244:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	0018      	movs	r0, r3
 800724a:	46bd      	mov	sp, r7
 800724c:	b004      	add	sp, #16
 800724e:	bd80      	pop	{r7, pc}
 8007250:	40012c00 	.word	0x40012c00
 8007254:	ff0fffff 	.word	0xff0fffff
 8007258:	40000400 	.word	0x40000400
 800725c:	40014000 	.word	0x40014000

08007260 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007268:	46c0      	nop			@ (mov r8, r8)
 800726a:	46bd      	mov	sp, r7
 800726c:	b002      	add	sp, #8
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007278:	46c0      	nop			@ (mov r8, r8)
 800727a:	46bd      	mov	sp, r7
 800727c:	b002      	add	sp, #8
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007288:	46c0      	nop			@ (mov r8, r8)
 800728a:	46bd      	mov	sp, r7
 800728c:	b002      	add	sp, #8
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e046      	b.n	8007330 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2288      	movs	r2, #136	@ 0x88
 80072a6:	589b      	ldr	r3, [r3, r2]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d107      	bne.n	80072bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2284      	movs	r2, #132	@ 0x84
 80072b0:	2100      	movs	r1, #0
 80072b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	0018      	movs	r0, r3
 80072b8:	f7fc fe44 	bl	8003f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2288      	movs	r2, #136	@ 0x88
 80072c0:	2124      	movs	r1, #36	@ 0x24
 80072c2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2101      	movs	r1, #1
 80072d0:	438a      	bics	r2, r1
 80072d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	0018      	movs	r0, r3
 80072e0:	f000 fdb6 	bl	8007e50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	0018      	movs	r0, r3
 80072e8:	f000 fc0e 	bl	8007b08 <UART_SetConfig>
 80072ec:	0003      	movs	r3, r0
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d101      	bne.n	80072f6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e01c      	b.n	8007330 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	490d      	ldr	r1, [pc, #52]	@ (8007338 <HAL_UART_Init+0xa8>)
 8007302:	400a      	ands	r2, r1
 8007304:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	212a      	movs	r1, #42	@ 0x2a
 8007312:	438a      	bics	r2, r1
 8007314:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2101      	movs	r1, #1
 8007322:	430a      	orrs	r2, r1
 8007324:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	0018      	movs	r0, r3
 800732a:	f000 fe45 	bl	8007fb8 <UART_CheckIdleState>
 800732e:	0003      	movs	r3, r0
}
 8007330:	0018      	movs	r0, r3
 8007332:	46bd      	mov	sp, r7
 8007334:	b002      	add	sp, #8
 8007336:	bd80      	pop	{r7, pc}
 8007338:	ffffb7ff 	.word	0xffffb7ff

0800733c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08a      	sub	sp, #40	@ 0x28
 8007340:	af02      	add	r7, sp, #8
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	1dbb      	adds	r3, r7, #6
 800734a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2288      	movs	r2, #136	@ 0x88
 8007350:	589b      	ldr	r3, [r3, r2]
 8007352:	2b20      	cmp	r3, #32
 8007354:	d000      	beq.n	8007358 <HAL_UART_Transmit+0x1c>
 8007356:	e090      	b.n	800747a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_UART_Transmit+0x2a>
 800735e:	1dbb      	adds	r3, r7, #6
 8007360:	881b      	ldrh	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e088      	b.n	800747c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	2380      	movs	r3, #128	@ 0x80
 8007370:	015b      	lsls	r3, r3, #5
 8007372:	429a      	cmp	r2, r3
 8007374:	d109      	bne.n	800738a <HAL_UART_Transmit+0x4e>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d105      	bne.n	800738a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2201      	movs	r2, #1
 8007382:	4013      	ands	r3, r2
 8007384:	d001      	beq.n	800738a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e078      	b.n	800747c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2290      	movs	r2, #144	@ 0x90
 800738e:	2100      	movs	r1, #0
 8007390:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2288      	movs	r2, #136	@ 0x88
 8007396:	2121      	movs	r1, #33	@ 0x21
 8007398:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800739a:	f7fc ff2b 	bl	80041f4 <HAL_GetTick>
 800739e:	0003      	movs	r3, r0
 80073a0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	1dba      	adds	r2, r7, #6
 80073a6:	2154      	movs	r1, #84	@ 0x54
 80073a8:	8812      	ldrh	r2, [r2, #0]
 80073aa:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	1dba      	adds	r2, r7, #6
 80073b0:	2156      	movs	r1, #86	@ 0x56
 80073b2:	8812      	ldrh	r2, [r2, #0]
 80073b4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	2380      	movs	r3, #128	@ 0x80
 80073bc:	015b      	lsls	r3, r3, #5
 80073be:	429a      	cmp	r2, r3
 80073c0:	d108      	bne.n	80073d4 <HAL_UART_Transmit+0x98>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d104      	bne.n	80073d4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80073ca:	2300      	movs	r3, #0
 80073cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	61bb      	str	r3, [r7, #24]
 80073d2:	e003      	b.n	80073dc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073d8:	2300      	movs	r3, #0
 80073da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073dc:	e030      	b.n	8007440 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	0013      	movs	r3, r2
 80073e8:	2200      	movs	r2, #0
 80073ea:	2180      	movs	r1, #128	@ 0x80
 80073ec:	f000 fe8e 	bl	800810c <UART_WaitOnFlagUntilTimeout>
 80073f0:	1e03      	subs	r3, r0, #0
 80073f2:	d005      	beq.n	8007400 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2288      	movs	r2, #136	@ 0x88
 80073f8:	2120      	movs	r1, #32
 80073fa:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e03d      	b.n	800747c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10b      	bne.n	800741e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	001a      	movs	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	05d2      	lsls	r2, r2, #23
 8007412:	0dd2      	lsrs	r2, r2, #23
 8007414:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	3302      	adds	r3, #2
 800741a:	61bb      	str	r3, [r7, #24]
 800741c:	e007      	b.n	800742e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	781a      	ldrb	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007428:	69fb      	ldr	r3, [r7, #28]
 800742a:	3301      	adds	r3, #1
 800742c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2256      	movs	r2, #86	@ 0x56
 8007432:	5a9b      	ldrh	r3, [r3, r2]
 8007434:	b29b      	uxth	r3, r3
 8007436:	3b01      	subs	r3, #1
 8007438:	b299      	uxth	r1, r3
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2256      	movs	r2, #86	@ 0x56
 800743e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2256      	movs	r2, #86	@ 0x56
 8007444:	5a9b      	ldrh	r3, [r3, r2]
 8007446:	b29b      	uxth	r3, r3
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1c8      	bne.n	80073de <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	0013      	movs	r3, r2
 8007456:	2200      	movs	r2, #0
 8007458:	2140      	movs	r1, #64	@ 0x40
 800745a:	f000 fe57 	bl	800810c <UART_WaitOnFlagUntilTimeout>
 800745e:	1e03      	subs	r3, r0, #0
 8007460:	d005      	beq.n	800746e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2288      	movs	r2, #136	@ 0x88
 8007466:	2120      	movs	r1, #32
 8007468:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e006      	b.n	800747c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2288      	movs	r2, #136	@ 0x88
 8007472:	2120      	movs	r1, #32
 8007474:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	e000      	b.n	800747c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800747a:	2302      	movs	r3, #2
  }
}
 800747c:	0018      	movs	r0, r3
 800747e:	46bd      	mov	sp, r7
 8007480:	b008      	add	sp, #32
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007484:	b5b0      	push	{r4, r5, r7, lr}
 8007486:	b0aa      	sub	sp, #168	@ 0xa8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	22a4      	movs	r2, #164	@ 0xa4
 8007494:	18b9      	adds	r1, r7, r2
 8007496:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	20a0      	movs	r0, #160	@ 0xa0
 80074a0:	1839      	adds	r1, r7, r0
 80074a2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	249c      	movs	r4, #156	@ 0x9c
 80074ac:	1939      	adds	r1, r7, r4
 80074ae:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074b0:	0011      	movs	r1, r2
 80074b2:	18bb      	adds	r3, r7, r2
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4aa2      	ldr	r2, [pc, #648]	@ (8007740 <HAL_UART_IRQHandler+0x2bc>)
 80074b8:	4013      	ands	r3, r2
 80074ba:	2298      	movs	r2, #152	@ 0x98
 80074bc:	18bd      	adds	r5, r7, r2
 80074be:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80074c0:	18bb      	adds	r3, r7, r2
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d11a      	bne.n	80074fe <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074c8:	187b      	adds	r3, r7, r1
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2220      	movs	r2, #32
 80074ce:	4013      	ands	r3, r2
 80074d0:	d015      	beq.n	80074fe <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074d2:	183b      	adds	r3, r7, r0
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2220      	movs	r2, #32
 80074d8:	4013      	ands	r3, r2
 80074da:	d105      	bne.n	80074e8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074dc:	193b      	adds	r3, r7, r4
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	2380      	movs	r3, #128	@ 0x80
 80074e2:	055b      	lsls	r3, r3, #21
 80074e4:	4013      	ands	r3, r2
 80074e6:	d00a      	beq.n	80074fe <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d100      	bne.n	80074f2 <HAL_UART_IRQHandler+0x6e>
 80074f0:	e2dc      	b.n	8007aac <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	0010      	movs	r0, r2
 80074fa:	4798      	blx	r3
      }
      return;
 80074fc:	e2d6      	b.n	8007aac <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80074fe:	2398      	movs	r3, #152	@ 0x98
 8007500:	18fb      	adds	r3, r7, r3
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d100      	bne.n	800750a <HAL_UART_IRQHandler+0x86>
 8007508:	e122      	b.n	8007750 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800750a:	239c      	movs	r3, #156	@ 0x9c
 800750c:	18fb      	adds	r3, r7, r3
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a8c      	ldr	r2, [pc, #560]	@ (8007744 <HAL_UART_IRQHandler+0x2c0>)
 8007512:	4013      	ands	r3, r2
 8007514:	d106      	bne.n	8007524 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007516:	23a0      	movs	r3, #160	@ 0xa0
 8007518:	18fb      	adds	r3, r7, r3
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a8a      	ldr	r2, [pc, #552]	@ (8007748 <HAL_UART_IRQHandler+0x2c4>)
 800751e:	4013      	ands	r3, r2
 8007520:	d100      	bne.n	8007524 <HAL_UART_IRQHandler+0xa0>
 8007522:	e115      	b.n	8007750 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007524:	23a4      	movs	r3, #164	@ 0xa4
 8007526:	18fb      	adds	r3, r7, r3
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2201      	movs	r2, #1
 800752c:	4013      	ands	r3, r2
 800752e:	d012      	beq.n	8007556 <HAL_UART_IRQHandler+0xd2>
 8007530:	23a0      	movs	r3, #160	@ 0xa0
 8007532:	18fb      	adds	r3, r7, r3
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	2380      	movs	r3, #128	@ 0x80
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	4013      	ands	r3, r2
 800753c:	d00b      	beq.n	8007556 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2201      	movs	r2, #1
 8007544:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2290      	movs	r2, #144	@ 0x90
 800754a:	589b      	ldr	r3, [r3, r2]
 800754c:	2201      	movs	r2, #1
 800754e:	431a      	orrs	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2190      	movs	r1, #144	@ 0x90
 8007554:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007556:	23a4      	movs	r3, #164	@ 0xa4
 8007558:	18fb      	adds	r3, r7, r3
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2202      	movs	r2, #2
 800755e:	4013      	ands	r3, r2
 8007560:	d011      	beq.n	8007586 <HAL_UART_IRQHandler+0x102>
 8007562:	239c      	movs	r3, #156	@ 0x9c
 8007564:	18fb      	adds	r3, r7, r3
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2201      	movs	r2, #1
 800756a:	4013      	ands	r3, r2
 800756c:	d00b      	beq.n	8007586 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2202      	movs	r2, #2
 8007574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2290      	movs	r2, #144	@ 0x90
 800757a:	589b      	ldr	r3, [r3, r2]
 800757c:	2204      	movs	r2, #4
 800757e:	431a      	orrs	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2190      	movs	r1, #144	@ 0x90
 8007584:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007586:	23a4      	movs	r3, #164	@ 0xa4
 8007588:	18fb      	adds	r3, r7, r3
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2204      	movs	r2, #4
 800758e:	4013      	ands	r3, r2
 8007590:	d011      	beq.n	80075b6 <HAL_UART_IRQHandler+0x132>
 8007592:	239c      	movs	r3, #156	@ 0x9c
 8007594:	18fb      	adds	r3, r7, r3
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2201      	movs	r2, #1
 800759a:	4013      	ands	r3, r2
 800759c:	d00b      	beq.n	80075b6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2204      	movs	r2, #4
 80075a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2290      	movs	r2, #144	@ 0x90
 80075aa:	589b      	ldr	r3, [r3, r2]
 80075ac:	2202      	movs	r2, #2
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2190      	movs	r1, #144	@ 0x90
 80075b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075b6:	23a4      	movs	r3, #164	@ 0xa4
 80075b8:	18fb      	adds	r3, r7, r3
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2208      	movs	r2, #8
 80075be:	4013      	ands	r3, r2
 80075c0:	d017      	beq.n	80075f2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075c2:	23a0      	movs	r3, #160	@ 0xa0
 80075c4:	18fb      	adds	r3, r7, r3
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2220      	movs	r2, #32
 80075ca:	4013      	ands	r3, r2
 80075cc:	d105      	bne.n	80075da <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80075ce:	239c      	movs	r3, #156	@ 0x9c
 80075d0:	18fb      	adds	r3, r7, r3
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a5b      	ldr	r2, [pc, #364]	@ (8007744 <HAL_UART_IRQHandler+0x2c0>)
 80075d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075d8:	d00b      	beq.n	80075f2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2208      	movs	r2, #8
 80075e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2290      	movs	r2, #144	@ 0x90
 80075e6:	589b      	ldr	r3, [r3, r2]
 80075e8:	2208      	movs	r2, #8
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2190      	movs	r1, #144	@ 0x90
 80075f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075f2:	23a4      	movs	r3, #164	@ 0xa4
 80075f4:	18fb      	adds	r3, r7, r3
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	2380      	movs	r3, #128	@ 0x80
 80075fa:	011b      	lsls	r3, r3, #4
 80075fc:	4013      	ands	r3, r2
 80075fe:	d013      	beq.n	8007628 <HAL_UART_IRQHandler+0x1a4>
 8007600:	23a0      	movs	r3, #160	@ 0xa0
 8007602:	18fb      	adds	r3, r7, r3
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	2380      	movs	r3, #128	@ 0x80
 8007608:	04db      	lsls	r3, r3, #19
 800760a:	4013      	ands	r3, r2
 800760c:	d00c      	beq.n	8007628 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2280      	movs	r2, #128	@ 0x80
 8007614:	0112      	lsls	r2, r2, #4
 8007616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2290      	movs	r2, #144	@ 0x90
 800761c:	589b      	ldr	r3, [r3, r2]
 800761e:	2220      	movs	r2, #32
 8007620:	431a      	orrs	r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2190      	movs	r1, #144	@ 0x90
 8007626:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2290      	movs	r2, #144	@ 0x90
 800762c:	589b      	ldr	r3, [r3, r2]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d100      	bne.n	8007634 <HAL_UART_IRQHandler+0x1b0>
 8007632:	e23d      	b.n	8007ab0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007634:	23a4      	movs	r3, #164	@ 0xa4
 8007636:	18fb      	adds	r3, r7, r3
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2220      	movs	r2, #32
 800763c:	4013      	ands	r3, r2
 800763e:	d015      	beq.n	800766c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007640:	23a0      	movs	r3, #160	@ 0xa0
 8007642:	18fb      	adds	r3, r7, r3
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2220      	movs	r2, #32
 8007648:	4013      	ands	r3, r2
 800764a:	d106      	bne.n	800765a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800764c:	239c      	movs	r3, #156	@ 0x9c
 800764e:	18fb      	adds	r3, r7, r3
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	2380      	movs	r3, #128	@ 0x80
 8007654:	055b      	lsls	r3, r3, #21
 8007656:	4013      	ands	r3, r2
 8007658:	d008      	beq.n	800766c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800765e:	2b00      	cmp	r3, #0
 8007660:	d004      	beq.n	800766c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	0010      	movs	r0, r2
 800766a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2290      	movs	r2, #144	@ 0x90
 8007670:	589b      	ldr	r3, [r3, r2]
 8007672:	2194      	movs	r1, #148	@ 0x94
 8007674:	187a      	adds	r2, r7, r1
 8007676:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	2240      	movs	r2, #64	@ 0x40
 8007680:	4013      	ands	r3, r2
 8007682:	2b40      	cmp	r3, #64	@ 0x40
 8007684:	d004      	beq.n	8007690 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007686:	187b      	adds	r3, r7, r1
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	2228      	movs	r2, #40	@ 0x28
 800768c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800768e:	d04c      	beq.n	800772a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	0018      	movs	r0, r3
 8007694:	f000 fdaa 	bl	80081ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	2240      	movs	r2, #64	@ 0x40
 80076a0:	4013      	ands	r3, r2
 80076a2:	2b40      	cmp	r3, #64	@ 0x40
 80076a4:	d13c      	bne.n	8007720 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076a6:	f3ef 8310 	mrs	r3, PRIMASK
 80076aa:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80076ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ae:	2090      	movs	r0, #144	@ 0x90
 80076b0:	183a      	adds	r2, r7, r0
 80076b2:	6013      	str	r3, [r2, #0]
 80076b4:	2301      	movs	r3, #1
 80076b6:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80076ba:	f383 8810 	msr	PRIMASK, r3
}
 80076be:	46c0      	nop			@ (mov r8, r8)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689a      	ldr	r2, [r3, #8]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2140      	movs	r1, #64	@ 0x40
 80076cc:	438a      	bics	r2, r1
 80076ce:	609a      	str	r2, [r3, #8]
 80076d0:	183b      	adds	r3, r7, r0
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80076d8:	f383 8810 	msr	PRIMASK, r3
}
 80076dc:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2280      	movs	r2, #128	@ 0x80
 80076e2:	589b      	ldr	r3, [r3, r2]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d016      	beq.n	8007716 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2280      	movs	r2, #128	@ 0x80
 80076ec:	589b      	ldr	r3, [r3, r2]
 80076ee:	4a17      	ldr	r2, [pc, #92]	@ (800774c <HAL_UART_IRQHandler+0x2c8>)
 80076f0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2280      	movs	r2, #128	@ 0x80
 80076f6:	589b      	ldr	r3, [r3, r2]
 80076f8:	0018      	movs	r0, r3
 80076fa:	f7fc fff9 	bl	80046f0 <HAL_DMA_Abort_IT>
 80076fe:	1e03      	subs	r3, r0, #0
 8007700:	d01c      	beq.n	800773c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2280      	movs	r2, #128	@ 0x80
 8007706:	589b      	ldr	r3, [r3, r2]
 8007708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	2180      	movs	r1, #128	@ 0x80
 800770e:	5852      	ldr	r2, [r2, r1]
 8007710:	0010      	movs	r0, r2
 8007712:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007714:	e012      	b.n	800773c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	0018      	movs	r0, r3
 800771a:	f000 f9e1 	bl	8007ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800771e:	e00d      	b.n	800773c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	0018      	movs	r0, r3
 8007724:	f000 f9dc 	bl	8007ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007728:	e008      	b.n	800773c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	0018      	movs	r0, r3
 800772e:	f000 f9d7 	bl	8007ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2290      	movs	r2, #144	@ 0x90
 8007736:	2100      	movs	r1, #0
 8007738:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800773a:	e1b9      	b.n	8007ab0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800773c:	46c0      	nop			@ (mov r8, r8)
    return;
 800773e:	e1b7      	b.n	8007ab0 <HAL_UART_IRQHandler+0x62c>
 8007740:	0000080f 	.word	0x0000080f
 8007744:	10000001 	.word	0x10000001
 8007748:	04000120 	.word	0x04000120
 800774c:	080082b9 	.word	0x080082b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007754:	2b01      	cmp	r3, #1
 8007756:	d000      	beq.n	800775a <HAL_UART_IRQHandler+0x2d6>
 8007758:	e13e      	b.n	80079d8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800775a:	23a4      	movs	r3, #164	@ 0xa4
 800775c:	18fb      	adds	r3, r7, r3
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2210      	movs	r2, #16
 8007762:	4013      	ands	r3, r2
 8007764:	d100      	bne.n	8007768 <HAL_UART_IRQHandler+0x2e4>
 8007766:	e137      	b.n	80079d8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007768:	23a0      	movs	r3, #160	@ 0xa0
 800776a:	18fb      	adds	r3, r7, r3
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2210      	movs	r2, #16
 8007770:	4013      	ands	r3, r2
 8007772:	d100      	bne.n	8007776 <HAL_UART_IRQHandler+0x2f2>
 8007774:	e130      	b.n	80079d8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2210      	movs	r2, #16
 800777c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	2240      	movs	r2, #64	@ 0x40
 8007786:	4013      	ands	r3, r2
 8007788:	2b40      	cmp	r3, #64	@ 0x40
 800778a:	d000      	beq.n	800778e <HAL_UART_IRQHandler+0x30a>
 800778c:	e0a4      	b.n	80078d8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2280      	movs	r2, #128	@ 0x80
 8007792:	589b      	ldr	r3, [r3, r2]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	217e      	movs	r1, #126	@ 0x7e
 800779a:	187b      	adds	r3, r7, r1
 800779c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800779e:	187b      	adds	r3, r7, r1
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d100      	bne.n	80077a8 <HAL_UART_IRQHandler+0x324>
 80077a6:	e185      	b.n	8007ab4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	225c      	movs	r2, #92	@ 0x5c
 80077ac:	5a9b      	ldrh	r3, [r3, r2]
 80077ae:	187a      	adds	r2, r7, r1
 80077b0:	8812      	ldrh	r2, [r2, #0]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d300      	bcc.n	80077b8 <HAL_UART_IRQHandler+0x334>
 80077b6:	e17d      	b.n	8007ab4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	187a      	adds	r2, r7, r1
 80077bc:	215e      	movs	r1, #94	@ 0x5e
 80077be:	8812      	ldrh	r2, [r2, #0]
 80077c0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2280      	movs	r2, #128	@ 0x80
 80077c6:	589b      	ldr	r3, [r3, r2]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2220      	movs	r2, #32
 80077ce:	4013      	ands	r3, r2
 80077d0:	d170      	bne.n	80078b4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077d2:	f3ef 8310 	mrs	r3, PRIMASK
 80077d6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80077d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077dc:	2301      	movs	r3, #1
 80077de:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e2:	f383 8810 	msr	PRIMASK, r3
}
 80077e6:	46c0      	nop			@ (mov r8, r8)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	49b4      	ldr	r1, [pc, #720]	@ (8007ac4 <HAL_UART_IRQHandler+0x640>)
 80077f4:	400a      	ands	r2, r1
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fe:	f383 8810 	msr	PRIMASK, r3
}
 8007802:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007804:	f3ef 8310 	mrs	r3, PRIMASK
 8007808:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800780a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780c:	677b      	str	r3, [r7, #116]	@ 0x74
 800780e:	2301      	movs	r3, #1
 8007810:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007814:	f383 8810 	msr	PRIMASK, r3
}
 8007818:	46c0      	nop			@ (mov r8, r8)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2101      	movs	r1, #1
 8007826:	438a      	bics	r2, r1
 8007828:	609a      	str	r2, [r3, #8]
 800782a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800782c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800782e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007830:	f383 8810 	msr	PRIMASK, r3
}
 8007834:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007836:	f3ef 8310 	mrs	r3, PRIMASK
 800783a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800783c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800783e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007840:	2301      	movs	r3, #1
 8007842:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007846:	f383 8810 	msr	PRIMASK, r3
}
 800784a:	46c0      	nop			@ (mov r8, r8)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	689a      	ldr	r2, [r3, #8]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	2140      	movs	r1, #64	@ 0x40
 8007858:	438a      	bics	r2, r1
 800785a:	609a      	str	r2, [r3, #8]
 800785c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800785e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007862:	f383 8810 	msr	PRIMASK, r3
}
 8007866:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	228c      	movs	r2, #140	@ 0x8c
 800786c:	2120      	movs	r1, #32
 800786e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007876:	f3ef 8310 	mrs	r3, PRIMASK
 800787a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800787c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800787e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007880:	2301      	movs	r3, #1
 8007882:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007884:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007886:	f383 8810 	msr	PRIMASK, r3
}
 800788a:	46c0      	nop			@ (mov r8, r8)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2110      	movs	r1, #16
 8007898:	438a      	bics	r2, r1
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800789e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078a2:	f383 8810 	msr	PRIMASK, r3
}
 80078a6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2280      	movs	r2, #128	@ 0x80
 80078ac:	589b      	ldr	r3, [r3, r2]
 80078ae:	0018      	movs	r0, r3
 80078b0:	f7fc febc 	bl	800462c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	225c      	movs	r2, #92	@ 0x5c
 80078be:	5a9a      	ldrh	r2, [r3, r2]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	215e      	movs	r1, #94	@ 0x5e
 80078c4:	5a5b      	ldrh	r3, [r3, r1]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	0011      	movs	r1, r2
 80078d0:	0018      	movs	r0, r3
 80078d2:	f000 f90d 	bl	8007af0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078d6:	e0ed      	b.n	8007ab4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	225c      	movs	r2, #92	@ 0x5c
 80078dc:	5a99      	ldrh	r1, [r3, r2]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	225e      	movs	r2, #94	@ 0x5e
 80078e2:	5a9b      	ldrh	r3, [r3, r2]
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	208e      	movs	r0, #142	@ 0x8e
 80078e8:	183b      	adds	r3, r7, r0
 80078ea:	1a8a      	subs	r2, r1, r2
 80078ec:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	225e      	movs	r2, #94	@ 0x5e
 80078f2:	5a9b      	ldrh	r3, [r3, r2]
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d100      	bne.n	80078fc <HAL_UART_IRQHandler+0x478>
 80078fa:	e0dd      	b.n	8007ab8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80078fc:	183b      	adds	r3, r7, r0
 80078fe:	881b      	ldrh	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d100      	bne.n	8007906 <HAL_UART_IRQHandler+0x482>
 8007904:	e0d8      	b.n	8007ab8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007906:	f3ef 8310 	mrs	r3, PRIMASK
 800790a:	60fb      	str	r3, [r7, #12]
  return(result);
 800790c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800790e:	2488      	movs	r4, #136	@ 0x88
 8007910:	193a      	adds	r2, r7, r4
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	2301      	movs	r3, #1
 8007916:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	f383 8810 	msr	PRIMASK, r3
}
 800791e:	46c0      	nop			@ (mov r8, r8)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4967      	ldr	r1, [pc, #412]	@ (8007ac8 <HAL_UART_IRQHandler+0x644>)
 800792c:	400a      	ands	r2, r1
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	193b      	adds	r3, r7, r4
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f383 8810 	msr	PRIMASK, r3
}
 800793c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800793e:	f3ef 8310 	mrs	r3, PRIMASK
 8007942:	61bb      	str	r3, [r7, #24]
  return(result);
 8007944:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007946:	2484      	movs	r4, #132	@ 0x84
 8007948:	193a      	adds	r2, r7, r4
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	2301      	movs	r3, #1
 800794e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	f383 8810 	msr	PRIMASK, r3
}
 8007956:	46c0      	nop			@ (mov r8, r8)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	689a      	ldr	r2, [r3, #8]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	495a      	ldr	r1, [pc, #360]	@ (8007acc <HAL_UART_IRQHandler+0x648>)
 8007964:	400a      	ands	r2, r1
 8007966:	609a      	str	r2, [r3, #8]
 8007968:	193b      	adds	r3, r7, r4
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	f383 8810 	msr	PRIMASK, r3
}
 8007974:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	228c      	movs	r2, #140	@ 0x8c
 800797a:	2120      	movs	r1, #32
 800797c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800798a:	f3ef 8310 	mrs	r3, PRIMASK
 800798e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007992:	2480      	movs	r4, #128	@ 0x80
 8007994:	193a      	adds	r2, r7, r4
 8007996:	6013      	str	r3, [r2, #0]
 8007998:	2301      	movs	r3, #1
 800799a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800799c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799e:	f383 8810 	msr	PRIMASK, r3
}
 80079a2:	46c0      	nop			@ (mov r8, r8)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2110      	movs	r1, #16
 80079b0:	438a      	bics	r2, r1
 80079b2:	601a      	str	r2, [r3, #0]
 80079b4:	193b      	adds	r3, r7, r4
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079bc:	f383 8810 	msr	PRIMASK, r3
}
 80079c0:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2202      	movs	r2, #2
 80079c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80079c8:	183b      	adds	r3, r7, r0
 80079ca:	881a      	ldrh	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	0011      	movs	r1, r2
 80079d0:	0018      	movs	r0, r3
 80079d2:	f000 f88d 	bl	8007af0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079d6:	e06f      	b.n	8007ab8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079d8:	23a4      	movs	r3, #164	@ 0xa4
 80079da:	18fb      	adds	r3, r7, r3
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	2380      	movs	r3, #128	@ 0x80
 80079e0:	035b      	lsls	r3, r3, #13
 80079e2:	4013      	ands	r3, r2
 80079e4:	d010      	beq.n	8007a08 <HAL_UART_IRQHandler+0x584>
 80079e6:	239c      	movs	r3, #156	@ 0x9c
 80079e8:	18fb      	adds	r3, r7, r3
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	2380      	movs	r3, #128	@ 0x80
 80079ee:	03db      	lsls	r3, r3, #15
 80079f0:	4013      	ands	r3, r2
 80079f2:	d009      	beq.n	8007a08 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2280      	movs	r2, #128	@ 0x80
 80079fa:	0352      	lsls	r2, r2, #13
 80079fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	0018      	movs	r0, r3
 8007a02:	f000 fc9c 	bl	800833e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a06:	e05a      	b.n	8007abe <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a08:	23a4      	movs	r3, #164	@ 0xa4
 8007a0a:	18fb      	adds	r3, r7, r3
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2280      	movs	r2, #128	@ 0x80
 8007a10:	4013      	ands	r3, r2
 8007a12:	d016      	beq.n	8007a42 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a14:	23a0      	movs	r3, #160	@ 0xa0
 8007a16:	18fb      	adds	r3, r7, r3
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2280      	movs	r2, #128	@ 0x80
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	d106      	bne.n	8007a2e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a20:	239c      	movs	r3, #156	@ 0x9c
 8007a22:	18fb      	adds	r3, r7, r3
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	2380      	movs	r3, #128	@ 0x80
 8007a28:	041b      	lsls	r3, r3, #16
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	d009      	beq.n	8007a42 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d042      	beq.n	8007abc <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	0010      	movs	r0, r2
 8007a3e:	4798      	blx	r3
    }
    return;
 8007a40:	e03c      	b.n	8007abc <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a42:	23a4      	movs	r3, #164	@ 0xa4
 8007a44:	18fb      	adds	r3, r7, r3
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2240      	movs	r2, #64	@ 0x40
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	d00a      	beq.n	8007a64 <HAL_UART_IRQHandler+0x5e0>
 8007a4e:	23a0      	movs	r3, #160	@ 0xa0
 8007a50:	18fb      	adds	r3, r7, r3
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	2240      	movs	r2, #64	@ 0x40
 8007a56:	4013      	ands	r3, r2
 8007a58:	d004      	beq.n	8007a64 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	0018      	movs	r0, r3
 8007a5e:	f000 fc42 	bl	80082e6 <UART_EndTransmit_IT>
    return;
 8007a62:	e02c      	b.n	8007abe <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a64:	23a4      	movs	r3, #164	@ 0xa4
 8007a66:	18fb      	adds	r3, r7, r3
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	2380      	movs	r3, #128	@ 0x80
 8007a6c:	041b      	lsls	r3, r3, #16
 8007a6e:	4013      	ands	r3, r2
 8007a70:	d00b      	beq.n	8007a8a <HAL_UART_IRQHandler+0x606>
 8007a72:	23a0      	movs	r3, #160	@ 0xa0
 8007a74:	18fb      	adds	r3, r7, r3
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	2380      	movs	r3, #128	@ 0x80
 8007a7a:	05db      	lsls	r3, r3, #23
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	d004      	beq.n	8007a8a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	0018      	movs	r0, r3
 8007a84:	f000 fc6b 	bl	800835e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a88:	e019      	b.n	8007abe <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a8a:	23a4      	movs	r3, #164	@ 0xa4
 8007a8c:	18fb      	adds	r3, r7, r3
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	2380      	movs	r3, #128	@ 0x80
 8007a92:	045b      	lsls	r3, r3, #17
 8007a94:	4013      	ands	r3, r2
 8007a96:	d012      	beq.n	8007abe <HAL_UART_IRQHandler+0x63a>
 8007a98:	23a0      	movs	r3, #160	@ 0xa0
 8007a9a:	18fb      	adds	r3, r7, r3
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	da0d      	bge.n	8007abe <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	0018      	movs	r0, r3
 8007aa6:	f000 fc52 	bl	800834e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007aaa:	e008      	b.n	8007abe <HAL_UART_IRQHandler+0x63a>
      return;
 8007aac:	46c0      	nop			@ (mov r8, r8)
 8007aae:	e006      	b.n	8007abe <HAL_UART_IRQHandler+0x63a>
    return;
 8007ab0:	46c0      	nop			@ (mov r8, r8)
 8007ab2:	e004      	b.n	8007abe <HAL_UART_IRQHandler+0x63a>
      return;
 8007ab4:	46c0      	nop			@ (mov r8, r8)
 8007ab6:	e002      	b.n	8007abe <HAL_UART_IRQHandler+0x63a>
      return;
 8007ab8:	46c0      	nop			@ (mov r8, r8)
 8007aba:	e000      	b.n	8007abe <HAL_UART_IRQHandler+0x63a>
    return;
 8007abc:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	b02a      	add	sp, #168	@ 0xa8
 8007ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8007ac4:	fffffeff 	.word	0xfffffeff
 8007ac8:	fffffedf 	.word	0xfffffedf
 8007acc:	effffffe 	.word	0xeffffffe

08007ad0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ad8:	46c0      	nop			@ (mov r8, r8)
 8007ada:	46bd      	mov	sp, r7
 8007adc:	b002      	add	sp, #8
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ae8:	46c0      	nop			@ (mov r8, r8)
 8007aea:	46bd      	mov	sp, r7
 8007aec:	b002      	add	sp, #8
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	000a      	movs	r2, r1
 8007afa:	1cbb      	adds	r3, r7, #2
 8007afc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007afe:	46c0      	nop			@ (mov r8, r8)
 8007b00:	46bd      	mov	sp, r7
 8007b02:	b002      	add	sp, #8
 8007b04:	bd80      	pop	{r7, pc}
	...

08007b08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b10:	231a      	movs	r3, #26
 8007b12:	18fb      	adds	r3, r7, r3
 8007b14:	2200      	movs	r2, #0
 8007b16:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689a      	ldr	r2, [r3, #8]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	431a      	orrs	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	69db      	ldr	r3, [r3, #28]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4abc      	ldr	r2, [pc, #752]	@ (8007e28 <UART_SetConfig+0x320>)
 8007b38:	4013      	ands	r3, r2
 8007b3a:	0019      	movs	r1, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	69fa      	ldr	r2, [r7, #28]
 8007b42:	430a      	orrs	r2, r1
 8007b44:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	4ab7      	ldr	r2, [pc, #732]	@ (8007e2c <UART_SetConfig+0x324>)
 8007b4e:	4013      	ands	r3, r2
 8007b50:	0019      	movs	r1, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	69fa      	ldr	r2, [r7, #28]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	4aae      	ldr	r2, [pc, #696]	@ (8007e30 <UART_SetConfig+0x328>)
 8007b76:	4013      	ands	r3, r2
 8007b78:	0019      	movs	r1, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	69fa      	ldr	r2, [r7, #28]
 8007b80:	430a      	orrs	r2, r1
 8007b82:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8a:	220f      	movs	r2, #15
 8007b8c:	4393      	bics	r3, r2
 8007b8e:	0019      	movs	r1, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4aa4      	ldr	r2, [pc, #656]	@ (8007e34 <UART_SetConfig+0x32c>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d127      	bne.n	8007bf6 <UART_SetConfig+0xee>
 8007ba6:	4ba4      	ldr	r3, [pc, #656]	@ (8007e38 <UART_SetConfig+0x330>)
 8007ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007baa:	2203      	movs	r2, #3
 8007bac:	4013      	ands	r3, r2
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d017      	beq.n	8007be2 <UART_SetConfig+0xda>
 8007bb2:	d81b      	bhi.n	8007bec <UART_SetConfig+0xe4>
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d00a      	beq.n	8007bce <UART_SetConfig+0xc6>
 8007bb8:	d818      	bhi.n	8007bec <UART_SetConfig+0xe4>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <UART_SetConfig+0xbc>
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d00a      	beq.n	8007bd8 <UART_SetConfig+0xd0>
 8007bc2:	e013      	b.n	8007bec <UART_SetConfig+0xe4>
 8007bc4:	231b      	movs	r3, #27
 8007bc6:	18fb      	adds	r3, r7, r3
 8007bc8:	2200      	movs	r2, #0
 8007bca:	701a      	strb	r2, [r3, #0]
 8007bcc:	e058      	b.n	8007c80 <UART_SetConfig+0x178>
 8007bce:	231b      	movs	r3, #27
 8007bd0:	18fb      	adds	r3, r7, r3
 8007bd2:	2202      	movs	r2, #2
 8007bd4:	701a      	strb	r2, [r3, #0]
 8007bd6:	e053      	b.n	8007c80 <UART_SetConfig+0x178>
 8007bd8:	231b      	movs	r3, #27
 8007bda:	18fb      	adds	r3, r7, r3
 8007bdc:	2204      	movs	r2, #4
 8007bde:	701a      	strb	r2, [r3, #0]
 8007be0:	e04e      	b.n	8007c80 <UART_SetConfig+0x178>
 8007be2:	231b      	movs	r3, #27
 8007be4:	18fb      	adds	r3, r7, r3
 8007be6:	2208      	movs	r2, #8
 8007be8:	701a      	strb	r2, [r3, #0]
 8007bea:	e049      	b.n	8007c80 <UART_SetConfig+0x178>
 8007bec:	231b      	movs	r3, #27
 8007bee:	18fb      	adds	r3, r7, r3
 8007bf0:	2210      	movs	r2, #16
 8007bf2:	701a      	strb	r2, [r3, #0]
 8007bf4:	e044      	b.n	8007c80 <UART_SetConfig+0x178>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a90      	ldr	r2, [pc, #576]	@ (8007e3c <UART_SetConfig+0x334>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d127      	bne.n	8007c50 <UART_SetConfig+0x148>
 8007c00:	4b8d      	ldr	r3, [pc, #564]	@ (8007e38 <UART_SetConfig+0x330>)
 8007c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c04:	220c      	movs	r2, #12
 8007c06:	4013      	ands	r3, r2
 8007c08:	2b0c      	cmp	r3, #12
 8007c0a:	d017      	beq.n	8007c3c <UART_SetConfig+0x134>
 8007c0c:	d81b      	bhi.n	8007c46 <UART_SetConfig+0x13e>
 8007c0e:	2b08      	cmp	r3, #8
 8007c10:	d00a      	beq.n	8007c28 <UART_SetConfig+0x120>
 8007c12:	d818      	bhi.n	8007c46 <UART_SetConfig+0x13e>
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <UART_SetConfig+0x116>
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d00a      	beq.n	8007c32 <UART_SetConfig+0x12a>
 8007c1c:	e013      	b.n	8007c46 <UART_SetConfig+0x13e>
 8007c1e:	231b      	movs	r3, #27
 8007c20:	18fb      	adds	r3, r7, r3
 8007c22:	2200      	movs	r2, #0
 8007c24:	701a      	strb	r2, [r3, #0]
 8007c26:	e02b      	b.n	8007c80 <UART_SetConfig+0x178>
 8007c28:	231b      	movs	r3, #27
 8007c2a:	18fb      	adds	r3, r7, r3
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	701a      	strb	r2, [r3, #0]
 8007c30:	e026      	b.n	8007c80 <UART_SetConfig+0x178>
 8007c32:	231b      	movs	r3, #27
 8007c34:	18fb      	adds	r3, r7, r3
 8007c36:	2204      	movs	r2, #4
 8007c38:	701a      	strb	r2, [r3, #0]
 8007c3a:	e021      	b.n	8007c80 <UART_SetConfig+0x178>
 8007c3c:	231b      	movs	r3, #27
 8007c3e:	18fb      	adds	r3, r7, r3
 8007c40:	2208      	movs	r2, #8
 8007c42:	701a      	strb	r2, [r3, #0]
 8007c44:	e01c      	b.n	8007c80 <UART_SetConfig+0x178>
 8007c46:	231b      	movs	r3, #27
 8007c48:	18fb      	adds	r3, r7, r3
 8007c4a:	2210      	movs	r2, #16
 8007c4c:	701a      	strb	r2, [r3, #0]
 8007c4e:	e017      	b.n	8007c80 <UART_SetConfig+0x178>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a7a      	ldr	r2, [pc, #488]	@ (8007e40 <UART_SetConfig+0x338>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d104      	bne.n	8007c64 <UART_SetConfig+0x15c>
 8007c5a:	231b      	movs	r3, #27
 8007c5c:	18fb      	adds	r3, r7, r3
 8007c5e:	2200      	movs	r2, #0
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	e00d      	b.n	8007c80 <UART_SetConfig+0x178>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a76      	ldr	r2, [pc, #472]	@ (8007e44 <UART_SetConfig+0x33c>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d104      	bne.n	8007c78 <UART_SetConfig+0x170>
 8007c6e:	231b      	movs	r3, #27
 8007c70:	18fb      	adds	r3, r7, r3
 8007c72:	2200      	movs	r2, #0
 8007c74:	701a      	strb	r2, [r3, #0]
 8007c76:	e003      	b.n	8007c80 <UART_SetConfig+0x178>
 8007c78:	231b      	movs	r3, #27
 8007c7a:	18fb      	adds	r3, r7, r3
 8007c7c:	2210      	movs	r2, #16
 8007c7e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	69da      	ldr	r2, [r3, #28]
 8007c84:	2380      	movs	r3, #128	@ 0x80
 8007c86:	021b      	lsls	r3, r3, #8
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d000      	beq.n	8007c8e <UART_SetConfig+0x186>
 8007c8c:	e065      	b.n	8007d5a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8007c8e:	231b      	movs	r3, #27
 8007c90:	18fb      	adds	r3, r7, r3
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b08      	cmp	r3, #8
 8007c96:	d015      	beq.n	8007cc4 <UART_SetConfig+0x1bc>
 8007c98:	dc18      	bgt.n	8007ccc <UART_SetConfig+0x1c4>
 8007c9a:	2b04      	cmp	r3, #4
 8007c9c:	d00d      	beq.n	8007cba <UART_SetConfig+0x1b2>
 8007c9e:	dc15      	bgt.n	8007ccc <UART_SetConfig+0x1c4>
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <UART_SetConfig+0x1a2>
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d005      	beq.n	8007cb4 <UART_SetConfig+0x1ac>
 8007ca8:	e010      	b.n	8007ccc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007caa:	f7fd fd69 	bl	8005780 <HAL_RCC_GetPCLK1Freq>
 8007cae:	0003      	movs	r3, r0
 8007cb0:	617b      	str	r3, [r7, #20]
        break;
 8007cb2:	e012      	b.n	8007cda <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cb4:	4b64      	ldr	r3, [pc, #400]	@ (8007e48 <UART_SetConfig+0x340>)
 8007cb6:	617b      	str	r3, [r7, #20]
        break;
 8007cb8:	e00f      	b.n	8007cda <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cba:	f7fd fcd5 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8007cbe:	0003      	movs	r3, r0
 8007cc0:	617b      	str	r3, [r7, #20]
        break;
 8007cc2:	e00a      	b.n	8007cda <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cc4:	2380      	movs	r3, #128	@ 0x80
 8007cc6:	021b      	lsls	r3, r3, #8
 8007cc8:	617b      	str	r3, [r7, #20]
        break;
 8007cca:	e006      	b.n	8007cda <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007cd0:	231a      	movs	r3, #26
 8007cd2:	18fb      	adds	r3, r7, r3
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	701a      	strb	r2, [r3, #0]
        break;
 8007cd8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d100      	bne.n	8007ce2 <UART_SetConfig+0x1da>
 8007ce0:	e08d      	b.n	8007dfe <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ce6:	4b59      	ldr	r3, [pc, #356]	@ (8007e4c <UART_SetConfig+0x344>)
 8007ce8:	0052      	lsls	r2, r2, #1
 8007cea:	5ad3      	ldrh	r3, [r2, r3]
 8007cec:	0019      	movs	r1, r3
 8007cee:	6978      	ldr	r0, [r7, #20]
 8007cf0:	f7f8 fa18 	bl	8000124 <__udivsi3>
 8007cf4:	0003      	movs	r3, r0
 8007cf6:	005a      	lsls	r2, r3, #1
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	085b      	lsrs	r3, r3, #1
 8007cfe:	18d2      	adds	r2, r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	0019      	movs	r1, r3
 8007d06:	0010      	movs	r0, r2
 8007d08:	f7f8 fa0c 	bl	8000124 <__udivsi3>
 8007d0c:	0003      	movs	r3, r0
 8007d0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	2b0f      	cmp	r3, #15
 8007d14:	d91c      	bls.n	8007d50 <UART_SetConfig+0x248>
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	2380      	movs	r3, #128	@ 0x80
 8007d1a:	025b      	lsls	r3, r3, #9
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d217      	bcs.n	8007d50 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	200e      	movs	r0, #14
 8007d26:	183b      	adds	r3, r7, r0
 8007d28:	210f      	movs	r1, #15
 8007d2a:	438a      	bics	r2, r1
 8007d2c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	085b      	lsrs	r3, r3, #1
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	2207      	movs	r2, #7
 8007d36:	4013      	ands	r3, r2
 8007d38:	b299      	uxth	r1, r3
 8007d3a:	183b      	adds	r3, r7, r0
 8007d3c:	183a      	adds	r2, r7, r0
 8007d3e:	8812      	ldrh	r2, [r2, #0]
 8007d40:	430a      	orrs	r2, r1
 8007d42:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	183a      	adds	r2, r7, r0
 8007d4a:	8812      	ldrh	r2, [r2, #0]
 8007d4c:	60da      	str	r2, [r3, #12]
 8007d4e:	e056      	b.n	8007dfe <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007d50:	231a      	movs	r3, #26
 8007d52:	18fb      	adds	r3, r7, r3
 8007d54:	2201      	movs	r2, #1
 8007d56:	701a      	strb	r2, [r3, #0]
 8007d58:	e051      	b.n	8007dfe <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d5a:	231b      	movs	r3, #27
 8007d5c:	18fb      	adds	r3, r7, r3
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b08      	cmp	r3, #8
 8007d62:	d015      	beq.n	8007d90 <UART_SetConfig+0x288>
 8007d64:	dc18      	bgt.n	8007d98 <UART_SetConfig+0x290>
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d00d      	beq.n	8007d86 <UART_SetConfig+0x27e>
 8007d6a:	dc15      	bgt.n	8007d98 <UART_SetConfig+0x290>
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <UART_SetConfig+0x26e>
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d005      	beq.n	8007d80 <UART_SetConfig+0x278>
 8007d74:	e010      	b.n	8007d98 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d76:	f7fd fd03 	bl	8005780 <HAL_RCC_GetPCLK1Freq>
 8007d7a:	0003      	movs	r3, r0
 8007d7c:	617b      	str	r3, [r7, #20]
        break;
 8007d7e:	e012      	b.n	8007da6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d80:	4b31      	ldr	r3, [pc, #196]	@ (8007e48 <UART_SetConfig+0x340>)
 8007d82:	617b      	str	r3, [r7, #20]
        break;
 8007d84:	e00f      	b.n	8007da6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d86:	f7fd fc6f 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8007d8a:	0003      	movs	r3, r0
 8007d8c:	617b      	str	r3, [r7, #20]
        break;
 8007d8e:	e00a      	b.n	8007da6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d90:	2380      	movs	r3, #128	@ 0x80
 8007d92:	021b      	lsls	r3, r3, #8
 8007d94:	617b      	str	r3, [r7, #20]
        break;
 8007d96:	e006      	b.n	8007da6 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007d9c:	231a      	movs	r3, #26
 8007d9e:	18fb      	adds	r3, r7, r3
 8007da0:	2201      	movs	r2, #1
 8007da2:	701a      	strb	r2, [r3, #0]
        break;
 8007da4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d028      	beq.n	8007dfe <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007db0:	4b26      	ldr	r3, [pc, #152]	@ (8007e4c <UART_SetConfig+0x344>)
 8007db2:	0052      	lsls	r2, r2, #1
 8007db4:	5ad3      	ldrh	r3, [r2, r3]
 8007db6:	0019      	movs	r1, r3
 8007db8:	6978      	ldr	r0, [r7, #20]
 8007dba:	f7f8 f9b3 	bl	8000124 <__udivsi3>
 8007dbe:	0003      	movs	r3, r0
 8007dc0:	001a      	movs	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	085b      	lsrs	r3, r3, #1
 8007dc8:	18d2      	adds	r2, r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	0019      	movs	r1, r3
 8007dd0:	0010      	movs	r0, r2
 8007dd2:	f7f8 f9a7 	bl	8000124 <__udivsi3>
 8007dd6:	0003      	movs	r3, r0
 8007dd8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	2b0f      	cmp	r3, #15
 8007dde:	d90a      	bls.n	8007df6 <UART_SetConfig+0x2ee>
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	2380      	movs	r3, #128	@ 0x80
 8007de4:	025b      	lsls	r3, r3, #9
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d205      	bcs.n	8007df6 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	60da      	str	r2, [r3, #12]
 8007df4:	e003      	b.n	8007dfe <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007df6:	231a      	movs	r3, #26
 8007df8:	18fb      	adds	r3, r7, r3
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	226a      	movs	r2, #106	@ 0x6a
 8007e02:	2101      	movs	r1, #1
 8007e04:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2268      	movs	r2, #104	@ 0x68
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007e1a:	231a      	movs	r3, #26
 8007e1c:	18fb      	adds	r3, r7, r3
 8007e1e:	781b      	ldrb	r3, [r3, #0]
}
 8007e20:	0018      	movs	r0, r3
 8007e22:	46bd      	mov	sp, r7
 8007e24:	b008      	add	sp, #32
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	cfff69f3 	.word	0xcfff69f3
 8007e2c:	ffffcfff 	.word	0xffffcfff
 8007e30:	11fff4ff 	.word	0x11fff4ff
 8007e34:	40013800 	.word	0x40013800
 8007e38:	40021000 	.word	0x40021000
 8007e3c:	40004400 	.word	0x40004400
 8007e40:	40004800 	.word	0x40004800
 8007e44:	40004c00 	.word	0x40004c00
 8007e48:	00f42400 	.word	0x00f42400
 8007e4c:	08009934 	.word	0x08009934

08007e50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e5c:	2208      	movs	r2, #8
 8007e5e:	4013      	ands	r3, r2
 8007e60:	d00b      	beq.n	8007e7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	4a4a      	ldr	r2, [pc, #296]	@ (8007f94 <UART_AdvFeatureConfig+0x144>)
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	0019      	movs	r1, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e7e:	2201      	movs	r2, #1
 8007e80:	4013      	ands	r3, r2
 8007e82:	d00b      	beq.n	8007e9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	4a43      	ldr	r2, [pc, #268]	@ (8007f98 <UART_AdvFeatureConfig+0x148>)
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	0019      	movs	r1, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	d00b      	beq.n	8007ebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	4a3b      	ldr	r2, [pc, #236]	@ (8007f9c <UART_AdvFeatureConfig+0x14c>)
 8007eae:	4013      	ands	r3, r2
 8007eb0:	0019      	movs	r1, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec2:	2204      	movs	r2, #4
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	d00b      	beq.n	8007ee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	4a34      	ldr	r2, [pc, #208]	@ (8007fa0 <UART_AdvFeatureConfig+0x150>)
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	0019      	movs	r1, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	430a      	orrs	r2, r1
 8007ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee4:	2210      	movs	r2, #16
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	d00b      	beq.n	8007f02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8007fa4 <UART_AdvFeatureConfig+0x154>)
 8007ef2:	4013      	ands	r3, r2
 8007ef4:	0019      	movs	r1, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f06:	2220      	movs	r2, #32
 8007f08:	4013      	ands	r3, r2
 8007f0a:	d00b      	beq.n	8007f24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	4a25      	ldr	r2, [pc, #148]	@ (8007fa8 <UART_AdvFeatureConfig+0x158>)
 8007f14:	4013      	ands	r3, r2
 8007f16:	0019      	movs	r1, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f28:	2240      	movs	r2, #64	@ 0x40
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	d01d      	beq.n	8007f6a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	4a1d      	ldr	r2, [pc, #116]	@ (8007fac <UART_AdvFeatureConfig+0x15c>)
 8007f36:	4013      	ands	r3, r2
 8007f38:	0019      	movs	r1, r3
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f4a:	2380      	movs	r3, #128	@ 0x80
 8007f4c:	035b      	lsls	r3, r3, #13
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d10b      	bne.n	8007f6a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	4a15      	ldr	r2, [pc, #84]	@ (8007fb0 <UART_AdvFeatureConfig+0x160>)
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	0019      	movs	r1, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f6e:	2280      	movs	r2, #128	@ 0x80
 8007f70:	4013      	ands	r3, r2
 8007f72:	d00b      	beq.n	8007f8c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	4a0e      	ldr	r2, [pc, #56]	@ (8007fb4 <UART_AdvFeatureConfig+0x164>)
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	0019      	movs	r1, r3
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	430a      	orrs	r2, r1
 8007f8a:	605a      	str	r2, [r3, #4]
  }
}
 8007f8c:	46c0      	nop			@ (mov r8, r8)
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	b002      	add	sp, #8
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	ffff7fff 	.word	0xffff7fff
 8007f98:	fffdffff 	.word	0xfffdffff
 8007f9c:	fffeffff 	.word	0xfffeffff
 8007fa0:	fffbffff 	.word	0xfffbffff
 8007fa4:	ffffefff 	.word	0xffffefff
 8007fa8:	ffffdfff 	.word	0xffffdfff
 8007fac:	ffefffff 	.word	0xffefffff
 8007fb0:	ff9fffff 	.word	0xff9fffff
 8007fb4:	fff7ffff 	.word	0xfff7ffff

08007fb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b092      	sub	sp, #72	@ 0x48
 8007fbc:	af02      	add	r7, sp, #8
 8007fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2290      	movs	r2, #144	@ 0x90
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fc8:	f7fc f914 	bl	80041f4 <HAL_GetTick>
 8007fcc:	0003      	movs	r3, r0
 8007fce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2208      	movs	r2, #8
 8007fd8:	4013      	ands	r3, r2
 8007fda:	2b08      	cmp	r3, #8
 8007fdc:	d12d      	bne.n	800803a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fe0:	2280      	movs	r2, #128	@ 0x80
 8007fe2:	0391      	lsls	r1, r2, #14
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	4a47      	ldr	r2, [pc, #284]	@ (8008104 <UART_CheckIdleState+0x14c>)
 8007fe8:	9200      	str	r2, [sp, #0]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f000 f88e 	bl	800810c <UART_WaitOnFlagUntilTimeout>
 8007ff0:	1e03      	subs	r3, r0, #0
 8007ff2:	d022      	beq.n	800803a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ffc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ffe:	2301      	movs	r3, #1
 8008000:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008004:	f383 8810 	msr	PRIMASK, r3
}
 8008008:	46c0      	nop			@ (mov r8, r8)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2180      	movs	r1, #128	@ 0x80
 8008016:	438a      	bics	r2, r1
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800801e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008020:	f383 8810 	msr	PRIMASK, r3
}
 8008024:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2288      	movs	r2, #136	@ 0x88
 800802a:	2120      	movs	r1, #32
 800802c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2284      	movs	r2, #132	@ 0x84
 8008032:	2100      	movs	r1, #0
 8008034:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e060      	b.n	80080fc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2204      	movs	r2, #4
 8008042:	4013      	ands	r3, r2
 8008044:	2b04      	cmp	r3, #4
 8008046:	d146      	bne.n	80080d6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800804a:	2280      	movs	r2, #128	@ 0x80
 800804c:	03d1      	lsls	r1, r2, #15
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	4a2c      	ldr	r2, [pc, #176]	@ (8008104 <UART_CheckIdleState+0x14c>)
 8008052:	9200      	str	r2, [sp, #0]
 8008054:	2200      	movs	r2, #0
 8008056:	f000 f859 	bl	800810c <UART_WaitOnFlagUntilTimeout>
 800805a:	1e03      	subs	r3, r0, #0
 800805c:	d03b      	beq.n	80080d6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800805e:	f3ef 8310 	mrs	r3, PRIMASK
 8008062:	60fb      	str	r3, [r7, #12]
  return(result);
 8008064:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008066:	637b      	str	r3, [r7, #52]	@ 0x34
 8008068:	2301      	movs	r3, #1
 800806a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	f383 8810 	msr	PRIMASK, r3
}
 8008072:	46c0      	nop			@ (mov r8, r8)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4922      	ldr	r1, [pc, #136]	@ (8008108 <UART_CheckIdleState+0x150>)
 8008080:	400a      	ands	r2, r1
 8008082:	601a      	str	r2, [r3, #0]
 8008084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008086:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f383 8810 	msr	PRIMASK, r3
}
 800808e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008090:	f3ef 8310 	mrs	r3, PRIMASK
 8008094:	61bb      	str	r3, [r7, #24]
  return(result);
 8008096:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008098:	633b      	str	r3, [r7, #48]	@ 0x30
 800809a:	2301      	movs	r3, #1
 800809c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	f383 8810 	msr	PRIMASK, r3
}
 80080a4:	46c0      	nop			@ (mov r8, r8)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689a      	ldr	r2, [r3, #8]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2101      	movs	r1, #1
 80080b2:	438a      	bics	r2, r1
 80080b4:	609a      	str	r2, [r3, #8]
 80080b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	f383 8810 	msr	PRIMASK, r3
}
 80080c0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	228c      	movs	r2, #140	@ 0x8c
 80080c6:	2120      	movs	r1, #32
 80080c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2284      	movs	r2, #132	@ 0x84
 80080ce:	2100      	movs	r1, #0
 80080d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e012      	b.n	80080fc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2288      	movs	r2, #136	@ 0x88
 80080da:	2120      	movs	r1, #32
 80080dc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	228c      	movs	r2, #140	@ 0x8c
 80080e2:	2120      	movs	r1, #32
 80080e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2284      	movs	r2, #132	@ 0x84
 80080f6:	2100      	movs	r1, #0
 80080f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	0018      	movs	r0, r3
 80080fe:	46bd      	mov	sp, r7
 8008100:	b010      	add	sp, #64	@ 0x40
 8008102:	bd80      	pop	{r7, pc}
 8008104:	01ffffff 	.word	0x01ffffff
 8008108:	fffffedf 	.word	0xfffffedf

0800810c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	603b      	str	r3, [r7, #0]
 8008118:	1dfb      	adds	r3, r7, #7
 800811a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800811c:	e051      	b.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	3301      	adds	r3, #1
 8008122:	d04e      	beq.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008124:	f7fc f866 	bl	80041f4 <HAL_GetTick>
 8008128:	0002      	movs	r2, r0
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	69ba      	ldr	r2, [r7, #24]
 8008130:	429a      	cmp	r2, r3
 8008132:	d302      	bcc.n	800813a <UART_WaitOnFlagUntilTimeout+0x2e>
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	e051      	b.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2204      	movs	r2, #4
 8008146:	4013      	ands	r3, r2
 8008148:	d03b      	beq.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	2b80      	cmp	r3, #128	@ 0x80
 800814e:	d038      	beq.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b40      	cmp	r3, #64	@ 0x40
 8008154:	d035      	beq.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	69db      	ldr	r3, [r3, #28]
 800815c:	2208      	movs	r2, #8
 800815e:	4013      	ands	r3, r2
 8008160:	2b08      	cmp	r3, #8
 8008162:	d111      	bne.n	8008188 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2208      	movs	r2, #8
 800816a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	0018      	movs	r0, r3
 8008170:	f000 f83c 	bl	80081ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2290      	movs	r2, #144	@ 0x90
 8008178:	2108      	movs	r1, #8
 800817a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2284      	movs	r2, #132	@ 0x84
 8008180:	2100      	movs	r1, #0
 8008182:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e02c      	b.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	69da      	ldr	r2, [r3, #28]
 800818e:	2380      	movs	r3, #128	@ 0x80
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	401a      	ands	r2, r3
 8008194:	2380      	movs	r3, #128	@ 0x80
 8008196:	011b      	lsls	r3, r3, #4
 8008198:	429a      	cmp	r2, r3
 800819a:	d112      	bne.n	80081c2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2280      	movs	r2, #128	@ 0x80
 80081a2:	0112      	lsls	r2, r2, #4
 80081a4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	0018      	movs	r0, r3
 80081aa:	f000 f81f 	bl	80081ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2290      	movs	r2, #144	@ 0x90
 80081b2:	2120      	movs	r1, #32
 80081b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2284      	movs	r2, #132	@ 0x84
 80081ba:	2100      	movs	r1, #0
 80081bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e00f      	b.n	80081e2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	69db      	ldr	r3, [r3, #28]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	4013      	ands	r3, r2
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	425a      	negs	r2, r3
 80081d2:	4153      	adcs	r3, r2
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	001a      	movs	r2, r3
 80081d8:	1dfb      	adds	r3, r7, #7
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	429a      	cmp	r2, r3
 80081de:	d09e      	beq.n	800811e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	0018      	movs	r0, r3
 80081e4:	46bd      	mov	sp, r7
 80081e6:	b004      	add	sp, #16
 80081e8:	bd80      	pop	{r7, pc}
	...

080081ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08e      	sub	sp, #56	@ 0x38
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081f4:	f3ef 8310 	mrs	r3, PRIMASK
 80081f8:	617b      	str	r3, [r7, #20]
  return(result);
 80081fa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081fe:	2301      	movs	r3, #1
 8008200:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	f383 8810 	msr	PRIMASK, r3
}
 8008208:	46c0      	nop			@ (mov r8, r8)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4926      	ldr	r1, [pc, #152]	@ (80082b0 <UART_EndRxTransfer+0xc4>)
 8008216:	400a      	ands	r2, r1
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800821c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	f383 8810 	msr	PRIMASK, r3
}
 8008224:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008226:	f3ef 8310 	mrs	r3, PRIMASK
 800822a:	623b      	str	r3, [r7, #32]
  return(result);
 800822c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800822e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008230:	2301      	movs	r3, #1
 8008232:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008236:	f383 8810 	msr	PRIMASK, r3
}
 800823a:	46c0      	nop			@ (mov r8, r8)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689a      	ldr	r2, [r3, #8]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	491b      	ldr	r1, [pc, #108]	@ (80082b4 <UART_EndRxTransfer+0xc8>)
 8008248:	400a      	ands	r2, r1
 800824a:	609a      	str	r2, [r3, #8]
 800824c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008252:	f383 8810 	msr	PRIMASK, r3
}
 8008256:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800825c:	2b01      	cmp	r3, #1
 800825e:	d118      	bne.n	8008292 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008260:	f3ef 8310 	mrs	r3, PRIMASK
 8008264:	60bb      	str	r3, [r7, #8]
  return(result);
 8008266:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008268:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800826a:	2301      	movs	r3, #1
 800826c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	f383 8810 	msr	PRIMASK, r3
}
 8008274:	46c0      	nop			@ (mov r8, r8)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2110      	movs	r1, #16
 8008282:	438a      	bics	r2, r1
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008288:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	f383 8810 	msr	PRIMASK, r3
}
 8008290:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	228c      	movs	r2, #140	@ 0x8c
 8008296:	2120      	movs	r1, #32
 8008298:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80082a6:	46c0      	nop			@ (mov r8, r8)
 80082a8:	46bd      	mov	sp, r7
 80082aa:	b00e      	add	sp, #56	@ 0x38
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	46c0      	nop			@ (mov r8, r8)
 80082b0:	fffffedf 	.word	0xfffffedf
 80082b4:	effffffe 	.word	0xeffffffe

080082b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	225e      	movs	r2, #94	@ 0x5e
 80082ca:	2100      	movs	r1, #0
 80082cc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2256      	movs	r2, #86	@ 0x56
 80082d2:	2100      	movs	r1, #0
 80082d4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	0018      	movs	r0, r3
 80082da:	f7ff fc01 	bl	8007ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082de:	46c0      	nop			@ (mov r8, r8)
 80082e0:	46bd      	mov	sp, r7
 80082e2:	b004      	add	sp, #16
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b086      	sub	sp, #24
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082ee:	f3ef 8310 	mrs	r3, PRIMASK
 80082f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80082f4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	2301      	movs	r3, #1
 80082fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f383 8810 	msr	PRIMASK, r3
}
 8008302:	46c0      	nop			@ (mov r8, r8)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2140      	movs	r1, #64	@ 0x40
 8008310:	438a      	bics	r2, r1
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	f383 8810 	msr	PRIMASK, r3
}
 800831e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2288      	movs	r2, #136	@ 0x88
 8008324:	2120      	movs	r1, #32
 8008326:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	0018      	movs	r0, r3
 8008332:	f7ff fbcd 	bl	8007ad0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008336:	46c0      	nop			@ (mov r8, r8)
 8008338:	46bd      	mov	sp, r7
 800833a:	b006      	add	sp, #24
 800833c:	bd80      	pop	{r7, pc}

0800833e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b082      	sub	sp, #8
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008346:	46c0      	nop			@ (mov r8, r8)
 8008348:	46bd      	mov	sp, r7
 800834a:	b002      	add	sp, #8
 800834c:	bd80      	pop	{r7, pc}

0800834e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b082      	sub	sp, #8
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008356:	46c0      	nop			@ (mov r8, r8)
 8008358:	46bd      	mov	sp, r7
 800835a:	b002      	add	sp, #8
 800835c:	bd80      	pop	{r7, pc}

0800835e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b082      	sub	sp, #8
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008366:	46c0      	nop			@ (mov r8, r8)
 8008368:	46bd      	mov	sp, r7
 800836a:	b002      	add	sp, #8
 800836c:	bd80      	pop	{r7, pc}
	...

08008370 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2284      	movs	r2, #132	@ 0x84
 800837c:	5c9b      	ldrb	r3, [r3, r2]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d101      	bne.n	8008386 <HAL_UARTEx_DisableFifoMode+0x16>
 8008382:	2302      	movs	r3, #2
 8008384:	e027      	b.n	80083d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2284      	movs	r2, #132	@ 0x84
 800838a:	2101      	movs	r1, #1
 800838c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2288      	movs	r2, #136	@ 0x88
 8008392:	2124      	movs	r1, #36	@ 0x24
 8008394:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2101      	movs	r1, #1
 80083aa:	438a      	bics	r2, r1
 80083ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	4a0b      	ldr	r2, [pc, #44]	@ (80083e0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80083b2:	4013      	ands	r3, r2
 80083b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2288      	movs	r2, #136	@ 0x88
 80083c8:	2120      	movs	r1, #32
 80083ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2284      	movs	r2, #132	@ 0x84
 80083d0:	2100      	movs	r1, #0
 80083d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	0018      	movs	r0, r3
 80083d8:	46bd      	mov	sp, r7
 80083da:	b004      	add	sp, #16
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	46c0      	nop			@ (mov r8, r8)
 80083e0:	dfffffff 	.word	0xdfffffff

080083e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b084      	sub	sp, #16
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2284      	movs	r2, #132	@ 0x84
 80083f2:	5c9b      	ldrb	r3, [r3, r2]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d101      	bne.n	80083fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80083f8:	2302      	movs	r3, #2
 80083fa:	e02e      	b.n	800845a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2284      	movs	r2, #132	@ 0x84
 8008400:	2101      	movs	r1, #1
 8008402:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2288      	movs	r2, #136	@ 0x88
 8008408:	2124      	movs	r1, #36	@ 0x24
 800840a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2101      	movs	r1, #1
 8008420:	438a      	bics	r2, r1
 8008422:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	08d9      	lsrs	r1, r3, #3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	430a      	orrs	r2, r1
 8008436:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	0018      	movs	r0, r3
 800843c:	f000 f854 	bl	80084e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2288      	movs	r2, #136	@ 0x88
 800844c:	2120      	movs	r1, #32
 800844e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2284      	movs	r2, #132	@ 0x84
 8008454:	2100      	movs	r1, #0
 8008456:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	0018      	movs	r0, r3
 800845c:	46bd      	mov	sp, r7
 800845e:	b004      	add	sp, #16
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2284      	movs	r2, #132	@ 0x84
 8008472:	5c9b      	ldrb	r3, [r3, r2]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d101      	bne.n	800847c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008478:	2302      	movs	r3, #2
 800847a:	e02f      	b.n	80084dc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2284      	movs	r2, #132	@ 0x84
 8008480:	2101      	movs	r1, #1
 8008482:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2288      	movs	r2, #136	@ 0x88
 8008488:	2124      	movs	r1, #36	@ 0x24
 800848a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2101      	movs	r1, #1
 80084a0:	438a      	bics	r2, r1
 80084a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	4a0e      	ldr	r2, [pc, #56]	@ (80084e4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80084ac:	4013      	ands	r3, r2
 80084ae:	0019      	movs	r1, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	683a      	ldr	r2, [r7, #0]
 80084b6:	430a      	orrs	r2, r1
 80084b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	0018      	movs	r0, r3
 80084be:	f000 f813 	bl	80084e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2288      	movs	r2, #136	@ 0x88
 80084ce:	2120      	movs	r1, #32
 80084d0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2284      	movs	r2, #132	@ 0x84
 80084d6:	2100      	movs	r1, #0
 80084d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	0018      	movs	r0, r3
 80084de:	46bd      	mov	sp, r7
 80084e0:	b004      	add	sp, #16
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	f1ffffff 	.word	0xf1ffffff

080084e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80084e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d108      	bne.n	800850a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	226a      	movs	r2, #106	@ 0x6a
 80084fc:	2101      	movs	r1, #1
 80084fe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2268      	movs	r2, #104	@ 0x68
 8008504:	2101      	movs	r1, #1
 8008506:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008508:	e043      	b.n	8008592 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800850a:	260f      	movs	r6, #15
 800850c:	19bb      	adds	r3, r7, r6
 800850e:	2208      	movs	r2, #8
 8008510:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008512:	200e      	movs	r0, #14
 8008514:	183b      	adds	r3, r7, r0
 8008516:	2208      	movs	r2, #8
 8008518:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	0e5b      	lsrs	r3, r3, #25
 8008522:	b2da      	uxtb	r2, r3
 8008524:	240d      	movs	r4, #13
 8008526:	193b      	adds	r3, r7, r4
 8008528:	2107      	movs	r1, #7
 800852a:	400a      	ands	r2, r1
 800852c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	0f5b      	lsrs	r3, r3, #29
 8008536:	b2da      	uxtb	r2, r3
 8008538:	250c      	movs	r5, #12
 800853a:	197b      	adds	r3, r7, r5
 800853c:	2107      	movs	r1, #7
 800853e:	400a      	ands	r2, r1
 8008540:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008542:	183b      	adds	r3, r7, r0
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	197a      	adds	r2, r7, r5
 8008548:	7812      	ldrb	r2, [r2, #0]
 800854a:	4914      	ldr	r1, [pc, #80]	@ (800859c <UARTEx_SetNbDataToProcess+0xb4>)
 800854c:	5c8a      	ldrb	r2, [r1, r2]
 800854e:	435a      	muls	r2, r3
 8008550:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008552:	197b      	adds	r3, r7, r5
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	4a12      	ldr	r2, [pc, #72]	@ (80085a0 <UARTEx_SetNbDataToProcess+0xb8>)
 8008558:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800855a:	0019      	movs	r1, r3
 800855c:	f7f7 fe6c 	bl	8000238 <__divsi3>
 8008560:	0003      	movs	r3, r0
 8008562:	b299      	uxth	r1, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	226a      	movs	r2, #106	@ 0x6a
 8008568:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800856a:	19bb      	adds	r3, r7, r6
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	193a      	adds	r2, r7, r4
 8008570:	7812      	ldrb	r2, [r2, #0]
 8008572:	490a      	ldr	r1, [pc, #40]	@ (800859c <UARTEx_SetNbDataToProcess+0xb4>)
 8008574:	5c8a      	ldrb	r2, [r1, r2]
 8008576:	435a      	muls	r2, r3
 8008578:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800857a:	193b      	adds	r3, r7, r4
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	4a08      	ldr	r2, [pc, #32]	@ (80085a0 <UARTEx_SetNbDataToProcess+0xb8>)
 8008580:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008582:	0019      	movs	r1, r3
 8008584:	f7f7 fe58 	bl	8000238 <__divsi3>
 8008588:	0003      	movs	r3, r0
 800858a:	b299      	uxth	r1, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2268      	movs	r2, #104	@ 0x68
 8008590:	5299      	strh	r1, [r3, r2]
}
 8008592:	46c0      	nop			@ (mov r8, r8)
 8008594:	46bd      	mov	sp, r7
 8008596:	b005      	add	sp, #20
 8008598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800859a:	46c0      	nop			@ (mov r8, r8)
 800859c:	0800994c 	.word	0x0800994c
 80085a0:	08009954 	.word	0x08009954

080085a4 <std>:
 80085a4:	2300      	movs	r3, #0
 80085a6:	b510      	push	{r4, lr}
 80085a8:	0004      	movs	r4, r0
 80085aa:	6003      	str	r3, [r0, #0]
 80085ac:	6043      	str	r3, [r0, #4]
 80085ae:	6083      	str	r3, [r0, #8]
 80085b0:	8181      	strh	r1, [r0, #12]
 80085b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80085b4:	81c2      	strh	r2, [r0, #14]
 80085b6:	6103      	str	r3, [r0, #16]
 80085b8:	6143      	str	r3, [r0, #20]
 80085ba:	6183      	str	r3, [r0, #24]
 80085bc:	0019      	movs	r1, r3
 80085be:	2208      	movs	r2, #8
 80085c0:	305c      	adds	r0, #92	@ 0x5c
 80085c2:	f000 f8ff 	bl	80087c4 <memset>
 80085c6:	4b0b      	ldr	r3, [pc, #44]	@ (80085f4 <std+0x50>)
 80085c8:	6224      	str	r4, [r4, #32]
 80085ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80085cc:	4b0a      	ldr	r3, [pc, #40]	@ (80085f8 <std+0x54>)
 80085ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80085d0:	4b0a      	ldr	r3, [pc, #40]	@ (80085fc <std+0x58>)
 80085d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80085d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008600 <std+0x5c>)
 80085d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80085d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008604 <std+0x60>)
 80085da:	429c      	cmp	r4, r3
 80085dc:	d005      	beq.n	80085ea <std+0x46>
 80085de:	4b0a      	ldr	r3, [pc, #40]	@ (8008608 <std+0x64>)
 80085e0:	429c      	cmp	r4, r3
 80085e2:	d002      	beq.n	80085ea <std+0x46>
 80085e4:	4b09      	ldr	r3, [pc, #36]	@ (800860c <std+0x68>)
 80085e6:	429c      	cmp	r4, r3
 80085e8:	d103      	bne.n	80085f2 <std+0x4e>
 80085ea:	0020      	movs	r0, r4
 80085ec:	3058      	adds	r0, #88	@ 0x58
 80085ee:	f000 f9df 	bl	80089b0 <__retarget_lock_init_recursive>
 80085f2:	bd10      	pop	{r4, pc}
 80085f4:	0800872d 	.word	0x0800872d
 80085f8:	08008755 	.word	0x08008755
 80085fc:	0800878d 	.word	0x0800878d
 8008600:	080087b9 	.word	0x080087b9
 8008604:	200003e8 	.word	0x200003e8
 8008608:	20000450 	.word	0x20000450
 800860c:	200004b8 	.word	0x200004b8

08008610 <stdio_exit_handler>:
 8008610:	b510      	push	{r4, lr}
 8008612:	4a03      	ldr	r2, [pc, #12]	@ (8008620 <stdio_exit_handler+0x10>)
 8008614:	4903      	ldr	r1, [pc, #12]	@ (8008624 <stdio_exit_handler+0x14>)
 8008616:	4804      	ldr	r0, [pc, #16]	@ (8008628 <stdio_exit_handler+0x18>)
 8008618:	f000 f86c 	bl	80086f4 <_fwalk_sglue>
 800861c:	bd10      	pop	{r4, pc}
 800861e:	46c0      	nop			@ (mov r8, r8)
 8008620:	20000010 	.word	0x20000010
 8008624:	08008d1d 	.word	0x08008d1d
 8008628:	20000020 	.word	0x20000020

0800862c <cleanup_stdio>:
 800862c:	6841      	ldr	r1, [r0, #4]
 800862e:	4b0b      	ldr	r3, [pc, #44]	@ (800865c <cleanup_stdio+0x30>)
 8008630:	b510      	push	{r4, lr}
 8008632:	0004      	movs	r4, r0
 8008634:	4299      	cmp	r1, r3
 8008636:	d001      	beq.n	800863c <cleanup_stdio+0x10>
 8008638:	f000 fb70 	bl	8008d1c <_fflush_r>
 800863c:	68a1      	ldr	r1, [r4, #8]
 800863e:	4b08      	ldr	r3, [pc, #32]	@ (8008660 <cleanup_stdio+0x34>)
 8008640:	4299      	cmp	r1, r3
 8008642:	d002      	beq.n	800864a <cleanup_stdio+0x1e>
 8008644:	0020      	movs	r0, r4
 8008646:	f000 fb69 	bl	8008d1c <_fflush_r>
 800864a:	68e1      	ldr	r1, [r4, #12]
 800864c:	4b05      	ldr	r3, [pc, #20]	@ (8008664 <cleanup_stdio+0x38>)
 800864e:	4299      	cmp	r1, r3
 8008650:	d002      	beq.n	8008658 <cleanup_stdio+0x2c>
 8008652:	0020      	movs	r0, r4
 8008654:	f000 fb62 	bl	8008d1c <_fflush_r>
 8008658:	bd10      	pop	{r4, pc}
 800865a:	46c0      	nop			@ (mov r8, r8)
 800865c:	200003e8 	.word	0x200003e8
 8008660:	20000450 	.word	0x20000450
 8008664:	200004b8 	.word	0x200004b8

08008668 <global_stdio_init.part.0>:
 8008668:	b510      	push	{r4, lr}
 800866a:	4b09      	ldr	r3, [pc, #36]	@ (8008690 <global_stdio_init.part.0+0x28>)
 800866c:	4a09      	ldr	r2, [pc, #36]	@ (8008694 <global_stdio_init.part.0+0x2c>)
 800866e:	2104      	movs	r1, #4
 8008670:	601a      	str	r2, [r3, #0]
 8008672:	4809      	ldr	r0, [pc, #36]	@ (8008698 <global_stdio_init.part.0+0x30>)
 8008674:	2200      	movs	r2, #0
 8008676:	f7ff ff95 	bl	80085a4 <std>
 800867a:	2201      	movs	r2, #1
 800867c:	2109      	movs	r1, #9
 800867e:	4807      	ldr	r0, [pc, #28]	@ (800869c <global_stdio_init.part.0+0x34>)
 8008680:	f7ff ff90 	bl	80085a4 <std>
 8008684:	2202      	movs	r2, #2
 8008686:	2112      	movs	r1, #18
 8008688:	4805      	ldr	r0, [pc, #20]	@ (80086a0 <global_stdio_init.part.0+0x38>)
 800868a:	f7ff ff8b 	bl	80085a4 <std>
 800868e:	bd10      	pop	{r4, pc}
 8008690:	20000520 	.word	0x20000520
 8008694:	08008611 	.word	0x08008611
 8008698:	200003e8 	.word	0x200003e8
 800869c:	20000450 	.word	0x20000450
 80086a0:	200004b8 	.word	0x200004b8

080086a4 <__sfp_lock_acquire>:
 80086a4:	b510      	push	{r4, lr}
 80086a6:	4802      	ldr	r0, [pc, #8]	@ (80086b0 <__sfp_lock_acquire+0xc>)
 80086a8:	f000 f983 	bl	80089b2 <__retarget_lock_acquire_recursive>
 80086ac:	bd10      	pop	{r4, pc}
 80086ae:	46c0      	nop			@ (mov r8, r8)
 80086b0:	20000529 	.word	0x20000529

080086b4 <__sfp_lock_release>:
 80086b4:	b510      	push	{r4, lr}
 80086b6:	4802      	ldr	r0, [pc, #8]	@ (80086c0 <__sfp_lock_release+0xc>)
 80086b8:	f000 f97c 	bl	80089b4 <__retarget_lock_release_recursive>
 80086bc:	bd10      	pop	{r4, pc}
 80086be:	46c0      	nop			@ (mov r8, r8)
 80086c0:	20000529 	.word	0x20000529

080086c4 <__sinit>:
 80086c4:	b510      	push	{r4, lr}
 80086c6:	0004      	movs	r4, r0
 80086c8:	f7ff ffec 	bl	80086a4 <__sfp_lock_acquire>
 80086cc:	6a23      	ldr	r3, [r4, #32]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d002      	beq.n	80086d8 <__sinit+0x14>
 80086d2:	f7ff ffef 	bl	80086b4 <__sfp_lock_release>
 80086d6:	bd10      	pop	{r4, pc}
 80086d8:	4b04      	ldr	r3, [pc, #16]	@ (80086ec <__sinit+0x28>)
 80086da:	6223      	str	r3, [r4, #32]
 80086dc:	4b04      	ldr	r3, [pc, #16]	@ (80086f0 <__sinit+0x2c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1f6      	bne.n	80086d2 <__sinit+0xe>
 80086e4:	f7ff ffc0 	bl	8008668 <global_stdio_init.part.0>
 80086e8:	e7f3      	b.n	80086d2 <__sinit+0xe>
 80086ea:	46c0      	nop			@ (mov r8, r8)
 80086ec:	0800862d 	.word	0x0800862d
 80086f0:	20000520 	.word	0x20000520

080086f4 <_fwalk_sglue>:
 80086f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086f6:	0014      	movs	r4, r2
 80086f8:	2600      	movs	r6, #0
 80086fa:	9000      	str	r0, [sp, #0]
 80086fc:	9101      	str	r1, [sp, #4]
 80086fe:	68a5      	ldr	r5, [r4, #8]
 8008700:	6867      	ldr	r7, [r4, #4]
 8008702:	3f01      	subs	r7, #1
 8008704:	d504      	bpl.n	8008710 <_fwalk_sglue+0x1c>
 8008706:	6824      	ldr	r4, [r4, #0]
 8008708:	2c00      	cmp	r4, #0
 800870a:	d1f8      	bne.n	80086fe <_fwalk_sglue+0xa>
 800870c:	0030      	movs	r0, r6
 800870e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008710:	89ab      	ldrh	r3, [r5, #12]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d908      	bls.n	8008728 <_fwalk_sglue+0x34>
 8008716:	220e      	movs	r2, #14
 8008718:	5eab      	ldrsh	r3, [r5, r2]
 800871a:	3301      	adds	r3, #1
 800871c:	d004      	beq.n	8008728 <_fwalk_sglue+0x34>
 800871e:	0029      	movs	r1, r5
 8008720:	9800      	ldr	r0, [sp, #0]
 8008722:	9b01      	ldr	r3, [sp, #4]
 8008724:	4798      	blx	r3
 8008726:	4306      	orrs	r6, r0
 8008728:	3568      	adds	r5, #104	@ 0x68
 800872a:	e7ea      	b.n	8008702 <_fwalk_sglue+0xe>

0800872c <__sread>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	000c      	movs	r4, r1
 8008730:	250e      	movs	r5, #14
 8008732:	5f49      	ldrsh	r1, [r1, r5]
 8008734:	f000 f8ea 	bl	800890c <_read_r>
 8008738:	2800      	cmp	r0, #0
 800873a:	db03      	blt.n	8008744 <__sread+0x18>
 800873c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800873e:	181b      	adds	r3, r3, r0
 8008740:	6563      	str	r3, [r4, #84]	@ 0x54
 8008742:	bd70      	pop	{r4, r5, r6, pc}
 8008744:	89a3      	ldrh	r3, [r4, #12]
 8008746:	4a02      	ldr	r2, [pc, #8]	@ (8008750 <__sread+0x24>)
 8008748:	4013      	ands	r3, r2
 800874a:	81a3      	strh	r3, [r4, #12]
 800874c:	e7f9      	b.n	8008742 <__sread+0x16>
 800874e:	46c0      	nop			@ (mov r8, r8)
 8008750:	ffffefff 	.word	0xffffefff

08008754 <__swrite>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	001f      	movs	r7, r3
 8008758:	898b      	ldrh	r3, [r1, #12]
 800875a:	0005      	movs	r5, r0
 800875c:	000c      	movs	r4, r1
 800875e:	0016      	movs	r6, r2
 8008760:	05db      	lsls	r3, r3, #23
 8008762:	d505      	bpl.n	8008770 <__swrite+0x1c>
 8008764:	230e      	movs	r3, #14
 8008766:	5ec9      	ldrsh	r1, [r1, r3]
 8008768:	2200      	movs	r2, #0
 800876a:	2302      	movs	r3, #2
 800876c:	f000 f8ba 	bl	80088e4 <_lseek_r>
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	4a05      	ldr	r2, [pc, #20]	@ (8008788 <__swrite+0x34>)
 8008774:	0028      	movs	r0, r5
 8008776:	4013      	ands	r3, r2
 8008778:	81a3      	strh	r3, [r4, #12]
 800877a:	0032      	movs	r2, r6
 800877c:	230e      	movs	r3, #14
 800877e:	5ee1      	ldrsh	r1, [r4, r3]
 8008780:	003b      	movs	r3, r7
 8008782:	f000 f8d7 	bl	8008934 <_write_r>
 8008786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008788:	ffffefff 	.word	0xffffefff

0800878c <__sseek>:
 800878c:	b570      	push	{r4, r5, r6, lr}
 800878e:	000c      	movs	r4, r1
 8008790:	250e      	movs	r5, #14
 8008792:	5f49      	ldrsh	r1, [r1, r5]
 8008794:	f000 f8a6 	bl	80088e4 <_lseek_r>
 8008798:	89a3      	ldrh	r3, [r4, #12]
 800879a:	1c42      	adds	r2, r0, #1
 800879c:	d103      	bne.n	80087a6 <__sseek+0x1a>
 800879e:	4a05      	ldr	r2, [pc, #20]	@ (80087b4 <__sseek+0x28>)
 80087a0:	4013      	ands	r3, r2
 80087a2:	81a3      	strh	r3, [r4, #12]
 80087a4:	bd70      	pop	{r4, r5, r6, pc}
 80087a6:	2280      	movs	r2, #128	@ 0x80
 80087a8:	0152      	lsls	r2, r2, #5
 80087aa:	4313      	orrs	r3, r2
 80087ac:	81a3      	strh	r3, [r4, #12]
 80087ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80087b0:	e7f8      	b.n	80087a4 <__sseek+0x18>
 80087b2:	46c0      	nop			@ (mov r8, r8)
 80087b4:	ffffefff 	.word	0xffffefff

080087b8 <__sclose>:
 80087b8:	b510      	push	{r4, lr}
 80087ba:	230e      	movs	r3, #14
 80087bc:	5ec9      	ldrsh	r1, [r1, r3]
 80087be:	f000 f87f 	bl	80088c0 <_close_r>
 80087c2:	bd10      	pop	{r4, pc}

080087c4 <memset>:
 80087c4:	0003      	movs	r3, r0
 80087c6:	1882      	adds	r2, r0, r2
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d100      	bne.n	80087ce <memset+0xa>
 80087cc:	4770      	bx	lr
 80087ce:	7019      	strb	r1, [r3, #0]
 80087d0:	3301      	adds	r3, #1
 80087d2:	e7f9      	b.n	80087c8 <memset+0x4>

080087d4 <strtok>:
 80087d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d6:	4b16      	ldr	r3, [pc, #88]	@ (8008830 <strtok+0x5c>)
 80087d8:	0005      	movs	r5, r0
 80087da:	681f      	ldr	r7, [r3, #0]
 80087dc:	000e      	movs	r6, r1
 80087de:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80087e0:	2c00      	cmp	r4, #0
 80087e2:	d11d      	bne.n	8008820 <strtok+0x4c>
 80087e4:	2050      	movs	r0, #80	@ 0x50
 80087e6:	f000 f957 	bl	8008a98 <malloc>
 80087ea:	1e02      	subs	r2, r0, #0
 80087ec:	6478      	str	r0, [r7, #68]	@ 0x44
 80087ee:	d104      	bne.n	80087fa <strtok+0x26>
 80087f0:	215b      	movs	r1, #91	@ 0x5b
 80087f2:	4b10      	ldr	r3, [pc, #64]	@ (8008834 <strtok+0x60>)
 80087f4:	4810      	ldr	r0, [pc, #64]	@ (8008838 <strtok+0x64>)
 80087f6:	f000 f8e7 	bl	80089c8 <__assert_func>
 80087fa:	6004      	str	r4, [r0, #0]
 80087fc:	6044      	str	r4, [r0, #4]
 80087fe:	6084      	str	r4, [r0, #8]
 8008800:	60c4      	str	r4, [r0, #12]
 8008802:	6104      	str	r4, [r0, #16]
 8008804:	6144      	str	r4, [r0, #20]
 8008806:	6184      	str	r4, [r0, #24]
 8008808:	6284      	str	r4, [r0, #40]	@ 0x28
 800880a:	62c4      	str	r4, [r0, #44]	@ 0x2c
 800880c:	6304      	str	r4, [r0, #48]	@ 0x30
 800880e:	6344      	str	r4, [r0, #52]	@ 0x34
 8008810:	6384      	str	r4, [r0, #56]	@ 0x38
 8008812:	63c4      	str	r4, [r0, #60]	@ 0x3c
 8008814:	6404      	str	r4, [r0, #64]	@ 0x40
 8008816:	6444      	str	r4, [r0, #68]	@ 0x44
 8008818:	6484      	str	r4, [r0, #72]	@ 0x48
 800881a:	64c4      	str	r4, [r0, #76]	@ 0x4c
 800881c:	7704      	strb	r4, [r0, #28]
 800881e:	6244      	str	r4, [r0, #36]	@ 0x24
 8008820:	0031      	movs	r1, r6
 8008822:	0028      	movs	r0, r5
 8008824:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008826:	2301      	movs	r3, #1
 8008828:	f000 f808 	bl	800883c <__strtok_r>
 800882c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800882e:	46c0      	nop			@ (mov r8, r8)
 8008830:	2000001c 	.word	0x2000001c
 8008834:	0800995c 	.word	0x0800995c
 8008838:	08009973 	.word	0x08009973

0800883c <__strtok_r>:
 800883c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800883e:	1e04      	subs	r4, r0, #0
 8008840:	d102      	bne.n	8008848 <__strtok_r+0xc>
 8008842:	6814      	ldr	r4, [r2, #0]
 8008844:	2c00      	cmp	r4, #0
 8008846:	d009      	beq.n	800885c <__strtok_r+0x20>
 8008848:	0020      	movs	r0, r4
 800884a:	000e      	movs	r6, r1
 800884c:	7805      	ldrb	r5, [r0, #0]
 800884e:	3401      	adds	r4, #1
 8008850:	7837      	ldrb	r7, [r6, #0]
 8008852:	2f00      	cmp	r7, #0
 8008854:	d104      	bne.n	8008860 <__strtok_r+0x24>
 8008856:	2d00      	cmp	r5, #0
 8008858:	d10d      	bne.n	8008876 <__strtok_r+0x3a>
 800885a:	6015      	str	r5, [r2, #0]
 800885c:	2000      	movs	r0, #0
 800885e:	e006      	b.n	800886e <__strtok_r+0x32>
 8008860:	3601      	adds	r6, #1
 8008862:	42bd      	cmp	r5, r7
 8008864:	d1f4      	bne.n	8008850 <__strtok_r+0x14>
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1ee      	bne.n	8008848 <__strtok_r+0xc>
 800886a:	6014      	str	r4, [r2, #0]
 800886c:	7003      	strb	r3, [r0, #0]
 800886e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008870:	3301      	adds	r3, #1
 8008872:	2d00      	cmp	r5, #0
 8008874:	d103      	bne.n	800887e <__strtok_r+0x42>
 8008876:	0026      	movs	r6, r4
 8008878:	000b      	movs	r3, r1
 800887a:	7837      	ldrb	r7, [r6, #0]
 800887c:	3401      	adds	r4, #1
 800887e:	781d      	ldrb	r5, [r3, #0]
 8008880:	42af      	cmp	r7, r5
 8008882:	d1f5      	bne.n	8008870 <__strtok_r+0x34>
 8008884:	2300      	movs	r3, #0
 8008886:	0019      	movs	r1, r3
 8008888:	429f      	cmp	r7, r3
 800888a:	d001      	beq.n	8008890 <__strtok_r+0x54>
 800888c:	0023      	movs	r3, r4
 800888e:	7031      	strb	r1, [r6, #0]
 8008890:	6013      	str	r3, [r2, #0]
 8008892:	e7ec      	b.n	800886e <__strtok_r+0x32>

08008894 <strstr>:
 8008894:	780a      	ldrb	r2, [r1, #0]
 8008896:	b530      	push	{r4, r5, lr}
 8008898:	2a00      	cmp	r2, #0
 800889a:	d10c      	bne.n	80088b6 <strstr+0x22>
 800889c:	bd30      	pop	{r4, r5, pc}
 800889e:	429a      	cmp	r2, r3
 80088a0:	d108      	bne.n	80088b4 <strstr+0x20>
 80088a2:	2301      	movs	r3, #1
 80088a4:	5ccc      	ldrb	r4, [r1, r3]
 80088a6:	2c00      	cmp	r4, #0
 80088a8:	d0f8      	beq.n	800889c <strstr+0x8>
 80088aa:	5cc5      	ldrb	r5, [r0, r3]
 80088ac:	42a5      	cmp	r5, r4
 80088ae:	d101      	bne.n	80088b4 <strstr+0x20>
 80088b0:	3301      	adds	r3, #1
 80088b2:	e7f7      	b.n	80088a4 <strstr+0x10>
 80088b4:	3001      	adds	r0, #1
 80088b6:	7803      	ldrb	r3, [r0, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1f0      	bne.n	800889e <strstr+0xa>
 80088bc:	0018      	movs	r0, r3
 80088be:	e7ed      	b.n	800889c <strstr+0x8>

080088c0 <_close_r>:
 80088c0:	2300      	movs	r3, #0
 80088c2:	b570      	push	{r4, r5, r6, lr}
 80088c4:	4d06      	ldr	r5, [pc, #24]	@ (80088e0 <_close_r+0x20>)
 80088c6:	0004      	movs	r4, r0
 80088c8:	0008      	movs	r0, r1
 80088ca:	602b      	str	r3, [r5, #0]
 80088cc:	f7fb f978 	bl	8003bc0 <_close>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d103      	bne.n	80088dc <_close_r+0x1c>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d000      	beq.n	80088dc <_close_r+0x1c>
 80088da:	6023      	str	r3, [r4, #0]
 80088dc:	bd70      	pop	{r4, r5, r6, pc}
 80088de:	46c0      	nop			@ (mov r8, r8)
 80088e0:	20000524 	.word	0x20000524

080088e4 <_lseek_r>:
 80088e4:	b570      	push	{r4, r5, r6, lr}
 80088e6:	0004      	movs	r4, r0
 80088e8:	0008      	movs	r0, r1
 80088ea:	0011      	movs	r1, r2
 80088ec:	001a      	movs	r2, r3
 80088ee:	2300      	movs	r3, #0
 80088f0:	4d05      	ldr	r5, [pc, #20]	@ (8008908 <_lseek_r+0x24>)
 80088f2:	602b      	str	r3, [r5, #0]
 80088f4:	f7fb f985 	bl	8003c02 <_lseek>
 80088f8:	1c43      	adds	r3, r0, #1
 80088fa:	d103      	bne.n	8008904 <_lseek_r+0x20>
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d000      	beq.n	8008904 <_lseek_r+0x20>
 8008902:	6023      	str	r3, [r4, #0]
 8008904:	bd70      	pop	{r4, r5, r6, pc}
 8008906:	46c0      	nop			@ (mov r8, r8)
 8008908:	20000524 	.word	0x20000524

0800890c <_read_r>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	0004      	movs	r4, r0
 8008910:	0008      	movs	r0, r1
 8008912:	0011      	movs	r1, r2
 8008914:	001a      	movs	r2, r3
 8008916:	2300      	movs	r3, #0
 8008918:	4d05      	ldr	r5, [pc, #20]	@ (8008930 <_read_r+0x24>)
 800891a:	602b      	str	r3, [r5, #0]
 800891c:	f7fb f917 	bl	8003b4e <_read>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d103      	bne.n	800892c <_read_r+0x20>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d000      	beq.n	800892c <_read_r+0x20>
 800892a:	6023      	str	r3, [r4, #0]
 800892c:	bd70      	pop	{r4, r5, r6, pc}
 800892e:	46c0      	nop			@ (mov r8, r8)
 8008930:	20000524 	.word	0x20000524

08008934 <_write_r>:
 8008934:	b570      	push	{r4, r5, r6, lr}
 8008936:	0004      	movs	r4, r0
 8008938:	0008      	movs	r0, r1
 800893a:	0011      	movs	r1, r2
 800893c:	001a      	movs	r2, r3
 800893e:	2300      	movs	r3, #0
 8008940:	4d05      	ldr	r5, [pc, #20]	@ (8008958 <_write_r+0x24>)
 8008942:	602b      	str	r3, [r5, #0]
 8008944:	f7fb f920 	bl	8003b88 <_write>
 8008948:	1c43      	adds	r3, r0, #1
 800894a:	d103      	bne.n	8008954 <_write_r+0x20>
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d000      	beq.n	8008954 <_write_r+0x20>
 8008952:	6023      	str	r3, [r4, #0]
 8008954:	bd70      	pop	{r4, r5, r6, pc}
 8008956:	46c0      	nop			@ (mov r8, r8)
 8008958:	20000524 	.word	0x20000524

0800895c <__errno>:
 800895c:	4b01      	ldr	r3, [pc, #4]	@ (8008964 <__errno+0x8>)
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	4770      	bx	lr
 8008962:	46c0      	nop			@ (mov r8, r8)
 8008964:	2000001c 	.word	0x2000001c

08008968 <__libc_init_array>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	2600      	movs	r6, #0
 800896c:	4c0c      	ldr	r4, [pc, #48]	@ (80089a0 <__libc_init_array+0x38>)
 800896e:	4d0d      	ldr	r5, [pc, #52]	@ (80089a4 <__libc_init_array+0x3c>)
 8008970:	1b64      	subs	r4, r4, r5
 8008972:	10a4      	asrs	r4, r4, #2
 8008974:	42a6      	cmp	r6, r4
 8008976:	d109      	bne.n	800898c <__libc_init_array+0x24>
 8008978:	2600      	movs	r6, #0
 800897a:	f000 fe69 	bl	8009650 <_init>
 800897e:	4c0a      	ldr	r4, [pc, #40]	@ (80089a8 <__libc_init_array+0x40>)
 8008980:	4d0a      	ldr	r5, [pc, #40]	@ (80089ac <__libc_init_array+0x44>)
 8008982:	1b64      	subs	r4, r4, r5
 8008984:	10a4      	asrs	r4, r4, #2
 8008986:	42a6      	cmp	r6, r4
 8008988:	d105      	bne.n	8008996 <__libc_init_array+0x2e>
 800898a:	bd70      	pop	{r4, r5, r6, pc}
 800898c:	00b3      	lsls	r3, r6, #2
 800898e:	58eb      	ldr	r3, [r5, r3]
 8008990:	4798      	blx	r3
 8008992:	3601      	adds	r6, #1
 8008994:	e7ee      	b.n	8008974 <__libc_init_array+0xc>
 8008996:	00b3      	lsls	r3, r6, #2
 8008998:	58eb      	ldr	r3, [r5, r3]
 800899a:	4798      	blx	r3
 800899c:	3601      	adds	r6, #1
 800899e:	e7f2      	b.n	8008986 <__libc_init_array+0x1e>
 80089a0:	08009a3c 	.word	0x08009a3c
 80089a4:	08009a3c 	.word	0x08009a3c
 80089a8:	08009a40 	.word	0x08009a40
 80089ac:	08009a3c 	.word	0x08009a3c

080089b0 <__retarget_lock_init_recursive>:
 80089b0:	4770      	bx	lr

080089b2 <__retarget_lock_acquire_recursive>:
 80089b2:	4770      	bx	lr

080089b4 <__retarget_lock_release_recursive>:
 80089b4:	4770      	bx	lr

080089b6 <strcpy>:
 80089b6:	0003      	movs	r3, r0
 80089b8:	780a      	ldrb	r2, [r1, #0]
 80089ba:	3101      	adds	r1, #1
 80089bc:	701a      	strb	r2, [r3, #0]
 80089be:	3301      	adds	r3, #1
 80089c0:	2a00      	cmp	r2, #0
 80089c2:	d1f9      	bne.n	80089b8 <strcpy+0x2>
 80089c4:	4770      	bx	lr
	...

080089c8 <__assert_func>:
 80089c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80089ca:	0014      	movs	r4, r2
 80089cc:	001a      	movs	r2, r3
 80089ce:	4b09      	ldr	r3, [pc, #36]	@ (80089f4 <__assert_func+0x2c>)
 80089d0:	0005      	movs	r5, r0
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	000e      	movs	r6, r1
 80089d6:	68d8      	ldr	r0, [r3, #12]
 80089d8:	4b07      	ldr	r3, [pc, #28]	@ (80089f8 <__assert_func+0x30>)
 80089da:	2c00      	cmp	r4, #0
 80089dc:	d101      	bne.n	80089e2 <__assert_func+0x1a>
 80089de:	4b07      	ldr	r3, [pc, #28]	@ (80089fc <__assert_func+0x34>)
 80089e0:	001c      	movs	r4, r3
 80089e2:	4907      	ldr	r1, [pc, #28]	@ (8008a00 <__assert_func+0x38>)
 80089e4:	9301      	str	r3, [sp, #4]
 80089e6:	9402      	str	r4, [sp, #8]
 80089e8:	002b      	movs	r3, r5
 80089ea:	9600      	str	r6, [sp, #0]
 80089ec:	f000 f9c2 	bl	8008d74 <fiprintf>
 80089f0:	f000 f9e2 	bl	8008db8 <abort>
 80089f4:	2000001c 	.word	0x2000001c
 80089f8:	080099cd 	.word	0x080099cd
 80089fc:	08009a08 	.word	0x08009a08
 8008a00:	080099da 	.word	0x080099da

08008a04 <_free_r>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	0005      	movs	r5, r0
 8008a08:	1e0c      	subs	r4, r1, #0
 8008a0a:	d010      	beq.n	8008a2e <_free_r+0x2a>
 8008a0c:	3c04      	subs	r4, #4
 8008a0e:	6823      	ldr	r3, [r4, #0]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	da00      	bge.n	8008a16 <_free_r+0x12>
 8008a14:	18e4      	adds	r4, r4, r3
 8008a16:	0028      	movs	r0, r5
 8008a18:	f000 f8ea 	bl	8008bf0 <__malloc_lock>
 8008a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8008a94 <_free_r+0x90>)
 8008a1e:	6813      	ldr	r3, [r2, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d105      	bne.n	8008a30 <_free_r+0x2c>
 8008a24:	6063      	str	r3, [r4, #4]
 8008a26:	6014      	str	r4, [r2, #0]
 8008a28:	0028      	movs	r0, r5
 8008a2a:	f000 f8e9 	bl	8008c00 <__malloc_unlock>
 8008a2e:	bd70      	pop	{r4, r5, r6, pc}
 8008a30:	42a3      	cmp	r3, r4
 8008a32:	d908      	bls.n	8008a46 <_free_r+0x42>
 8008a34:	6820      	ldr	r0, [r4, #0]
 8008a36:	1821      	adds	r1, r4, r0
 8008a38:	428b      	cmp	r3, r1
 8008a3a:	d1f3      	bne.n	8008a24 <_free_r+0x20>
 8008a3c:	6819      	ldr	r1, [r3, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	1809      	adds	r1, r1, r0
 8008a42:	6021      	str	r1, [r4, #0]
 8008a44:	e7ee      	b.n	8008a24 <_free_r+0x20>
 8008a46:	001a      	movs	r2, r3
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <_free_r+0x4e>
 8008a4e:	42a3      	cmp	r3, r4
 8008a50:	d9f9      	bls.n	8008a46 <_free_r+0x42>
 8008a52:	6811      	ldr	r1, [r2, #0]
 8008a54:	1850      	adds	r0, r2, r1
 8008a56:	42a0      	cmp	r0, r4
 8008a58:	d10b      	bne.n	8008a72 <_free_r+0x6e>
 8008a5a:	6820      	ldr	r0, [r4, #0]
 8008a5c:	1809      	adds	r1, r1, r0
 8008a5e:	1850      	adds	r0, r2, r1
 8008a60:	6011      	str	r1, [r2, #0]
 8008a62:	4283      	cmp	r3, r0
 8008a64:	d1e0      	bne.n	8008a28 <_free_r+0x24>
 8008a66:	6818      	ldr	r0, [r3, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	1841      	adds	r1, r0, r1
 8008a6c:	6011      	str	r1, [r2, #0]
 8008a6e:	6053      	str	r3, [r2, #4]
 8008a70:	e7da      	b.n	8008a28 <_free_r+0x24>
 8008a72:	42a0      	cmp	r0, r4
 8008a74:	d902      	bls.n	8008a7c <_free_r+0x78>
 8008a76:	230c      	movs	r3, #12
 8008a78:	602b      	str	r3, [r5, #0]
 8008a7a:	e7d5      	b.n	8008a28 <_free_r+0x24>
 8008a7c:	6820      	ldr	r0, [r4, #0]
 8008a7e:	1821      	adds	r1, r4, r0
 8008a80:	428b      	cmp	r3, r1
 8008a82:	d103      	bne.n	8008a8c <_free_r+0x88>
 8008a84:	6819      	ldr	r1, [r3, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	1809      	adds	r1, r1, r0
 8008a8a:	6021      	str	r1, [r4, #0]
 8008a8c:	6063      	str	r3, [r4, #4]
 8008a8e:	6054      	str	r4, [r2, #4]
 8008a90:	e7ca      	b.n	8008a28 <_free_r+0x24>
 8008a92:	46c0      	nop			@ (mov r8, r8)
 8008a94:	20000530 	.word	0x20000530

08008a98 <malloc>:
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	4b03      	ldr	r3, [pc, #12]	@ (8008aa8 <malloc+0x10>)
 8008a9c:	0001      	movs	r1, r0
 8008a9e:	6818      	ldr	r0, [r3, #0]
 8008aa0:	f000 f826 	bl	8008af0 <_malloc_r>
 8008aa4:	bd10      	pop	{r4, pc}
 8008aa6:	46c0      	nop			@ (mov r8, r8)
 8008aa8:	2000001c 	.word	0x2000001c

08008aac <sbrk_aligned>:
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	4e0f      	ldr	r6, [pc, #60]	@ (8008aec <sbrk_aligned+0x40>)
 8008ab0:	000d      	movs	r5, r1
 8008ab2:	6831      	ldr	r1, [r6, #0]
 8008ab4:	0004      	movs	r4, r0
 8008ab6:	2900      	cmp	r1, #0
 8008ab8:	d102      	bne.n	8008ac0 <sbrk_aligned+0x14>
 8008aba:	f000 f96b 	bl	8008d94 <_sbrk_r>
 8008abe:	6030      	str	r0, [r6, #0]
 8008ac0:	0029      	movs	r1, r5
 8008ac2:	0020      	movs	r0, r4
 8008ac4:	f000 f966 	bl	8008d94 <_sbrk_r>
 8008ac8:	1c43      	adds	r3, r0, #1
 8008aca:	d103      	bne.n	8008ad4 <sbrk_aligned+0x28>
 8008acc:	2501      	movs	r5, #1
 8008ace:	426d      	negs	r5, r5
 8008ad0:	0028      	movs	r0, r5
 8008ad2:	bd70      	pop	{r4, r5, r6, pc}
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	1cc5      	adds	r5, r0, #3
 8008ad8:	439d      	bics	r5, r3
 8008ada:	42a8      	cmp	r0, r5
 8008adc:	d0f8      	beq.n	8008ad0 <sbrk_aligned+0x24>
 8008ade:	1a29      	subs	r1, r5, r0
 8008ae0:	0020      	movs	r0, r4
 8008ae2:	f000 f957 	bl	8008d94 <_sbrk_r>
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	d1f2      	bne.n	8008ad0 <sbrk_aligned+0x24>
 8008aea:	e7ef      	b.n	8008acc <sbrk_aligned+0x20>
 8008aec:	2000052c 	.word	0x2000052c

08008af0 <_malloc_r>:
 8008af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008af2:	2203      	movs	r2, #3
 8008af4:	1ccb      	adds	r3, r1, #3
 8008af6:	4393      	bics	r3, r2
 8008af8:	3308      	adds	r3, #8
 8008afa:	0005      	movs	r5, r0
 8008afc:	001f      	movs	r7, r3
 8008afe:	2b0c      	cmp	r3, #12
 8008b00:	d234      	bcs.n	8008b6c <_malloc_r+0x7c>
 8008b02:	270c      	movs	r7, #12
 8008b04:	42b9      	cmp	r1, r7
 8008b06:	d833      	bhi.n	8008b70 <_malloc_r+0x80>
 8008b08:	0028      	movs	r0, r5
 8008b0a:	f000 f871 	bl	8008bf0 <__malloc_lock>
 8008b0e:	4e37      	ldr	r6, [pc, #220]	@ (8008bec <_malloc_r+0xfc>)
 8008b10:	6833      	ldr	r3, [r6, #0]
 8008b12:	001c      	movs	r4, r3
 8008b14:	2c00      	cmp	r4, #0
 8008b16:	d12f      	bne.n	8008b78 <_malloc_r+0x88>
 8008b18:	0039      	movs	r1, r7
 8008b1a:	0028      	movs	r0, r5
 8008b1c:	f7ff ffc6 	bl	8008aac <sbrk_aligned>
 8008b20:	0004      	movs	r4, r0
 8008b22:	1c43      	adds	r3, r0, #1
 8008b24:	d15f      	bne.n	8008be6 <_malloc_r+0xf6>
 8008b26:	6834      	ldr	r4, [r6, #0]
 8008b28:	9400      	str	r4, [sp, #0]
 8008b2a:	9b00      	ldr	r3, [sp, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d14a      	bne.n	8008bc6 <_malloc_r+0xd6>
 8008b30:	2c00      	cmp	r4, #0
 8008b32:	d052      	beq.n	8008bda <_malloc_r+0xea>
 8008b34:	6823      	ldr	r3, [r4, #0]
 8008b36:	0028      	movs	r0, r5
 8008b38:	18e3      	adds	r3, r4, r3
 8008b3a:	9900      	ldr	r1, [sp, #0]
 8008b3c:	9301      	str	r3, [sp, #4]
 8008b3e:	f000 f929 	bl	8008d94 <_sbrk_r>
 8008b42:	9b01      	ldr	r3, [sp, #4]
 8008b44:	4283      	cmp	r3, r0
 8008b46:	d148      	bne.n	8008bda <_malloc_r+0xea>
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	0028      	movs	r0, r5
 8008b4c:	1aff      	subs	r7, r7, r3
 8008b4e:	0039      	movs	r1, r7
 8008b50:	f7ff ffac 	bl	8008aac <sbrk_aligned>
 8008b54:	3001      	adds	r0, #1
 8008b56:	d040      	beq.n	8008bda <_malloc_r+0xea>
 8008b58:	6823      	ldr	r3, [r4, #0]
 8008b5a:	19db      	adds	r3, r3, r7
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	6833      	ldr	r3, [r6, #0]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	2a00      	cmp	r2, #0
 8008b64:	d133      	bne.n	8008bce <_malloc_r+0xde>
 8008b66:	9b00      	ldr	r3, [sp, #0]
 8008b68:	6033      	str	r3, [r6, #0]
 8008b6a:	e019      	b.n	8008ba0 <_malloc_r+0xb0>
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	dac9      	bge.n	8008b04 <_malloc_r+0x14>
 8008b70:	230c      	movs	r3, #12
 8008b72:	602b      	str	r3, [r5, #0]
 8008b74:	2000      	movs	r0, #0
 8008b76:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b78:	6821      	ldr	r1, [r4, #0]
 8008b7a:	1bc9      	subs	r1, r1, r7
 8008b7c:	d420      	bmi.n	8008bc0 <_malloc_r+0xd0>
 8008b7e:	290b      	cmp	r1, #11
 8008b80:	d90a      	bls.n	8008b98 <_malloc_r+0xa8>
 8008b82:	19e2      	adds	r2, r4, r7
 8008b84:	6027      	str	r7, [r4, #0]
 8008b86:	42a3      	cmp	r3, r4
 8008b88:	d104      	bne.n	8008b94 <_malloc_r+0xa4>
 8008b8a:	6032      	str	r2, [r6, #0]
 8008b8c:	6863      	ldr	r3, [r4, #4]
 8008b8e:	6011      	str	r1, [r2, #0]
 8008b90:	6053      	str	r3, [r2, #4]
 8008b92:	e005      	b.n	8008ba0 <_malloc_r+0xb0>
 8008b94:	605a      	str	r2, [r3, #4]
 8008b96:	e7f9      	b.n	8008b8c <_malloc_r+0x9c>
 8008b98:	6862      	ldr	r2, [r4, #4]
 8008b9a:	42a3      	cmp	r3, r4
 8008b9c:	d10e      	bne.n	8008bbc <_malloc_r+0xcc>
 8008b9e:	6032      	str	r2, [r6, #0]
 8008ba0:	0028      	movs	r0, r5
 8008ba2:	f000 f82d 	bl	8008c00 <__malloc_unlock>
 8008ba6:	0020      	movs	r0, r4
 8008ba8:	2207      	movs	r2, #7
 8008baa:	300b      	adds	r0, #11
 8008bac:	1d23      	adds	r3, r4, #4
 8008bae:	4390      	bics	r0, r2
 8008bb0:	1ac2      	subs	r2, r0, r3
 8008bb2:	4298      	cmp	r0, r3
 8008bb4:	d0df      	beq.n	8008b76 <_malloc_r+0x86>
 8008bb6:	1a1b      	subs	r3, r3, r0
 8008bb8:	50a3      	str	r3, [r4, r2]
 8008bba:	e7dc      	b.n	8008b76 <_malloc_r+0x86>
 8008bbc:	605a      	str	r2, [r3, #4]
 8008bbe:	e7ef      	b.n	8008ba0 <_malloc_r+0xb0>
 8008bc0:	0023      	movs	r3, r4
 8008bc2:	6864      	ldr	r4, [r4, #4]
 8008bc4:	e7a6      	b.n	8008b14 <_malloc_r+0x24>
 8008bc6:	9c00      	ldr	r4, [sp, #0]
 8008bc8:	6863      	ldr	r3, [r4, #4]
 8008bca:	9300      	str	r3, [sp, #0]
 8008bcc:	e7ad      	b.n	8008b2a <_malloc_r+0x3a>
 8008bce:	001a      	movs	r2, r3
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	42a3      	cmp	r3, r4
 8008bd4:	d1fb      	bne.n	8008bce <_malloc_r+0xde>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	e7da      	b.n	8008b90 <_malloc_r+0xa0>
 8008bda:	230c      	movs	r3, #12
 8008bdc:	0028      	movs	r0, r5
 8008bde:	602b      	str	r3, [r5, #0]
 8008be0:	f000 f80e 	bl	8008c00 <__malloc_unlock>
 8008be4:	e7c6      	b.n	8008b74 <_malloc_r+0x84>
 8008be6:	6007      	str	r7, [r0, #0]
 8008be8:	e7da      	b.n	8008ba0 <_malloc_r+0xb0>
 8008bea:	46c0      	nop			@ (mov r8, r8)
 8008bec:	20000530 	.word	0x20000530

08008bf0 <__malloc_lock>:
 8008bf0:	b510      	push	{r4, lr}
 8008bf2:	4802      	ldr	r0, [pc, #8]	@ (8008bfc <__malloc_lock+0xc>)
 8008bf4:	f7ff fedd 	bl	80089b2 <__retarget_lock_acquire_recursive>
 8008bf8:	bd10      	pop	{r4, pc}
 8008bfa:	46c0      	nop			@ (mov r8, r8)
 8008bfc:	20000528 	.word	0x20000528

08008c00 <__malloc_unlock>:
 8008c00:	b510      	push	{r4, lr}
 8008c02:	4802      	ldr	r0, [pc, #8]	@ (8008c0c <__malloc_unlock+0xc>)
 8008c04:	f7ff fed6 	bl	80089b4 <__retarget_lock_release_recursive>
 8008c08:	bd10      	pop	{r4, pc}
 8008c0a:	46c0      	nop			@ (mov r8, r8)
 8008c0c:	20000528 	.word	0x20000528

08008c10 <__sflush_r>:
 8008c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c12:	220c      	movs	r2, #12
 8008c14:	5e8b      	ldrsh	r3, [r1, r2]
 8008c16:	0005      	movs	r5, r0
 8008c18:	000c      	movs	r4, r1
 8008c1a:	071a      	lsls	r2, r3, #28
 8008c1c:	d456      	bmi.n	8008ccc <__sflush_r+0xbc>
 8008c1e:	684a      	ldr	r2, [r1, #4]
 8008c20:	2a00      	cmp	r2, #0
 8008c22:	dc02      	bgt.n	8008c2a <__sflush_r+0x1a>
 8008c24:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8008c26:	2a00      	cmp	r2, #0
 8008c28:	dd4e      	ble.n	8008cc8 <__sflush_r+0xb8>
 8008c2a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008c2c:	2f00      	cmp	r7, #0
 8008c2e:	d04b      	beq.n	8008cc8 <__sflush_r+0xb8>
 8008c30:	2200      	movs	r2, #0
 8008c32:	2080      	movs	r0, #128	@ 0x80
 8008c34:	682e      	ldr	r6, [r5, #0]
 8008c36:	602a      	str	r2, [r5, #0]
 8008c38:	001a      	movs	r2, r3
 8008c3a:	0140      	lsls	r0, r0, #5
 8008c3c:	6a21      	ldr	r1, [r4, #32]
 8008c3e:	4002      	ands	r2, r0
 8008c40:	4203      	tst	r3, r0
 8008c42:	d033      	beq.n	8008cac <__sflush_r+0x9c>
 8008c44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	075b      	lsls	r3, r3, #29
 8008c4a:	d506      	bpl.n	8008c5a <__sflush_r+0x4a>
 8008c4c:	6863      	ldr	r3, [r4, #4]
 8008c4e:	1ad2      	subs	r2, r2, r3
 8008c50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <__sflush_r+0x4a>
 8008c56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008c58:	1ad2      	subs	r2, r2, r3
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	0028      	movs	r0, r5
 8008c5e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008c60:	6a21      	ldr	r1, [r4, #32]
 8008c62:	47b8      	blx	r7
 8008c64:	89a2      	ldrh	r2, [r4, #12]
 8008c66:	1c43      	adds	r3, r0, #1
 8008c68:	d106      	bne.n	8008c78 <__sflush_r+0x68>
 8008c6a:	6829      	ldr	r1, [r5, #0]
 8008c6c:	291d      	cmp	r1, #29
 8008c6e:	d846      	bhi.n	8008cfe <__sflush_r+0xee>
 8008c70:	4b29      	ldr	r3, [pc, #164]	@ (8008d18 <__sflush_r+0x108>)
 8008c72:	40cb      	lsrs	r3, r1
 8008c74:	07db      	lsls	r3, r3, #31
 8008c76:	d542      	bpl.n	8008cfe <__sflush_r+0xee>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	6063      	str	r3, [r4, #4]
 8008c7c:	6923      	ldr	r3, [r4, #16]
 8008c7e:	6023      	str	r3, [r4, #0]
 8008c80:	04d2      	lsls	r2, r2, #19
 8008c82:	d505      	bpl.n	8008c90 <__sflush_r+0x80>
 8008c84:	1c43      	adds	r3, r0, #1
 8008c86:	d102      	bne.n	8008c8e <__sflush_r+0x7e>
 8008c88:	682b      	ldr	r3, [r5, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d100      	bne.n	8008c90 <__sflush_r+0x80>
 8008c8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c92:	602e      	str	r6, [r5, #0]
 8008c94:	2900      	cmp	r1, #0
 8008c96:	d017      	beq.n	8008cc8 <__sflush_r+0xb8>
 8008c98:	0023      	movs	r3, r4
 8008c9a:	3344      	adds	r3, #68	@ 0x44
 8008c9c:	4299      	cmp	r1, r3
 8008c9e:	d002      	beq.n	8008ca6 <__sflush_r+0x96>
 8008ca0:	0028      	movs	r0, r5
 8008ca2:	f7ff feaf 	bl	8008a04 <_free_r>
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008caa:	e00d      	b.n	8008cc8 <__sflush_r+0xb8>
 8008cac:	2301      	movs	r3, #1
 8008cae:	0028      	movs	r0, r5
 8008cb0:	47b8      	blx	r7
 8008cb2:	0002      	movs	r2, r0
 8008cb4:	1c43      	adds	r3, r0, #1
 8008cb6:	d1c6      	bne.n	8008c46 <__sflush_r+0x36>
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d0c3      	beq.n	8008c46 <__sflush_r+0x36>
 8008cbe:	2b1d      	cmp	r3, #29
 8008cc0:	d001      	beq.n	8008cc6 <__sflush_r+0xb6>
 8008cc2:	2b16      	cmp	r3, #22
 8008cc4:	d11a      	bne.n	8008cfc <__sflush_r+0xec>
 8008cc6:	602e      	str	r6, [r5, #0]
 8008cc8:	2000      	movs	r0, #0
 8008cca:	e01e      	b.n	8008d0a <__sflush_r+0xfa>
 8008ccc:	690e      	ldr	r6, [r1, #16]
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	d0fa      	beq.n	8008cc8 <__sflush_r+0xb8>
 8008cd2:	680f      	ldr	r7, [r1, #0]
 8008cd4:	600e      	str	r6, [r1, #0]
 8008cd6:	1bba      	subs	r2, r7, r6
 8008cd8:	9201      	str	r2, [sp, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	079b      	lsls	r3, r3, #30
 8008cde:	d100      	bne.n	8008ce2 <__sflush_r+0xd2>
 8008ce0:	694a      	ldr	r2, [r1, #20]
 8008ce2:	60a2      	str	r2, [r4, #8]
 8008ce4:	9b01      	ldr	r3, [sp, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	ddee      	ble.n	8008cc8 <__sflush_r+0xb8>
 8008cea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008cec:	0032      	movs	r2, r6
 8008cee:	001f      	movs	r7, r3
 8008cf0:	0028      	movs	r0, r5
 8008cf2:	9b01      	ldr	r3, [sp, #4]
 8008cf4:	6a21      	ldr	r1, [r4, #32]
 8008cf6:	47b8      	blx	r7
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	dc07      	bgt.n	8008d0c <__sflush_r+0xfc>
 8008cfc:	89a2      	ldrh	r2, [r4, #12]
 8008cfe:	2340      	movs	r3, #64	@ 0x40
 8008d00:	2001      	movs	r0, #1
 8008d02:	4313      	orrs	r3, r2
 8008d04:	b21b      	sxth	r3, r3
 8008d06:	81a3      	strh	r3, [r4, #12]
 8008d08:	4240      	negs	r0, r0
 8008d0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d0c:	9b01      	ldr	r3, [sp, #4]
 8008d0e:	1836      	adds	r6, r6, r0
 8008d10:	1a1b      	subs	r3, r3, r0
 8008d12:	9301      	str	r3, [sp, #4]
 8008d14:	e7e6      	b.n	8008ce4 <__sflush_r+0xd4>
 8008d16:	46c0      	nop			@ (mov r8, r8)
 8008d18:	20400001 	.word	0x20400001

08008d1c <_fflush_r>:
 8008d1c:	690b      	ldr	r3, [r1, #16]
 8008d1e:	b570      	push	{r4, r5, r6, lr}
 8008d20:	0005      	movs	r5, r0
 8008d22:	000c      	movs	r4, r1
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d102      	bne.n	8008d2e <_fflush_r+0x12>
 8008d28:	2500      	movs	r5, #0
 8008d2a:	0028      	movs	r0, r5
 8008d2c:	bd70      	pop	{r4, r5, r6, pc}
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	d004      	beq.n	8008d3c <_fflush_r+0x20>
 8008d32:	6a03      	ldr	r3, [r0, #32]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d101      	bne.n	8008d3c <_fflush_r+0x20>
 8008d38:	f7ff fcc4 	bl	80086c4 <__sinit>
 8008d3c:	220c      	movs	r2, #12
 8008d3e:	5ea3      	ldrsh	r3, [r4, r2]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d0f1      	beq.n	8008d28 <_fflush_r+0xc>
 8008d44:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d46:	07d2      	lsls	r2, r2, #31
 8008d48:	d404      	bmi.n	8008d54 <_fflush_r+0x38>
 8008d4a:	059b      	lsls	r3, r3, #22
 8008d4c:	d402      	bmi.n	8008d54 <_fflush_r+0x38>
 8008d4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d50:	f7ff fe2f 	bl	80089b2 <__retarget_lock_acquire_recursive>
 8008d54:	0028      	movs	r0, r5
 8008d56:	0021      	movs	r1, r4
 8008d58:	f7ff ff5a 	bl	8008c10 <__sflush_r>
 8008d5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d5e:	0005      	movs	r5, r0
 8008d60:	07db      	lsls	r3, r3, #31
 8008d62:	d4e2      	bmi.n	8008d2a <_fflush_r+0xe>
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	059b      	lsls	r3, r3, #22
 8008d68:	d4df      	bmi.n	8008d2a <_fflush_r+0xe>
 8008d6a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d6c:	f7ff fe22 	bl	80089b4 <__retarget_lock_release_recursive>
 8008d70:	e7db      	b.n	8008d2a <_fflush_r+0xe>
	...

08008d74 <fiprintf>:
 8008d74:	b40e      	push	{r1, r2, r3}
 8008d76:	b517      	push	{r0, r1, r2, r4, lr}
 8008d78:	4c05      	ldr	r4, [pc, #20]	@ (8008d90 <fiprintf+0x1c>)
 8008d7a:	ab05      	add	r3, sp, #20
 8008d7c:	cb04      	ldmia	r3!, {r2}
 8008d7e:	0001      	movs	r1, r0
 8008d80:	6820      	ldr	r0, [r4, #0]
 8008d82:	9301      	str	r3, [sp, #4]
 8008d84:	f000 f846 	bl	8008e14 <_vfiprintf_r>
 8008d88:	bc1e      	pop	{r1, r2, r3, r4}
 8008d8a:	bc08      	pop	{r3}
 8008d8c:	b003      	add	sp, #12
 8008d8e:	4718      	bx	r3
 8008d90:	2000001c 	.word	0x2000001c

08008d94 <_sbrk_r>:
 8008d94:	2300      	movs	r3, #0
 8008d96:	b570      	push	{r4, r5, r6, lr}
 8008d98:	4d06      	ldr	r5, [pc, #24]	@ (8008db4 <_sbrk_r+0x20>)
 8008d9a:	0004      	movs	r4, r0
 8008d9c:	0008      	movs	r0, r1
 8008d9e:	602b      	str	r3, [r5, #0]
 8008da0:	f7fa ff3a 	bl	8003c18 <_sbrk>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d103      	bne.n	8008db0 <_sbrk_r+0x1c>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d000      	beq.n	8008db0 <_sbrk_r+0x1c>
 8008dae:	6023      	str	r3, [r4, #0]
 8008db0:	bd70      	pop	{r4, r5, r6, pc}
 8008db2:	46c0      	nop			@ (mov r8, r8)
 8008db4:	20000524 	.word	0x20000524

08008db8 <abort>:
 8008db8:	2006      	movs	r0, #6
 8008dba:	b510      	push	{r4, lr}
 8008dbc:	f000 fb8c 	bl	80094d8 <raise>
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	f7fa feb7 	bl	8003b34 <_exit>

08008dc6 <__sfputc_r>:
 8008dc6:	6893      	ldr	r3, [r2, #8]
 8008dc8:	b510      	push	{r4, lr}
 8008dca:	3b01      	subs	r3, #1
 8008dcc:	6093      	str	r3, [r2, #8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	da04      	bge.n	8008ddc <__sfputc_r+0x16>
 8008dd2:	6994      	ldr	r4, [r2, #24]
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	db07      	blt.n	8008de8 <__sfputc_r+0x22>
 8008dd8:	290a      	cmp	r1, #10
 8008dda:	d005      	beq.n	8008de8 <__sfputc_r+0x22>
 8008ddc:	6813      	ldr	r3, [r2, #0]
 8008dde:	1c58      	adds	r0, r3, #1
 8008de0:	6010      	str	r0, [r2, #0]
 8008de2:	7019      	strb	r1, [r3, #0]
 8008de4:	0008      	movs	r0, r1
 8008de6:	bd10      	pop	{r4, pc}
 8008de8:	f000 faac 	bl	8009344 <__swbuf_r>
 8008dec:	0001      	movs	r1, r0
 8008dee:	e7f9      	b.n	8008de4 <__sfputc_r+0x1e>

08008df0 <__sfputs_r>:
 8008df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df2:	0006      	movs	r6, r0
 8008df4:	000f      	movs	r7, r1
 8008df6:	0014      	movs	r4, r2
 8008df8:	18d5      	adds	r5, r2, r3
 8008dfa:	42ac      	cmp	r4, r5
 8008dfc:	d101      	bne.n	8008e02 <__sfputs_r+0x12>
 8008dfe:	2000      	movs	r0, #0
 8008e00:	e007      	b.n	8008e12 <__sfputs_r+0x22>
 8008e02:	7821      	ldrb	r1, [r4, #0]
 8008e04:	003a      	movs	r2, r7
 8008e06:	0030      	movs	r0, r6
 8008e08:	f7ff ffdd 	bl	8008dc6 <__sfputc_r>
 8008e0c:	3401      	adds	r4, #1
 8008e0e:	1c43      	adds	r3, r0, #1
 8008e10:	d1f3      	bne.n	8008dfa <__sfputs_r+0xa>
 8008e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e14 <_vfiprintf_r>:
 8008e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e16:	b0a1      	sub	sp, #132	@ 0x84
 8008e18:	000f      	movs	r7, r1
 8008e1a:	0015      	movs	r5, r2
 8008e1c:	001e      	movs	r6, r3
 8008e1e:	9003      	str	r0, [sp, #12]
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d004      	beq.n	8008e2e <_vfiprintf_r+0x1a>
 8008e24:	6a03      	ldr	r3, [r0, #32]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d101      	bne.n	8008e2e <_vfiprintf_r+0x1a>
 8008e2a:	f7ff fc4b 	bl	80086c4 <__sinit>
 8008e2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e30:	07db      	lsls	r3, r3, #31
 8008e32:	d405      	bmi.n	8008e40 <_vfiprintf_r+0x2c>
 8008e34:	89bb      	ldrh	r3, [r7, #12]
 8008e36:	059b      	lsls	r3, r3, #22
 8008e38:	d402      	bmi.n	8008e40 <_vfiprintf_r+0x2c>
 8008e3a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008e3c:	f7ff fdb9 	bl	80089b2 <__retarget_lock_acquire_recursive>
 8008e40:	89bb      	ldrh	r3, [r7, #12]
 8008e42:	071b      	lsls	r3, r3, #28
 8008e44:	d502      	bpl.n	8008e4c <_vfiprintf_r+0x38>
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d113      	bne.n	8008e74 <_vfiprintf_r+0x60>
 8008e4c:	0039      	movs	r1, r7
 8008e4e:	9803      	ldr	r0, [sp, #12]
 8008e50:	f000 faba 	bl	80093c8 <__swsetup_r>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	d00d      	beq.n	8008e74 <_vfiprintf_r+0x60>
 8008e58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e5a:	07db      	lsls	r3, r3, #31
 8008e5c:	d503      	bpl.n	8008e66 <_vfiprintf_r+0x52>
 8008e5e:	2001      	movs	r0, #1
 8008e60:	4240      	negs	r0, r0
 8008e62:	b021      	add	sp, #132	@ 0x84
 8008e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e66:	89bb      	ldrh	r3, [r7, #12]
 8008e68:	059b      	lsls	r3, r3, #22
 8008e6a:	d4f8      	bmi.n	8008e5e <_vfiprintf_r+0x4a>
 8008e6c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008e6e:	f7ff fda1 	bl	80089b4 <__retarget_lock_release_recursive>
 8008e72:	e7f4      	b.n	8008e5e <_vfiprintf_r+0x4a>
 8008e74:	2300      	movs	r3, #0
 8008e76:	ac08      	add	r4, sp, #32
 8008e78:	6163      	str	r3, [r4, #20]
 8008e7a:	3320      	adds	r3, #32
 8008e7c:	7663      	strb	r3, [r4, #25]
 8008e7e:	3310      	adds	r3, #16
 8008e80:	76a3      	strb	r3, [r4, #26]
 8008e82:	9607      	str	r6, [sp, #28]
 8008e84:	002e      	movs	r6, r5
 8008e86:	7833      	ldrb	r3, [r6, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d001      	beq.n	8008e90 <_vfiprintf_r+0x7c>
 8008e8c:	2b25      	cmp	r3, #37	@ 0x25
 8008e8e:	d148      	bne.n	8008f22 <_vfiprintf_r+0x10e>
 8008e90:	1b73      	subs	r3, r6, r5
 8008e92:	9305      	str	r3, [sp, #20]
 8008e94:	42ae      	cmp	r6, r5
 8008e96:	d00b      	beq.n	8008eb0 <_vfiprintf_r+0x9c>
 8008e98:	002a      	movs	r2, r5
 8008e9a:	0039      	movs	r1, r7
 8008e9c:	9803      	ldr	r0, [sp, #12]
 8008e9e:	f7ff ffa7 	bl	8008df0 <__sfputs_r>
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	d100      	bne.n	8008ea8 <_vfiprintf_r+0x94>
 8008ea6:	e0ae      	b.n	8009006 <_vfiprintf_r+0x1f2>
 8008ea8:	6963      	ldr	r3, [r4, #20]
 8008eaa:	9a05      	ldr	r2, [sp, #20]
 8008eac:	189b      	adds	r3, r3, r2
 8008eae:	6163      	str	r3, [r4, #20]
 8008eb0:	7833      	ldrb	r3, [r6, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d100      	bne.n	8008eb8 <_vfiprintf_r+0xa4>
 8008eb6:	e0a6      	b.n	8009006 <_vfiprintf_r+0x1f2>
 8008eb8:	2201      	movs	r2, #1
 8008eba:	2300      	movs	r3, #0
 8008ebc:	4252      	negs	r2, r2
 8008ebe:	6062      	str	r2, [r4, #4]
 8008ec0:	a904      	add	r1, sp, #16
 8008ec2:	3254      	adds	r2, #84	@ 0x54
 8008ec4:	1852      	adds	r2, r2, r1
 8008ec6:	1c75      	adds	r5, r6, #1
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	60e3      	str	r3, [r4, #12]
 8008ecc:	60a3      	str	r3, [r4, #8]
 8008ece:	7013      	strb	r3, [r2, #0]
 8008ed0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008ed2:	4b59      	ldr	r3, [pc, #356]	@ (8009038 <_vfiprintf_r+0x224>)
 8008ed4:	2205      	movs	r2, #5
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	7829      	ldrb	r1, [r5, #0]
 8008eda:	9305      	str	r3, [sp, #20]
 8008edc:	f000 fb1c 	bl	8009518 <memchr>
 8008ee0:	1c6e      	adds	r6, r5, #1
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d11f      	bne.n	8008f26 <_vfiprintf_r+0x112>
 8008ee6:	6822      	ldr	r2, [r4, #0]
 8008ee8:	06d3      	lsls	r3, r2, #27
 8008eea:	d504      	bpl.n	8008ef6 <_vfiprintf_r+0xe2>
 8008eec:	2353      	movs	r3, #83	@ 0x53
 8008eee:	a904      	add	r1, sp, #16
 8008ef0:	185b      	adds	r3, r3, r1
 8008ef2:	2120      	movs	r1, #32
 8008ef4:	7019      	strb	r1, [r3, #0]
 8008ef6:	0713      	lsls	r3, r2, #28
 8008ef8:	d504      	bpl.n	8008f04 <_vfiprintf_r+0xf0>
 8008efa:	2353      	movs	r3, #83	@ 0x53
 8008efc:	a904      	add	r1, sp, #16
 8008efe:	185b      	adds	r3, r3, r1
 8008f00:	212b      	movs	r1, #43	@ 0x2b
 8008f02:	7019      	strb	r1, [r3, #0]
 8008f04:	782b      	ldrb	r3, [r5, #0]
 8008f06:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f08:	d016      	beq.n	8008f38 <_vfiprintf_r+0x124>
 8008f0a:	002e      	movs	r6, r5
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	200a      	movs	r0, #10
 8008f10:	68e3      	ldr	r3, [r4, #12]
 8008f12:	7832      	ldrb	r2, [r6, #0]
 8008f14:	1c75      	adds	r5, r6, #1
 8008f16:	3a30      	subs	r2, #48	@ 0x30
 8008f18:	2a09      	cmp	r2, #9
 8008f1a:	d950      	bls.n	8008fbe <_vfiprintf_r+0x1aa>
 8008f1c:	2900      	cmp	r1, #0
 8008f1e:	d111      	bne.n	8008f44 <_vfiprintf_r+0x130>
 8008f20:	e017      	b.n	8008f52 <_vfiprintf_r+0x13e>
 8008f22:	3601      	adds	r6, #1
 8008f24:	e7af      	b.n	8008e86 <_vfiprintf_r+0x72>
 8008f26:	9b05      	ldr	r3, [sp, #20]
 8008f28:	6822      	ldr	r2, [r4, #0]
 8008f2a:	1ac0      	subs	r0, r0, r3
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	4083      	lsls	r3, r0
 8008f30:	4313      	orrs	r3, r2
 8008f32:	0035      	movs	r5, r6
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	e7cc      	b.n	8008ed2 <_vfiprintf_r+0xbe>
 8008f38:	9b07      	ldr	r3, [sp, #28]
 8008f3a:	1d19      	adds	r1, r3, #4
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	9107      	str	r1, [sp, #28]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	db01      	blt.n	8008f48 <_vfiprintf_r+0x134>
 8008f44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f46:	e004      	b.n	8008f52 <_vfiprintf_r+0x13e>
 8008f48:	425b      	negs	r3, r3
 8008f4a:	60e3      	str	r3, [r4, #12]
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	6023      	str	r3, [r4, #0]
 8008f52:	7833      	ldrb	r3, [r6, #0]
 8008f54:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f56:	d10c      	bne.n	8008f72 <_vfiprintf_r+0x15e>
 8008f58:	7873      	ldrb	r3, [r6, #1]
 8008f5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f5c:	d134      	bne.n	8008fc8 <_vfiprintf_r+0x1b4>
 8008f5e:	9b07      	ldr	r3, [sp, #28]
 8008f60:	3602      	adds	r6, #2
 8008f62:	1d1a      	adds	r2, r3, #4
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	9207      	str	r2, [sp, #28]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	da01      	bge.n	8008f70 <_vfiprintf_r+0x15c>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	425b      	negs	r3, r3
 8008f70:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f72:	4d32      	ldr	r5, [pc, #200]	@ (800903c <_vfiprintf_r+0x228>)
 8008f74:	2203      	movs	r2, #3
 8008f76:	0028      	movs	r0, r5
 8008f78:	7831      	ldrb	r1, [r6, #0]
 8008f7a:	f000 facd 	bl	8009518 <memchr>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d006      	beq.n	8008f90 <_vfiprintf_r+0x17c>
 8008f82:	2340      	movs	r3, #64	@ 0x40
 8008f84:	1b40      	subs	r0, r0, r5
 8008f86:	4083      	lsls	r3, r0
 8008f88:	6822      	ldr	r2, [r4, #0]
 8008f8a:	3601      	adds	r6, #1
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	6023      	str	r3, [r4, #0]
 8008f90:	7831      	ldrb	r1, [r6, #0]
 8008f92:	2206      	movs	r2, #6
 8008f94:	482a      	ldr	r0, [pc, #168]	@ (8009040 <_vfiprintf_r+0x22c>)
 8008f96:	1c75      	adds	r5, r6, #1
 8008f98:	7621      	strb	r1, [r4, #24]
 8008f9a:	f000 fabd 	bl	8009518 <memchr>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d040      	beq.n	8009024 <_vfiprintf_r+0x210>
 8008fa2:	4b28      	ldr	r3, [pc, #160]	@ (8009044 <_vfiprintf_r+0x230>)
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d122      	bne.n	8008fee <_vfiprintf_r+0x1da>
 8008fa8:	2207      	movs	r2, #7
 8008faa:	9b07      	ldr	r3, [sp, #28]
 8008fac:	3307      	adds	r3, #7
 8008fae:	4393      	bics	r3, r2
 8008fb0:	3308      	adds	r3, #8
 8008fb2:	9307      	str	r3, [sp, #28]
 8008fb4:	6963      	ldr	r3, [r4, #20]
 8008fb6:	9a04      	ldr	r2, [sp, #16]
 8008fb8:	189b      	adds	r3, r3, r2
 8008fba:	6163      	str	r3, [r4, #20]
 8008fbc:	e762      	b.n	8008e84 <_vfiprintf_r+0x70>
 8008fbe:	4343      	muls	r3, r0
 8008fc0:	002e      	movs	r6, r5
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	189b      	adds	r3, r3, r2
 8008fc6:	e7a4      	b.n	8008f12 <_vfiprintf_r+0xfe>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	200a      	movs	r0, #10
 8008fcc:	0019      	movs	r1, r3
 8008fce:	3601      	adds	r6, #1
 8008fd0:	6063      	str	r3, [r4, #4]
 8008fd2:	7832      	ldrb	r2, [r6, #0]
 8008fd4:	1c75      	adds	r5, r6, #1
 8008fd6:	3a30      	subs	r2, #48	@ 0x30
 8008fd8:	2a09      	cmp	r2, #9
 8008fda:	d903      	bls.n	8008fe4 <_vfiprintf_r+0x1d0>
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d0c8      	beq.n	8008f72 <_vfiprintf_r+0x15e>
 8008fe0:	9109      	str	r1, [sp, #36]	@ 0x24
 8008fe2:	e7c6      	b.n	8008f72 <_vfiprintf_r+0x15e>
 8008fe4:	4341      	muls	r1, r0
 8008fe6:	002e      	movs	r6, r5
 8008fe8:	2301      	movs	r3, #1
 8008fea:	1889      	adds	r1, r1, r2
 8008fec:	e7f1      	b.n	8008fd2 <_vfiprintf_r+0x1be>
 8008fee:	aa07      	add	r2, sp, #28
 8008ff0:	9200      	str	r2, [sp, #0]
 8008ff2:	0021      	movs	r1, r4
 8008ff4:	003a      	movs	r2, r7
 8008ff6:	4b14      	ldr	r3, [pc, #80]	@ (8009048 <_vfiprintf_r+0x234>)
 8008ff8:	9803      	ldr	r0, [sp, #12]
 8008ffa:	e000      	b.n	8008ffe <_vfiprintf_r+0x1ea>
 8008ffc:	bf00      	nop
 8008ffe:	9004      	str	r0, [sp, #16]
 8009000:	9b04      	ldr	r3, [sp, #16]
 8009002:	3301      	adds	r3, #1
 8009004:	d1d6      	bne.n	8008fb4 <_vfiprintf_r+0x1a0>
 8009006:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009008:	07db      	lsls	r3, r3, #31
 800900a:	d405      	bmi.n	8009018 <_vfiprintf_r+0x204>
 800900c:	89bb      	ldrh	r3, [r7, #12]
 800900e:	059b      	lsls	r3, r3, #22
 8009010:	d402      	bmi.n	8009018 <_vfiprintf_r+0x204>
 8009012:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009014:	f7ff fcce 	bl	80089b4 <__retarget_lock_release_recursive>
 8009018:	89bb      	ldrh	r3, [r7, #12]
 800901a:	065b      	lsls	r3, r3, #25
 800901c:	d500      	bpl.n	8009020 <_vfiprintf_r+0x20c>
 800901e:	e71e      	b.n	8008e5e <_vfiprintf_r+0x4a>
 8009020:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009022:	e71e      	b.n	8008e62 <_vfiprintf_r+0x4e>
 8009024:	aa07      	add	r2, sp, #28
 8009026:	9200      	str	r2, [sp, #0]
 8009028:	0021      	movs	r1, r4
 800902a:	003a      	movs	r2, r7
 800902c:	4b06      	ldr	r3, [pc, #24]	@ (8009048 <_vfiprintf_r+0x234>)
 800902e:	9803      	ldr	r0, [sp, #12]
 8009030:	f000 f87c 	bl	800912c <_printf_i>
 8009034:	e7e3      	b.n	8008ffe <_vfiprintf_r+0x1ea>
 8009036:	46c0      	nop			@ (mov r8, r8)
 8009038:	08009a09 	.word	0x08009a09
 800903c:	08009a0f 	.word	0x08009a0f
 8009040:	08009a13 	.word	0x08009a13
 8009044:	00000000 	.word	0x00000000
 8009048:	08008df1 	.word	0x08008df1

0800904c <_printf_common>:
 800904c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800904e:	0016      	movs	r6, r2
 8009050:	9301      	str	r3, [sp, #4]
 8009052:	688a      	ldr	r2, [r1, #8]
 8009054:	690b      	ldr	r3, [r1, #16]
 8009056:	000c      	movs	r4, r1
 8009058:	9000      	str	r0, [sp, #0]
 800905a:	4293      	cmp	r3, r2
 800905c:	da00      	bge.n	8009060 <_printf_common+0x14>
 800905e:	0013      	movs	r3, r2
 8009060:	0022      	movs	r2, r4
 8009062:	6033      	str	r3, [r6, #0]
 8009064:	3243      	adds	r2, #67	@ 0x43
 8009066:	7812      	ldrb	r2, [r2, #0]
 8009068:	2a00      	cmp	r2, #0
 800906a:	d001      	beq.n	8009070 <_printf_common+0x24>
 800906c:	3301      	adds	r3, #1
 800906e:	6033      	str	r3, [r6, #0]
 8009070:	6823      	ldr	r3, [r4, #0]
 8009072:	069b      	lsls	r3, r3, #26
 8009074:	d502      	bpl.n	800907c <_printf_common+0x30>
 8009076:	6833      	ldr	r3, [r6, #0]
 8009078:	3302      	adds	r3, #2
 800907a:	6033      	str	r3, [r6, #0]
 800907c:	6822      	ldr	r2, [r4, #0]
 800907e:	2306      	movs	r3, #6
 8009080:	0015      	movs	r5, r2
 8009082:	401d      	ands	r5, r3
 8009084:	421a      	tst	r2, r3
 8009086:	d027      	beq.n	80090d8 <_printf_common+0x8c>
 8009088:	0023      	movs	r3, r4
 800908a:	3343      	adds	r3, #67	@ 0x43
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	1e5a      	subs	r2, r3, #1
 8009090:	4193      	sbcs	r3, r2
 8009092:	6822      	ldr	r2, [r4, #0]
 8009094:	0692      	lsls	r2, r2, #26
 8009096:	d430      	bmi.n	80090fa <_printf_common+0xae>
 8009098:	0022      	movs	r2, r4
 800909a:	9901      	ldr	r1, [sp, #4]
 800909c:	9800      	ldr	r0, [sp, #0]
 800909e:	9d08      	ldr	r5, [sp, #32]
 80090a0:	3243      	adds	r2, #67	@ 0x43
 80090a2:	47a8      	blx	r5
 80090a4:	3001      	adds	r0, #1
 80090a6:	d025      	beq.n	80090f4 <_printf_common+0xa8>
 80090a8:	2206      	movs	r2, #6
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	2500      	movs	r5, #0
 80090ae:	4013      	ands	r3, r2
 80090b0:	2b04      	cmp	r3, #4
 80090b2:	d105      	bne.n	80090c0 <_printf_common+0x74>
 80090b4:	6833      	ldr	r3, [r6, #0]
 80090b6:	68e5      	ldr	r5, [r4, #12]
 80090b8:	1aed      	subs	r5, r5, r3
 80090ba:	43eb      	mvns	r3, r5
 80090bc:	17db      	asrs	r3, r3, #31
 80090be:	401d      	ands	r5, r3
 80090c0:	68a3      	ldr	r3, [r4, #8]
 80090c2:	6922      	ldr	r2, [r4, #16]
 80090c4:	4293      	cmp	r3, r2
 80090c6:	dd01      	ble.n	80090cc <_printf_common+0x80>
 80090c8:	1a9b      	subs	r3, r3, r2
 80090ca:	18ed      	adds	r5, r5, r3
 80090cc:	2600      	movs	r6, #0
 80090ce:	42b5      	cmp	r5, r6
 80090d0:	d120      	bne.n	8009114 <_printf_common+0xc8>
 80090d2:	2000      	movs	r0, #0
 80090d4:	e010      	b.n	80090f8 <_printf_common+0xac>
 80090d6:	3501      	adds	r5, #1
 80090d8:	68e3      	ldr	r3, [r4, #12]
 80090da:	6832      	ldr	r2, [r6, #0]
 80090dc:	1a9b      	subs	r3, r3, r2
 80090de:	42ab      	cmp	r3, r5
 80090e0:	ddd2      	ble.n	8009088 <_printf_common+0x3c>
 80090e2:	0022      	movs	r2, r4
 80090e4:	2301      	movs	r3, #1
 80090e6:	9901      	ldr	r1, [sp, #4]
 80090e8:	9800      	ldr	r0, [sp, #0]
 80090ea:	9f08      	ldr	r7, [sp, #32]
 80090ec:	3219      	adds	r2, #25
 80090ee:	47b8      	blx	r7
 80090f0:	3001      	adds	r0, #1
 80090f2:	d1f0      	bne.n	80090d6 <_printf_common+0x8a>
 80090f4:	2001      	movs	r0, #1
 80090f6:	4240      	negs	r0, r0
 80090f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090fa:	2030      	movs	r0, #48	@ 0x30
 80090fc:	18e1      	adds	r1, r4, r3
 80090fe:	3143      	adds	r1, #67	@ 0x43
 8009100:	7008      	strb	r0, [r1, #0]
 8009102:	0021      	movs	r1, r4
 8009104:	1c5a      	adds	r2, r3, #1
 8009106:	3145      	adds	r1, #69	@ 0x45
 8009108:	7809      	ldrb	r1, [r1, #0]
 800910a:	18a2      	adds	r2, r4, r2
 800910c:	3243      	adds	r2, #67	@ 0x43
 800910e:	3302      	adds	r3, #2
 8009110:	7011      	strb	r1, [r2, #0]
 8009112:	e7c1      	b.n	8009098 <_printf_common+0x4c>
 8009114:	0022      	movs	r2, r4
 8009116:	2301      	movs	r3, #1
 8009118:	9901      	ldr	r1, [sp, #4]
 800911a:	9800      	ldr	r0, [sp, #0]
 800911c:	9f08      	ldr	r7, [sp, #32]
 800911e:	321a      	adds	r2, #26
 8009120:	47b8      	blx	r7
 8009122:	3001      	adds	r0, #1
 8009124:	d0e6      	beq.n	80090f4 <_printf_common+0xa8>
 8009126:	3601      	adds	r6, #1
 8009128:	e7d1      	b.n	80090ce <_printf_common+0x82>
	...

0800912c <_printf_i>:
 800912c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800912e:	b08b      	sub	sp, #44	@ 0x2c
 8009130:	9206      	str	r2, [sp, #24]
 8009132:	000a      	movs	r2, r1
 8009134:	3243      	adds	r2, #67	@ 0x43
 8009136:	9307      	str	r3, [sp, #28]
 8009138:	9005      	str	r0, [sp, #20]
 800913a:	9203      	str	r2, [sp, #12]
 800913c:	7e0a      	ldrb	r2, [r1, #24]
 800913e:	000c      	movs	r4, r1
 8009140:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009142:	2a78      	cmp	r2, #120	@ 0x78
 8009144:	d809      	bhi.n	800915a <_printf_i+0x2e>
 8009146:	2a62      	cmp	r2, #98	@ 0x62
 8009148:	d80b      	bhi.n	8009162 <_printf_i+0x36>
 800914a:	2a00      	cmp	r2, #0
 800914c:	d100      	bne.n	8009150 <_printf_i+0x24>
 800914e:	e0ba      	b.n	80092c6 <_printf_i+0x19a>
 8009150:	497a      	ldr	r1, [pc, #488]	@ (800933c <_printf_i+0x210>)
 8009152:	9104      	str	r1, [sp, #16]
 8009154:	2a58      	cmp	r2, #88	@ 0x58
 8009156:	d100      	bne.n	800915a <_printf_i+0x2e>
 8009158:	e08e      	b.n	8009278 <_printf_i+0x14c>
 800915a:	0025      	movs	r5, r4
 800915c:	3542      	adds	r5, #66	@ 0x42
 800915e:	702a      	strb	r2, [r5, #0]
 8009160:	e022      	b.n	80091a8 <_printf_i+0x7c>
 8009162:	0010      	movs	r0, r2
 8009164:	3863      	subs	r0, #99	@ 0x63
 8009166:	2815      	cmp	r0, #21
 8009168:	d8f7      	bhi.n	800915a <_printf_i+0x2e>
 800916a:	f7f6 ffd1 	bl	8000110 <__gnu_thumb1_case_shi>
 800916e:	0016      	.short	0x0016
 8009170:	fff6001f 	.word	0xfff6001f
 8009174:	fff6fff6 	.word	0xfff6fff6
 8009178:	001ffff6 	.word	0x001ffff6
 800917c:	fff6fff6 	.word	0xfff6fff6
 8009180:	fff6fff6 	.word	0xfff6fff6
 8009184:	0036009f 	.word	0x0036009f
 8009188:	fff6007e 	.word	0xfff6007e
 800918c:	00b0fff6 	.word	0x00b0fff6
 8009190:	0036fff6 	.word	0x0036fff6
 8009194:	fff6fff6 	.word	0xfff6fff6
 8009198:	0082      	.short	0x0082
 800919a:	0025      	movs	r5, r4
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	3542      	adds	r5, #66	@ 0x42
 80091a0:	1d11      	adds	r1, r2, #4
 80091a2:	6019      	str	r1, [r3, #0]
 80091a4:	6813      	ldr	r3, [r2, #0]
 80091a6:	702b      	strb	r3, [r5, #0]
 80091a8:	2301      	movs	r3, #1
 80091aa:	e09e      	b.n	80092ea <_printf_i+0x1be>
 80091ac:	6818      	ldr	r0, [r3, #0]
 80091ae:	6809      	ldr	r1, [r1, #0]
 80091b0:	1d02      	adds	r2, r0, #4
 80091b2:	060d      	lsls	r5, r1, #24
 80091b4:	d50b      	bpl.n	80091ce <_printf_i+0xa2>
 80091b6:	6806      	ldr	r6, [r0, #0]
 80091b8:	601a      	str	r2, [r3, #0]
 80091ba:	2e00      	cmp	r6, #0
 80091bc:	da03      	bge.n	80091c6 <_printf_i+0x9a>
 80091be:	232d      	movs	r3, #45	@ 0x2d
 80091c0:	9a03      	ldr	r2, [sp, #12]
 80091c2:	4276      	negs	r6, r6
 80091c4:	7013      	strb	r3, [r2, #0]
 80091c6:	4b5d      	ldr	r3, [pc, #372]	@ (800933c <_printf_i+0x210>)
 80091c8:	270a      	movs	r7, #10
 80091ca:	9304      	str	r3, [sp, #16]
 80091cc:	e018      	b.n	8009200 <_printf_i+0xd4>
 80091ce:	6806      	ldr	r6, [r0, #0]
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	0649      	lsls	r1, r1, #25
 80091d4:	d5f1      	bpl.n	80091ba <_printf_i+0x8e>
 80091d6:	b236      	sxth	r6, r6
 80091d8:	e7ef      	b.n	80091ba <_printf_i+0x8e>
 80091da:	6808      	ldr	r0, [r1, #0]
 80091dc:	6819      	ldr	r1, [r3, #0]
 80091de:	c940      	ldmia	r1!, {r6}
 80091e0:	0605      	lsls	r5, r0, #24
 80091e2:	d402      	bmi.n	80091ea <_printf_i+0xbe>
 80091e4:	0640      	lsls	r0, r0, #25
 80091e6:	d500      	bpl.n	80091ea <_printf_i+0xbe>
 80091e8:	b2b6      	uxth	r6, r6
 80091ea:	6019      	str	r1, [r3, #0]
 80091ec:	4b53      	ldr	r3, [pc, #332]	@ (800933c <_printf_i+0x210>)
 80091ee:	270a      	movs	r7, #10
 80091f0:	9304      	str	r3, [sp, #16]
 80091f2:	2a6f      	cmp	r2, #111	@ 0x6f
 80091f4:	d100      	bne.n	80091f8 <_printf_i+0xcc>
 80091f6:	3f02      	subs	r7, #2
 80091f8:	0023      	movs	r3, r4
 80091fa:	2200      	movs	r2, #0
 80091fc:	3343      	adds	r3, #67	@ 0x43
 80091fe:	701a      	strb	r2, [r3, #0]
 8009200:	6863      	ldr	r3, [r4, #4]
 8009202:	60a3      	str	r3, [r4, #8]
 8009204:	2b00      	cmp	r3, #0
 8009206:	db06      	blt.n	8009216 <_printf_i+0xea>
 8009208:	2104      	movs	r1, #4
 800920a:	6822      	ldr	r2, [r4, #0]
 800920c:	9d03      	ldr	r5, [sp, #12]
 800920e:	438a      	bics	r2, r1
 8009210:	6022      	str	r2, [r4, #0]
 8009212:	4333      	orrs	r3, r6
 8009214:	d00c      	beq.n	8009230 <_printf_i+0x104>
 8009216:	9d03      	ldr	r5, [sp, #12]
 8009218:	0030      	movs	r0, r6
 800921a:	0039      	movs	r1, r7
 800921c:	f7f7 f808 	bl	8000230 <__aeabi_uidivmod>
 8009220:	9b04      	ldr	r3, [sp, #16]
 8009222:	3d01      	subs	r5, #1
 8009224:	5c5b      	ldrb	r3, [r3, r1]
 8009226:	702b      	strb	r3, [r5, #0]
 8009228:	0033      	movs	r3, r6
 800922a:	0006      	movs	r6, r0
 800922c:	429f      	cmp	r7, r3
 800922e:	d9f3      	bls.n	8009218 <_printf_i+0xec>
 8009230:	2f08      	cmp	r7, #8
 8009232:	d109      	bne.n	8009248 <_printf_i+0x11c>
 8009234:	6823      	ldr	r3, [r4, #0]
 8009236:	07db      	lsls	r3, r3, #31
 8009238:	d506      	bpl.n	8009248 <_printf_i+0x11c>
 800923a:	6862      	ldr	r2, [r4, #4]
 800923c:	6923      	ldr	r3, [r4, #16]
 800923e:	429a      	cmp	r2, r3
 8009240:	dc02      	bgt.n	8009248 <_printf_i+0x11c>
 8009242:	2330      	movs	r3, #48	@ 0x30
 8009244:	3d01      	subs	r5, #1
 8009246:	702b      	strb	r3, [r5, #0]
 8009248:	9b03      	ldr	r3, [sp, #12]
 800924a:	1b5b      	subs	r3, r3, r5
 800924c:	6123      	str	r3, [r4, #16]
 800924e:	9b07      	ldr	r3, [sp, #28]
 8009250:	0021      	movs	r1, r4
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	9805      	ldr	r0, [sp, #20]
 8009256:	9b06      	ldr	r3, [sp, #24]
 8009258:	aa09      	add	r2, sp, #36	@ 0x24
 800925a:	f7ff fef7 	bl	800904c <_printf_common>
 800925e:	3001      	adds	r0, #1
 8009260:	d148      	bne.n	80092f4 <_printf_i+0x1c8>
 8009262:	2001      	movs	r0, #1
 8009264:	4240      	negs	r0, r0
 8009266:	b00b      	add	sp, #44	@ 0x2c
 8009268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800926a:	2220      	movs	r2, #32
 800926c:	6809      	ldr	r1, [r1, #0]
 800926e:	430a      	orrs	r2, r1
 8009270:	6022      	str	r2, [r4, #0]
 8009272:	2278      	movs	r2, #120	@ 0x78
 8009274:	4932      	ldr	r1, [pc, #200]	@ (8009340 <_printf_i+0x214>)
 8009276:	9104      	str	r1, [sp, #16]
 8009278:	0021      	movs	r1, r4
 800927a:	3145      	adds	r1, #69	@ 0x45
 800927c:	700a      	strb	r2, [r1, #0]
 800927e:	6819      	ldr	r1, [r3, #0]
 8009280:	6822      	ldr	r2, [r4, #0]
 8009282:	c940      	ldmia	r1!, {r6}
 8009284:	0610      	lsls	r0, r2, #24
 8009286:	d402      	bmi.n	800928e <_printf_i+0x162>
 8009288:	0650      	lsls	r0, r2, #25
 800928a:	d500      	bpl.n	800928e <_printf_i+0x162>
 800928c:	b2b6      	uxth	r6, r6
 800928e:	6019      	str	r1, [r3, #0]
 8009290:	07d3      	lsls	r3, r2, #31
 8009292:	d502      	bpl.n	800929a <_printf_i+0x16e>
 8009294:	2320      	movs	r3, #32
 8009296:	4313      	orrs	r3, r2
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	2e00      	cmp	r6, #0
 800929c:	d001      	beq.n	80092a2 <_printf_i+0x176>
 800929e:	2710      	movs	r7, #16
 80092a0:	e7aa      	b.n	80091f8 <_printf_i+0xcc>
 80092a2:	2220      	movs	r2, #32
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	4393      	bics	r3, r2
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	e7f8      	b.n	800929e <_printf_i+0x172>
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	680d      	ldr	r5, [r1, #0]
 80092b0:	1d10      	adds	r0, r2, #4
 80092b2:	6949      	ldr	r1, [r1, #20]
 80092b4:	6018      	str	r0, [r3, #0]
 80092b6:	6813      	ldr	r3, [r2, #0]
 80092b8:	062e      	lsls	r6, r5, #24
 80092ba:	d501      	bpl.n	80092c0 <_printf_i+0x194>
 80092bc:	6019      	str	r1, [r3, #0]
 80092be:	e002      	b.n	80092c6 <_printf_i+0x19a>
 80092c0:	066d      	lsls	r5, r5, #25
 80092c2:	d5fb      	bpl.n	80092bc <_printf_i+0x190>
 80092c4:	8019      	strh	r1, [r3, #0]
 80092c6:	2300      	movs	r3, #0
 80092c8:	9d03      	ldr	r5, [sp, #12]
 80092ca:	6123      	str	r3, [r4, #16]
 80092cc:	e7bf      	b.n	800924e <_printf_i+0x122>
 80092ce:	681a      	ldr	r2, [r3, #0]
 80092d0:	1d11      	adds	r1, r2, #4
 80092d2:	6019      	str	r1, [r3, #0]
 80092d4:	6815      	ldr	r5, [r2, #0]
 80092d6:	2100      	movs	r1, #0
 80092d8:	0028      	movs	r0, r5
 80092da:	6862      	ldr	r2, [r4, #4]
 80092dc:	f000 f91c 	bl	8009518 <memchr>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d001      	beq.n	80092e8 <_printf_i+0x1bc>
 80092e4:	1b40      	subs	r0, r0, r5
 80092e6:	6060      	str	r0, [r4, #4]
 80092e8:	6863      	ldr	r3, [r4, #4]
 80092ea:	6123      	str	r3, [r4, #16]
 80092ec:	2300      	movs	r3, #0
 80092ee:	9a03      	ldr	r2, [sp, #12]
 80092f0:	7013      	strb	r3, [r2, #0]
 80092f2:	e7ac      	b.n	800924e <_printf_i+0x122>
 80092f4:	002a      	movs	r2, r5
 80092f6:	6923      	ldr	r3, [r4, #16]
 80092f8:	9906      	ldr	r1, [sp, #24]
 80092fa:	9805      	ldr	r0, [sp, #20]
 80092fc:	9d07      	ldr	r5, [sp, #28]
 80092fe:	47a8      	blx	r5
 8009300:	3001      	adds	r0, #1
 8009302:	d0ae      	beq.n	8009262 <_printf_i+0x136>
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	079b      	lsls	r3, r3, #30
 8009308:	d415      	bmi.n	8009336 <_printf_i+0x20a>
 800930a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800930c:	68e0      	ldr	r0, [r4, #12]
 800930e:	4298      	cmp	r0, r3
 8009310:	daa9      	bge.n	8009266 <_printf_i+0x13a>
 8009312:	0018      	movs	r0, r3
 8009314:	e7a7      	b.n	8009266 <_printf_i+0x13a>
 8009316:	0022      	movs	r2, r4
 8009318:	2301      	movs	r3, #1
 800931a:	9906      	ldr	r1, [sp, #24]
 800931c:	9805      	ldr	r0, [sp, #20]
 800931e:	9e07      	ldr	r6, [sp, #28]
 8009320:	3219      	adds	r2, #25
 8009322:	47b0      	blx	r6
 8009324:	3001      	adds	r0, #1
 8009326:	d09c      	beq.n	8009262 <_printf_i+0x136>
 8009328:	3501      	adds	r5, #1
 800932a:	68e3      	ldr	r3, [r4, #12]
 800932c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800932e:	1a9b      	subs	r3, r3, r2
 8009330:	42ab      	cmp	r3, r5
 8009332:	dcf0      	bgt.n	8009316 <_printf_i+0x1ea>
 8009334:	e7e9      	b.n	800930a <_printf_i+0x1de>
 8009336:	2500      	movs	r5, #0
 8009338:	e7f7      	b.n	800932a <_printf_i+0x1fe>
 800933a:	46c0      	nop			@ (mov r8, r8)
 800933c:	08009a1a 	.word	0x08009a1a
 8009340:	08009a2b 	.word	0x08009a2b

08009344 <__swbuf_r>:
 8009344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009346:	0006      	movs	r6, r0
 8009348:	000d      	movs	r5, r1
 800934a:	0014      	movs	r4, r2
 800934c:	2800      	cmp	r0, #0
 800934e:	d004      	beq.n	800935a <__swbuf_r+0x16>
 8009350:	6a03      	ldr	r3, [r0, #32]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d101      	bne.n	800935a <__swbuf_r+0x16>
 8009356:	f7ff f9b5 	bl	80086c4 <__sinit>
 800935a:	69a3      	ldr	r3, [r4, #24]
 800935c:	60a3      	str	r3, [r4, #8]
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	071b      	lsls	r3, r3, #28
 8009362:	d502      	bpl.n	800936a <__swbuf_r+0x26>
 8009364:	6923      	ldr	r3, [r4, #16]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d109      	bne.n	800937e <__swbuf_r+0x3a>
 800936a:	0021      	movs	r1, r4
 800936c:	0030      	movs	r0, r6
 800936e:	f000 f82b 	bl	80093c8 <__swsetup_r>
 8009372:	2800      	cmp	r0, #0
 8009374:	d003      	beq.n	800937e <__swbuf_r+0x3a>
 8009376:	2501      	movs	r5, #1
 8009378:	426d      	negs	r5, r5
 800937a:	0028      	movs	r0, r5
 800937c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800937e:	6923      	ldr	r3, [r4, #16]
 8009380:	6820      	ldr	r0, [r4, #0]
 8009382:	b2ef      	uxtb	r7, r5
 8009384:	1ac0      	subs	r0, r0, r3
 8009386:	6963      	ldr	r3, [r4, #20]
 8009388:	b2ed      	uxtb	r5, r5
 800938a:	4283      	cmp	r3, r0
 800938c:	dc05      	bgt.n	800939a <__swbuf_r+0x56>
 800938e:	0021      	movs	r1, r4
 8009390:	0030      	movs	r0, r6
 8009392:	f7ff fcc3 	bl	8008d1c <_fflush_r>
 8009396:	2800      	cmp	r0, #0
 8009398:	d1ed      	bne.n	8009376 <__swbuf_r+0x32>
 800939a:	68a3      	ldr	r3, [r4, #8]
 800939c:	3001      	adds	r0, #1
 800939e:	3b01      	subs	r3, #1
 80093a0:	60a3      	str	r3, [r4, #8]
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	1c5a      	adds	r2, r3, #1
 80093a6:	6022      	str	r2, [r4, #0]
 80093a8:	701f      	strb	r7, [r3, #0]
 80093aa:	6963      	ldr	r3, [r4, #20]
 80093ac:	4283      	cmp	r3, r0
 80093ae:	d004      	beq.n	80093ba <__swbuf_r+0x76>
 80093b0:	89a3      	ldrh	r3, [r4, #12]
 80093b2:	07db      	lsls	r3, r3, #31
 80093b4:	d5e1      	bpl.n	800937a <__swbuf_r+0x36>
 80093b6:	2d0a      	cmp	r5, #10
 80093b8:	d1df      	bne.n	800937a <__swbuf_r+0x36>
 80093ba:	0021      	movs	r1, r4
 80093bc:	0030      	movs	r0, r6
 80093be:	f7ff fcad 	bl	8008d1c <_fflush_r>
 80093c2:	2800      	cmp	r0, #0
 80093c4:	d0d9      	beq.n	800937a <__swbuf_r+0x36>
 80093c6:	e7d6      	b.n	8009376 <__swbuf_r+0x32>

080093c8 <__swsetup_r>:
 80093c8:	4b2d      	ldr	r3, [pc, #180]	@ (8009480 <__swsetup_r+0xb8>)
 80093ca:	b570      	push	{r4, r5, r6, lr}
 80093cc:	0005      	movs	r5, r0
 80093ce:	6818      	ldr	r0, [r3, #0]
 80093d0:	000c      	movs	r4, r1
 80093d2:	2800      	cmp	r0, #0
 80093d4:	d004      	beq.n	80093e0 <__swsetup_r+0x18>
 80093d6:	6a03      	ldr	r3, [r0, #32]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <__swsetup_r+0x18>
 80093dc:	f7ff f972 	bl	80086c4 <__sinit>
 80093e0:	220c      	movs	r2, #12
 80093e2:	5ea3      	ldrsh	r3, [r4, r2]
 80093e4:	071a      	lsls	r2, r3, #28
 80093e6:	d423      	bmi.n	8009430 <__swsetup_r+0x68>
 80093e8:	06da      	lsls	r2, r3, #27
 80093ea:	d407      	bmi.n	80093fc <__swsetup_r+0x34>
 80093ec:	2209      	movs	r2, #9
 80093ee:	602a      	str	r2, [r5, #0]
 80093f0:	2240      	movs	r2, #64	@ 0x40
 80093f2:	2001      	movs	r0, #1
 80093f4:	4313      	orrs	r3, r2
 80093f6:	81a3      	strh	r3, [r4, #12]
 80093f8:	4240      	negs	r0, r0
 80093fa:	e03a      	b.n	8009472 <__swsetup_r+0xaa>
 80093fc:	075b      	lsls	r3, r3, #29
 80093fe:	d513      	bpl.n	8009428 <__swsetup_r+0x60>
 8009400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009402:	2900      	cmp	r1, #0
 8009404:	d008      	beq.n	8009418 <__swsetup_r+0x50>
 8009406:	0023      	movs	r3, r4
 8009408:	3344      	adds	r3, #68	@ 0x44
 800940a:	4299      	cmp	r1, r3
 800940c:	d002      	beq.n	8009414 <__swsetup_r+0x4c>
 800940e:	0028      	movs	r0, r5
 8009410:	f7ff faf8 	bl	8008a04 <_free_r>
 8009414:	2300      	movs	r3, #0
 8009416:	6363      	str	r3, [r4, #52]	@ 0x34
 8009418:	2224      	movs	r2, #36	@ 0x24
 800941a:	89a3      	ldrh	r3, [r4, #12]
 800941c:	4393      	bics	r3, r2
 800941e:	81a3      	strh	r3, [r4, #12]
 8009420:	2300      	movs	r3, #0
 8009422:	6063      	str	r3, [r4, #4]
 8009424:	6923      	ldr	r3, [r4, #16]
 8009426:	6023      	str	r3, [r4, #0]
 8009428:	2308      	movs	r3, #8
 800942a:	89a2      	ldrh	r2, [r4, #12]
 800942c:	4313      	orrs	r3, r2
 800942e:	81a3      	strh	r3, [r4, #12]
 8009430:	6923      	ldr	r3, [r4, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10b      	bne.n	800944e <__swsetup_r+0x86>
 8009436:	21a0      	movs	r1, #160	@ 0xa0
 8009438:	2280      	movs	r2, #128	@ 0x80
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	0089      	lsls	r1, r1, #2
 800943e:	0092      	lsls	r2, r2, #2
 8009440:	400b      	ands	r3, r1
 8009442:	4293      	cmp	r3, r2
 8009444:	d003      	beq.n	800944e <__swsetup_r+0x86>
 8009446:	0021      	movs	r1, r4
 8009448:	0028      	movs	r0, r5
 800944a:	f000 f89b 	bl	8009584 <__smakebuf_r>
 800944e:	220c      	movs	r2, #12
 8009450:	5ea3      	ldrsh	r3, [r4, r2]
 8009452:	2101      	movs	r1, #1
 8009454:	001a      	movs	r2, r3
 8009456:	400a      	ands	r2, r1
 8009458:	420b      	tst	r3, r1
 800945a:	d00b      	beq.n	8009474 <__swsetup_r+0xac>
 800945c:	2200      	movs	r2, #0
 800945e:	60a2      	str	r2, [r4, #8]
 8009460:	6962      	ldr	r2, [r4, #20]
 8009462:	4252      	negs	r2, r2
 8009464:	61a2      	str	r2, [r4, #24]
 8009466:	2000      	movs	r0, #0
 8009468:	6922      	ldr	r2, [r4, #16]
 800946a:	4282      	cmp	r2, r0
 800946c:	d101      	bne.n	8009472 <__swsetup_r+0xaa>
 800946e:	061a      	lsls	r2, r3, #24
 8009470:	d4be      	bmi.n	80093f0 <__swsetup_r+0x28>
 8009472:	bd70      	pop	{r4, r5, r6, pc}
 8009474:	0799      	lsls	r1, r3, #30
 8009476:	d400      	bmi.n	800947a <__swsetup_r+0xb2>
 8009478:	6962      	ldr	r2, [r4, #20]
 800947a:	60a2      	str	r2, [r4, #8]
 800947c:	e7f3      	b.n	8009466 <__swsetup_r+0x9e>
 800947e:	46c0      	nop			@ (mov r8, r8)
 8009480:	2000001c 	.word	0x2000001c

08009484 <_raise_r>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	0004      	movs	r4, r0
 8009488:	000d      	movs	r5, r1
 800948a:	291f      	cmp	r1, #31
 800948c:	d904      	bls.n	8009498 <_raise_r+0x14>
 800948e:	2316      	movs	r3, #22
 8009490:	6003      	str	r3, [r0, #0]
 8009492:	2001      	movs	r0, #1
 8009494:	4240      	negs	r0, r0
 8009496:	bd70      	pop	{r4, r5, r6, pc}
 8009498:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800949a:	2b00      	cmp	r3, #0
 800949c:	d004      	beq.n	80094a8 <_raise_r+0x24>
 800949e:	008a      	lsls	r2, r1, #2
 80094a0:	189b      	adds	r3, r3, r2
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	2a00      	cmp	r2, #0
 80094a6:	d108      	bne.n	80094ba <_raise_r+0x36>
 80094a8:	0020      	movs	r0, r4
 80094aa:	f000 f831 	bl	8009510 <_getpid_r>
 80094ae:	002a      	movs	r2, r5
 80094b0:	0001      	movs	r1, r0
 80094b2:	0020      	movs	r0, r4
 80094b4:	f000 f81a 	bl	80094ec <_kill_r>
 80094b8:	e7ed      	b.n	8009496 <_raise_r+0x12>
 80094ba:	2a01      	cmp	r2, #1
 80094bc:	d009      	beq.n	80094d2 <_raise_r+0x4e>
 80094be:	1c51      	adds	r1, r2, #1
 80094c0:	d103      	bne.n	80094ca <_raise_r+0x46>
 80094c2:	2316      	movs	r3, #22
 80094c4:	6003      	str	r3, [r0, #0]
 80094c6:	2001      	movs	r0, #1
 80094c8:	e7e5      	b.n	8009496 <_raise_r+0x12>
 80094ca:	2100      	movs	r1, #0
 80094cc:	0028      	movs	r0, r5
 80094ce:	6019      	str	r1, [r3, #0]
 80094d0:	4790      	blx	r2
 80094d2:	2000      	movs	r0, #0
 80094d4:	e7df      	b.n	8009496 <_raise_r+0x12>
	...

080094d8 <raise>:
 80094d8:	b510      	push	{r4, lr}
 80094da:	4b03      	ldr	r3, [pc, #12]	@ (80094e8 <raise+0x10>)
 80094dc:	0001      	movs	r1, r0
 80094de:	6818      	ldr	r0, [r3, #0]
 80094e0:	f7ff ffd0 	bl	8009484 <_raise_r>
 80094e4:	bd10      	pop	{r4, pc}
 80094e6:	46c0      	nop			@ (mov r8, r8)
 80094e8:	2000001c 	.word	0x2000001c

080094ec <_kill_r>:
 80094ec:	2300      	movs	r3, #0
 80094ee:	b570      	push	{r4, r5, r6, lr}
 80094f0:	4d06      	ldr	r5, [pc, #24]	@ (800950c <_kill_r+0x20>)
 80094f2:	0004      	movs	r4, r0
 80094f4:	0008      	movs	r0, r1
 80094f6:	0011      	movs	r1, r2
 80094f8:	602b      	str	r3, [r5, #0]
 80094fa:	f7fa fb0b 	bl	8003b14 <_kill>
 80094fe:	1c43      	adds	r3, r0, #1
 8009500:	d103      	bne.n	800950a <_kill_r+0x1e>
 8009502:	682b      	ldr	r3, [r5, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d000      	beq.n	800950a <_kill_r+0x1e>
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	bd70      	pop	{r4, r5, r6, pc}
 800950c:	20000524 	.word	0x20000524

08009510 <_getpid_r>:
 8009510:	b510      	push	{r4, lr}
 8009512:	f7fa faf9 	bl	8003b08 <_getpid>
 8009516:	bd10      	pop	{r4, pc}

08009518 <memchr>:
 8009518:	b2c9      	uxtb	r1, r1
 800951a:	1882      	adds	r2, r0, r2
 800951c:	4290      	cmp	r0, r2
 800951e:	d101      	bne.n	8009524 <memchr+0xc>
 8009520:	2000      	movs	r0, #0
 8009522:	4770      	bx	lr
 8009524:	7803      	ldrb	r3, [r0, #0]
 8009526:	428b      	cmp	r3, r1
 8009528:	d0fb      	beq.n	8009522 <memchr+0xa>
 800952a:	3001      	adds	r0, #1
 800952c:	e7f6      	b.n	800951c <memchr+0x4>
	...

08009530 <__swhatbuf_r>:
 8009530:	b570      	push	{r4, r5, r6, lr}
 8009532:	000e      	movs	r6, r1
 8009534:	001d      	movs	r5, r3
 8009536:	230e      	movs	r3, #14
 8009538:	5ec9      	ldrsh	r1, [r1, r3]
 800953a:	0014      	movs	r4, r2
 800953c:	b096      	sub	sp, #88	@ 0x58
 800953e:	2900      	cmp	r1, #0
 8009540:	da0c      	bge.n	800955c <__swhatbuf_r+0x2c>
 8009542:	89b2      	ldrh	r2, [r6, #12]
 8009544:	2380      	movs	r3, #128	@ 0x80
 8009546:	0011      	movs	r1, r2
 8009548:	4019      	ands	r1, r3
 800954a:	421a      	tst	r2, r3
 800954c:	d114      	bne.n	8009578 <__swhatbuf_r+0x48>
 800954e:	2380      	movs	r3, #128	@ 0x80
 8009550:	00db      	lsls	r3, r3, #3
 8009552:	2000      	movs	r0, #0
 8009554:	6029      	str	r1, [r5, #0]
 8009556:	6023      	str	r3, [r4, #0]
 8009558:	b016      	add	sp, #88	@ 0x58
 800955a:	bd70      	pop	{r4, r5, r6, pc}
 800955c:	466a      	mov	r2, sp
 800955e:	f000 f853 	bl	8009608 <_fstat_r>
 8009562:	2800      	cmp	r0, #0
 8009564:	dbed      	blt.n	8009542 <__swhatbuf_r+0x12>
 8009566:	23f0      	movs	r3, #240	@ 0xf0
 8009568:	9901      	ldr	r1, [sp, #4]
 800956a:	021b      	lsls	r3, r3, #8
 800956c:	4019      	ands	r1, r3
 800956e:	4b04      	ldr	r3, [pc, #16]	@ (8009580 <__swhatbuf_r+0x50>)
 8009570:	18c9      	adds	r1, r1, r3
 8009572:	424b      	negs	r3, r1
 8009574:	4159      	adcs	r1, r3
 8009576:	e7ea      	b.n	800954e <__swhatbuf_r+0x1e>
 8009578:	2100      	movs	r1, #0
 800957a:	2340      	movs	r3, #64	@ 0x40
 800957c:	e7e9      	b.n	8009552 <__swhatbuf_r+0x22>
 800957e:	46c0      	nop			@ (mov r8, r8)
 8009580:	ffffe000 	.word	0xffffe000

08009584 <__smakebuf_r>:
 8009584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009586:	2602      	movs	r6, #2
 8009588:	898b      	ldrh	r3, [r1, #12]
 800958a:	0005      	movs	r5, r0
 800958c:	000c      	movs	r4, r1
 800958e:	b085      	sub	sp, #20
 8009590:	4233      	tst	r3, r6
 8009592:	d007      	beq.n	80095a4 <__smakebuf_r+0x20>
 8009594:	0023      	movs	r3, r4
 8009596:	3347      	adds	r3, #71	@ 0x47
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	6123      	str	r3, [r4, #16]
 800959c:	2301      	movs	r3, #1
 800959e:	6163      	str	r3, [r4, #20]
 80095a0:	b005      	add	sp, #20
 80095a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095a4:	ab03      	add	r3, sp, #12
 80095a6:	aa02      	add	r2, sp, #8
 80095a8:	f7ff ffc2 	bl	8009530 <__swhatbuf_r>
 80095ac:	9f02      	ldr	r7, [sp, #8]
 80095ae:	9001      	str	r0, [sp, #4]
 80095b0:	0039      	movs	r1, r7
 80095b2:	0028      	movs	r0, r5
 80095b4:	f7ff fa9c 	bl	8008af0 <_malloc_r>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d108      	bne.n	80095ce <__smakebuf_r+0x4a>
 80095bc:	220c      	movs	r2, #12
 80095be:	5ea3      	ldrsh	r3, [r4, r2]
 80095c0:	059a      	lsls	r2, r3, #22
 80095c2:	d4ed      	bmi.n	80095a0 <__smakebuf_r+0x1c>
 80095c4:	2203      	movs	r2, #3
 80095c6:	4393      	bics	r3, r2
 80095c8:	431e      	orrs	r6, r3
 80095ca:	81a6      	strh	r6, [r4, #12]
 80095cc:	e7e2      	b.n	8009594 <__smakebuf_r+0x10>
 80095ce:	2380      	movs	r3, #128	@ 0x80
 80095d0:	89a2      	ldrh	r2, [r4, #12]
 80095d2:	6020      	str	r0, [r4, #0]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	81a3      	strh	r3, [r4, #12]
 80095d8:	9b03      	ldr	r3, [sp, #12]
 80095da:	6120      	str	r0, [r4, #16]
 80095dc:	6167      	str	r7, [r4, #20]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00c      	beq.n	80095fc <__smakebuf_r+0x78>
 80095e2:	0028      	movs	r0, r5
 80095e4:	230e      	movs	r3, #14
 80095e6:	5ee1      	ldrsh	r1, [r4, r3]
 80095e8:	f000 f820 	bl	800962c <_isatty_r>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	d005      	beq.n	80095fc <__smakebuf_r+0x78>
 80095f0:	2303      	movs	r3, #3
 80095f2:	89a2      	ldrh	r2, [r4, #12]
 80095f4:	439a      	bics	r2, r3
 80095f6:	3b02      	subs	r3, #2
 80095f8:	4313      	orrs	r3, r2
 80095fa:	81a3      	strh	r3, [r4, #12]
 80095fc:	89a3      	ldrh	r3, [r4, #12]
 80095fe:	9a01      	ldr	r2, [sp, #4]
 8009600:	4313      	orrs	r3, r2
 8009602:	81a3      	strh	r3, [r4, #12]
 8009604:	e7cc      	b.n	80095a0 <__smakebuf_r+0x1c>
	...

08009608 <_fstat_r>:
 8009608:	2300      	movs	r3, #0
 800960a:	b570      	push	{r4, r5, r6, lr}
 800960c:	4d06      	ldr	r5, [pc, #24]	@ (8009628 <_fstat_r+0x20>)
 800960e:	0004      	movs	r4, r0
 8009610:	0008      	movs	r0, r1
 8009612:	0011      	movs	r1, r2
 8009614:	602b      	str	r3, [r5, #0]
 8009616:	f7fa fadd 	bl	8003bd4 <_fstat>
 800961a:	1c43      	adds	r3, r0, #1
 800961c:	d103      	bne.n	8009626 <_fstat_r+0x1e>
 800961e:	682b      	ldr	r3, [r5, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d000      	beq.n	8009626 <_fstat_r+0x1e>
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	bd70      	pop	{r4, r5, r6, pc}
 8009628:	20000524 	.word	0x20000524

0800962c <_isatty_r>:
 800962c:	2300      	movs	r3, #0
 800962e:	b570      	push	{r4, r5, r6, lr}
 8009630:	4d06      	ldr	r5, [pc, #24]	@ (800964c <_isatty_r+0x20>)
 8009632:	0004      	movs	r4, r0
 8009634:	0008      	movs	r0, r1
 8009636:	602b      	str	r3, [r5, #0]
 8009638:	f7fa fada 	bl	8003bf0 <_isatty>
 800963c:	1c43      	adds	r3, r0, #1
 800963e:	d103      	bne.n	8009648 <_isatty_r+0x1c>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d000      	beq.n	8009648 <_isatty_r+0x1c>
 8009646:	6023      	str	r3, [r4, #0]
 8009648:	bd70      	pop	{r4, r5, r6, pc}
 800964a:	46c0      	nop			@ (mov r8, r8)
 800964c:	20000524 	.word	0x20000524

08009650 <_init>:
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	46c0      	nop			@ (mov r8, r8)
 8009654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009656:	bc08      	pop	{r3}
 8009658:	469e      	mov	lr, r3
 800965a:	4770      	bx	lr

0800965c <_fini>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	46c0      	nop			@ (mov r8, r8)
 8009660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009662:	bc08      	pop	{r3}
 8009664:	469e      	mov	lr, r3
 8009666:	4770      	bx	lr
